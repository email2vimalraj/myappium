/*global it:true, describe:true */
"use strict";

var features = require('../../lib/detect-harmony.js')
  , monocle = require('../../lib/main.js')
  , o_O = monocle.o_O
  , domain = require("domain")
  , launch = monocle.launch
  , run = monocle.run
  , Q = require("q")
  , parallel = monocle.parallel
  , o_C = monocle.callback
  , sleep = monocle.utils.sleep
  , should = require('should');

if (monocle.native) {
  var o_P = monocle.o_P;
}

var square = o_O(wrapGenerator.mark(function callee$0$0(x) {
  return wrapGenerator(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
    case 0:
      return context$1$0.abrupt("return", x * x);
    case 1:
    case "end":
      return context$1$0.stop();
    }
  }, callee$0$0, this);
}));

var cube = o_O(wrapGenerator.mark(function callee$0$1(x) {
  var squareOfX;

  return wrapGenerator(function callee$0$1$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
    case 0:
      context$1$0.next = 2;
      return square(x);
    case 2:
      squareOfX = context$1$0.sent;
      return context$1$0.abrupt("return", x * squareOfX);
    case 4:
    case "end":
      return context$1$0.stop();
    }
  }, callee$0$1, this);
}));

var promiseSleep = function(ms, shouldThrow) {
  var deferred = Q.defer();
  setTimeout(function() {
    if (shouldThrow) {
      deferred.reject(new Error("sleeping sucks!"));
    } else {
      deferred.resolve(ms);
    }
  }, ms);
  return deferred.promise;
};

describe('monocle ' + (monocle.native ? '(es6)' : '(es5)'), function() {
  it('should not reach code after returns', function(done) {
    var shouldntChange = "foo";
    var square = o_O(wrapGenerator.mark(function callee$2$0(x) {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          return context$3$0.abrupt("return", x * x);
        case 2:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    run(wrapGenerator.mark(function callee$2$1() {
      var s;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return square(3);
        case 2:
          s = context$3$0.sent;
          s.should.equal(9);
          shouldntChange.should.equal('foo');
          done();
        case 6:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
  });

  it('should not yield anything other than callbacks', function(done) {
    var badYield = o_O(wrapGenerator.mark(function callee$2$0() {
      var s;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return square(3);
        case 2:
          s = context$3$0.sent;
          context$3$0.next = 5;
          return s;
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    run(wrapGenerator.mark(function callee$2$1() {
      var err;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.prev = 0;
          context$3$0.next = 3;
          return badYield();
        case 3:
          context$3$0.next = 8;
          break;
        case 5:
          context$3$0.prev = 5;
          context$3$0.t0 = context$3$0.catch(0);
          err = context$3$0.t0;
        case 8:
          should.exist(err);
          err.message.should.containEql("o-routines can only yield callbacks");
          done();
        case 11:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this, [[0, 5]]);
    }));
  });

  it('should be able to yield generators', function(done) {
    var square = wrapGenerator.mark(function callee$2$0(x) {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return sleep(5);
        case 2:
          return context$3$0.abrupt("return", x * x);
        case 3:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    });
    run(wrapGenerator.mark(function callee$2$1() {
      var s;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return square(3);
        case 2:
          s = context$3$0.sent;
          s.should.equal(9);
        case 4:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    })).nodeify(done);
  });

  it('should yield undefined as default return', function(done) {
    var f = o_O(wrapGenerator.mark(function callee$2$0() {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return sleep(100);
        case 2:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    run(wrapGenerator.mark(function callee$2$1() {
      var res;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return f();
        case 2:
          res = context$3$0.sent;
          (typeof res).should.equal("undefined");
          done();
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
  });

  it('should work with async methods', function(done) {
    var f1 = o_O(wrapGenerator.mark(function callee$2$0() {
      var cb;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          cb = o_C();
          setTimeout(cb, 500);
          context$3$0.next = 4;
          return cb;
        case 4:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    run(wrapGenerator.mark(function callee$2$1() {
      var start;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          start = Date.now();
          context$3$0.next = 3;
          return f1();
        case 3:
          (Date.now() - start).should.be.above(490);
          done();
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
  });

  it('should catch exceptions and exit oroutine', function(done) {
    var shouldntChange = "foo";
    var fail1 = o_O(wrapGenerator.mark(function callee$2$0() {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          throw new Error("foo bar baz");
        case 2:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    var fail2 = o_O(wrapGenerator.mark(function callee$2$1() {
      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return fail1();
        case 2:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
    run(wrapGenerator.mark(function callee$2$2() {
      var err;

      return wrapGenerator(function callee$2$2$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.prev = 0;
          context$3$0.next = 3;
          return fail2();
        case 3:
          context$3$0.next = 8;
          break;
        case 5:
          context$3$0.prev = 5;
          context$3$0.t1 = context$3$0.catch(0);
          err = context$3$0.t1;
        case 8:
          should.exist(err);
          err.message.should.equal("foo bar baz");
          shouldntChange.should.equal("foo");
          done();
        case 12:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$2, this, [[0, 5]]);
    }));
  });

  it('should catch exceptions in async functions', function(done) {
    var shouldntChange = "foo";
    var errInAsync = function(cb) {
      cb(new Error("foo bar baz"));
    };
    var fail1 = o_O(wrapGenerator.mark(function callee$2$0() {
      var cb;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          cb = o_C();
          errInAsync(cb);
          context$3$0.next = 4;
          return cb;
        case 4:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    var fail2 = o_O(wrapGenerator.mark(function callee$2$1() {
      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return fail1();
        case 2:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
    run(wrapGenerator.mark(function callee$2$2() {
      var err;

      return wrapGenerator(function callee$2$2$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.prev = 0;
          context$3$0.next = 3;
          return fail2();
        case 3:
          context$3$0.next = 8;
          break;
        case 5:
          context$3$0.prev = 5;
          context$3$0.t2 = context$3$0.catch(0);
          err = context$3$0.t2;
        case 8:
          should.exist(err);
          err.message.should.equal("foo bar baz");
          shouldntChange.should.equal("foo");
          done();
        case 12:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$2, this, [[0, 5]]);
    }));
  });

  it('should have clean error traces', function(done) {
    var shouldntChange = "foo";
    var errInAsync = function(cb) {
      cb(new Error("foo bar baz"));
    };
    var fail1 = o_O(wrapGenerator.mark(function callee$2$0() {
      var cb;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          cb = o_C();
          errInAsync(cb);
          context$3$0.next = 4;
          return cb;
        case 4:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    var fail2 = o_O(wrapGenerator.mark(function callee$2$1() {
      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return fail1();
        case 2:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
    run(wrapGenerator.mark(function callee$2$2() {
      var err, re, matches;

      return wrapGenerator(function callee$2$2$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.prev = 0;
          context$3$0.next = 3;
          return fail2();
        case 3:
          context$3$0.next = 8;
          break;
        case 5:
          context$3$0.prev = 5;
          context$3$0.t3 = context$3$0.catch(0);
          err = context$3$0.t3;
        case 8:
          should.exist(err);
          re = new RegExp("monocle\.js", "g");
          matches = re.exec(err.stack);
          matches.length.should.not.be.above(1);
          err.message.should.equal("foo bar baz");
          shouldntChange.should.equal("foo");
          done();
        case 15:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$2, this, [[0, 5]]);
    }));
  });

  it('should work with launch', function(done) {
    launch(o_O(wrapGenerator.mark(function callee$2$0() {
      var x;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return square(5);
        case 2:
          x = context$3$0.sent;
          x.should.equal(25);
          done();
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    })));
  });

  it('should work with embedded o-routines', function(done) {
    run(wrapGenerator.mark(function callee$2$0() {
      var x;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return cube(3);
        case 2:
          x = context$3$0.sent;
          x.should.equal(27);
          done();
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
  });

  it('should pass multiple parameters to o-routine', function(done) {
    var add = o_O(wrapGenerator.mark(function callee$2$0(x, y) {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          return context$3$0.abrupt("return", x + y);
        case 1:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    run(wrapGenerator.mark(function callee$2$1() {
      var sum;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return add(3, 6);
        case 2:
          sum = context$3$0.sent;
          sum.should.equal(9);
          done();
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
  });

  it('should handle converting node-style async err handling', function(done) {
    var asyncFn = function(shouldErr, cb) {
      setTimeout(function() {
        if (shouldErr) {
          return cb(new Error("bad"));
        }
        cb(null, "yay!");
      }, 500);
    };
    var syncFn = o_O(wrapGenerator.mark(function callee$2$0(shouldErr) {
      var cb;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          cb = o_C();
          asyncFn(shouldErr, cb);
          context$3$0.next = 4;
          return cb;
        case 4:
          return context$3$0.abrupt("return", context$3$0.sent);
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    run(wrapGenerator.mark(function callee$2$1() {
      var res, err;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return syncFn(false);
        case 2:
          res = context$3$0.sent;
          res.should.equal("yay!");
          context$3$0.prev = 4;
          context$3$0.next = 7;
          return syncFn(true);
        case 7:
          res = context$3$0.sent;
          context$3$0.next = 13;
          break;
        case 10:
          context$3$0.prev = 10;
          context$3$0.t4 = context$3$0.catch(4);
          err = context$3$0.t4;
        case 13:
          should.exist(err);
          err.message.should.equal("bad");
          done();
        case 16:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this, [[4, 10]]);
    }));
  });

  it('should bind generators to calling object', function(done) {
    var bindObj = {
      foo: 'bar'
    };

    bindObj.gen = o_O(wrapGenerator.mark(function callee$2$0() {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          return context$3$0.abrupt("return", this.foo);
        case 1:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));

    run(wrapGenerator.mark(function callee$2$1() {
      var res;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return this.gen();
        case 2:
          res = context$3$0.sent;
          res.should.equal('bar');
          done();
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }), bindObj);
  });

  it('should work with classes', function(done) {
    var MyClass = function() {
      this.foo = 'bar';
    };
    MyClass.prototype.myOroutine = o_O(wrapGenerator.mark(function callee$2$0() {
      var s;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return square(3);
        case 2:
          s = context$3$0.sent;
          return context$3$0.abrupt("return", this.foo + ' ' + s);
        case 4:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    MyClass.prototype.run = function(gen) {
      run(gen, this);
    };
    var obj = new MyClass();
    obj.run(wrapGenerator.mark(function callee$2$1() {
      var res;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return this.myOroutine();
        case 2:
          res = context$3$0.sent;
          res.should.equal('bar 9');
          done();
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
  });

  it('should unravel lots of callbacks', function(done) {
    run(wrapGenerator.mark(function callee$2$0() {
      var i;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          i = 0;
        case 1:
          if (!(i < 100)) {
            context$3$0.next = 7;
            break;
          }

          context$3$0.next = 4;
          return sleep(20);
        case 4:
          i++;
          context$3$0.next = 1;
          break;
        case 7:
          i.should.equal(100);
          done();
        case 10:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
  });

  it('should defer non-generator "o-routines"', function(done) {
    var notAGenerator = o_O(function() {
      return 'foo';
    });
    run(wrapGenerator.mark(function callee$2$0() {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return notAGenerator();
        case 2:
          context$3$0.sent.should.equal("foo");
          done();
        case 4:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
  });

  it('should yield to monocle callbacks', function(done) {
    run(wrapGenerator.mark(function callee$2$0() {
      var cb, start;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          cb = o_C();
          start = Date.now();
          setTimeout(cb, 500);
          context$3$0.next = 5;
          return cb;
        case 5:
          (Date.now() - start).should.be.above(490);
          done();
        case 7:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
  });

  it('should allow parallel execution', function(done) {
    var f1 = o_O(wrapGenerator.mark(function callee$2$0() {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return sleep(500);
        case 2:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    var f2 = o_O(wrapGenerator.mark(function callee$2$1() {
      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return sleep(250);
        case 2:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
    var f3 = o_O(wrapGenerator.mark(function callee$2$2() {
      return wrapGenerator(function callee$2$2$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return sleep(333);
        case 2:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$2, this);
    }));
    run(wrapGenerator.mark(function callee$2$3() {
      var start, end;

      return wrapGenerator(function callee$2$3$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          start = Date.now();
          context$3$0.next = 3;
          return parallel([f1, f2, f3]);
        case 3:
          end = Date.now();
          (end - start).should.be.above(490);
          (end - start).should.be.below(749);
          done();
        case 7:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$3, this);
    }));
  });

  it('should pass parameters to parallel oroutines', function(done) {
    var f1 = o_O(wrapGenerator.mark(function callee$2$0(val) {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          val.should.equal("1");
          context$3$0.next = 3;
          return sleep(500);
        case 3:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    var f2 = o_O(wrapGenerator.mark(function callee$2$1(val1, val2) {
      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          val1.should.equal("foo");
          val2.should.equal("bar");
          context$3$0.next = 4;
          return sleep(250);
        case 4:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
    var f3 = o_O(wrapGenerator.mark(function callee$2$2() {
      var args$3$0 = arguments;

      return wrapGenerator(function callee$2$2$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          args$3$0.length.should.equal(0);
          context$3$0.next = 3;
          return sleep(333);
        case 3:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$2, this);
    }));
    var f4 = o_O(wrapGenerator.mark(function callee$2$3() {
      var args$3$0 = arguments;

      return wrapGenerator(function callee$2$3$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          args$3$0.length.should.equal(0);
        case 1:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$3, this);
    }));
    run(wrapGenerator.mark(function callee$2$4() {
      var start, end;

      return wrapGenerator(function callee$2$4$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          start = Date.now();
          context$3$0.next = 3;
          return parallel([[f1, "1"], [f2, "foo", "bar"], [f3], f4]);
        case 3:
          end = Date.now();
          (end - start).should.be.above(490);
          (end - start).should.be.below(740);
          done();
        case 7:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$4, this);
    }));
  });

  it('should return values from parallel oroutines', function(done) {
    var f1 = o_O(wrapGenerator.mark(function callee$2$0(val) {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          val.should.equal("1");
          context$3$0.next = 3;
          return sleep(500);
        case 3:
          return context$3$0.abrupt("return", 'a');
        case 4:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    var f2 = o_O(wrapGenerator.mark(function callee$2$1(val1, val2) {
      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          val1.should.equal("foo");
          val2.should.equal("bar");
          context$3$0.next = 4;
          return sleep(250);
        case 4:
          return context$3$0.abrupt("return", 'b');
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));
    var f3 = o_O(wrapGenerator.mark(function callee$2$2() {
      var args$3$0 = arguments;

      return wrapGenerator(function callee$2$2$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          args$3$0.length.should.equal(0);
          context$3$0.next = 3;
          return sleep(0.33);
        case 3:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$2, this);
    }));
    run(wrapGenerator.mark(function callee$2$3() {
      var start, res, end;

      return wrapGenerator(function callee$2$3$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          start = Date.now();
          context$3$0.next = 3;
          return parallel([[f1, "1"], [f2, "foo", "bar"], f3]);
        case 3:
          res = context$3$0.sent;
          end = Date.now();
          (end - start).should.be.above(490);
          (end - start).should.be.below(740);
          res.should.eql(["a", "b", undefined]);
          done();
        case 9:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$3, this);
    }));
  });

  it('should make errors from run available on cb.fin/nodeify', function(done) {
    var f1 = o_O(wrapGenerator.mark(function callee$2$0() {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return sleep(50);
        case 2:
          throw new Error('oh noes!');
        case 3:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    run(wrapGenerator.mark(function callee$2$1() {
      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return promiseSleep(20);
        case 2:
          throw new Error('woohoo');
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    })).fin(function(err) {
      should.exist(err);
      err.message.should.equal('woohoo');
      run(wrapGenerator.mark(function callee$3$0() {
        return wrapGenerator(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
          case 0:
            context$4$0.next = 2;
            return f1();
          case 2:
          case "end":
            return context$4$0.stop();
          }
        }, callee$3$0, this);
      })).nodeify(function(err2) {
        should.exist(err2);
        err2.message.should.equal('oh noes!');
        done();
      });
    });
  });

  it('should not swallow errors in run without fin/nodeify', function(done) {
    var d = domain.create();
    var t;
    d.on('error', function(err) {
      clearTimeout(t);
      should.exist(err);
      err.message.should.equal("whoops!");
      done();
    });
    d.run(function() {
      run(wrapGenerator.mark(function callee$3$0() {
        return wrapGenerator(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
          case 0:
            context$4$0.next = 2;
            return sleep(250);
          case 2:
            throw new Error("whoops!");
          case 3:
          case "end":
            return context$4$0.stop();
          }
        }, callee$3$0, this);
      }));
      t = setTimeout(function() {
        done(new Error("Run swallowed error"));
      }, 500);
    });
  });

  it('should not swallow errors in parallel', function(done) {
    var f1 = o_O(wrapGenerator.mark(function callee$2$0() {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          throw new Error('oh noes!');
        case 1:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
    var err;
    run(wrapGenerator.mark(function callee$2$1() {
      var start;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          start = Date.now();
          context$3$0.prev = 1;
          context$3$0.next = 4;
          return parallel([f1, [sleep, 250]]);
        case 4:
          context$3$0.next = 9;
          break;
        case 6:
          context$3$0.prev = 6;
          context$3$0.t5 = context$3$0.catch(1);
          err = context$3$0.t5;
        case 9:
          (Date.now() - start).should.be.above(240);
          should.exist(err);
          err.message.should.containEql('One or more');
          err.allErrors[0].message.should.eql('oh noes!');
          done();
        case 14:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this, [[1, 6]]);
    }));
  });

  it('should work out of the box with promises', function(done) {
    run(wrapGenerator.mark(function callee$2$0() {
      var start;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          start = Date.now();
          context$3$0.next = 3;
          return promiseSleep(100);
        case 3:
          context$3$0.next = 5;
          return promiseSleep(200);
        case 5:
          context$3$0.next = 7;
          return promiseSleep(50);
        case 7:
          (Date.now() - start).should.be.above(349);
          done();
        case 9:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
  });

  it('should return promise resolutions', function(done) {
    run(wrapGenerator.mark(function callee$2$0() {
      var start, timeSlept;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          start = Date.now();
          context$3$0.next = 3;
          return promiseSleep(50);
        case 3:
          timeSlept = context$3$0.sent;
          (Date.now() - start).should.be.above(49);
          timeSlept.should.equal(50);
          done();
        case 7:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
  });

  it('should handle promise errors', function(done) {
    run(wrapGenerator.mark(function callee$2$0() {
      var start, err;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          start = Date.now();
          context$3$0.prev = 1;
          context$3$0.next = 4;
          return promiseSleep(100, true);
        case 4:
          context$3$0.next = 6;
          return promiseSleep(200);
        case 6:
          context$3$0.next = 11;
          break;
        case 8:
          context$3$0.prev = 8;
          context$3$0.t6 = context$3$0.catch(1);
          err = context$3$0.t6;
        case 11:
          should.exist(err);
          (Date.now() - start).should.be.below(149);
          err.message.should.containEql('sleeping');
          done();
        case 15:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this, [[1, 8]]);
    }));
  });

  it('should monoclize things', function(done) {
    var asyncFn = function(foo, bar, cb) {
      setTimeout(function() {
        if (foo === "bad") {
          return cb(new Error("blarg"));
        }
        cb(null, foo + "lol" + bar);
      }, 50);
    };

    var mAsyncFn = monocle.monoclize(asyncFn);

    run(wrapGenerator.mark(function callee$2$0() {
      var res, err;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return mAsyncFn("lo", "ol");
        case 2:
          res = context$3$0.sent;
          res.should.equal("lololol");
          context$3$0.prev = 4;
          context$3$0.next = 7;
          return mAsyncFn("bad", "oops");
        case 7:
          context$3$0.next = 12;
          break;
        case 9:
          context$3$0.prev = 9;
          context$3$0.t7 = context$3$0.catch(4);
          err = context$3$0.t7;
        case 12:
          should.exist(err);
          err.message.should.equal("blarg");
          done();
        case 15:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this, [[4, 9]]);
    }));
  });

  it('should nodeify o-routines', function(done) {
    var nodeAsyncFn = monocle.no(sleep);
    var start = Date.now();
    nodeAsyncFn(50, function (err) {
      should.not.exist(err);
      (Date.now() - start).should.be.above(49);
      done();
    });
  });

  it('should nodeify generators', function(done) {
    var myGen = wrapGenerator.mark(function callee$2$0(x, y) {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return sleep(x + y);
        case 2:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    });
    var nodeAsyncFn = monocle.no(myGen);
    var start = Date.now();
    nodeAsyncFn(50, 25, function (err) {
      should.not.exist(err);
      (Date.now() - start).should.be.above(74);
      done();
    });
  });

  if (monocle.native && features.proxies) {

    describe('chaining callbacks', function() {
      var Clazz = function(initStr) {
        this.data = initStr || '';
      };
      Clazz.prototype.getString = function() {
        return this.data;
      };
      Clazz.prototype.f1 = o_P(wrapGenerator.mark(function callee$2$0(s) {
        return wrapGenerator(function callee$2$0$(context$3$0) {
          while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return sleep(250);
          case 2:
            this.data += "f1:" + s;
            return context$3$0.abrupt("return", this);
          case 4:
          case "end":
            return context$3$0.stop();
          }
        }, callee$2$0, this);
      }), ['data']);
      Clazz.prototype.f2 = o_O(wrapGenerator.mark(function callee$2$1(s) {
        return wrapGenerator(function callee$2$1$(context$3$0) {
          while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return sleep(250);
          case 2:
            this.data += "f2::" + s + s;
            return context$3$0.abrupt("return", this);
          case 4:
          case "end":
            return context$3$0.stop();
          }
        }, callee$2$1, this);
      }));
      Clazz.prototype.f3 = o_O(wrapGenerator.mark(function callee$2$2(s) {
        return wrapGenerator(function callee$2$2$(context$3$0) {
          while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return sleep(250);
          case 2:
            this.data += "f3:::" + s + s + s;
            return context$3$0.abrupt("return", this.data);
          case 4:
          case "end":
            return context$3$0.stop();
          }
        }, callee$2$2, this);
      }));
      Clazz.prototype.f4 = o_O(wrapGenerator.mark(function callee$2$3(s) {
        return wrapGenerator(function callee$2$3$(context$3$0) {
          while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return sleep(250);
          case 2:
            return context$3$0.abrupt("return", [new Clazz(s), new Clazz(s), this]);
          case 3:
          case "end":
            return context$3$0.stop();
          }
        }, callee$2$3, this);
      }));

      it('should chain method calls', function(done) {
        run(wrapGenerator.mark(function callee$3$0() {
          var obj, res;

          return wrapGenerator(function callee$3$0$(context$4$0) {
            while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              obj = new Clazz();
              context$4$0.next = 3;
              return obj.f1('a').f2('b').f3('c');
            case 3:
              res = context$4$0.sent;
              res.should.equal("f1:af2::bbf3:::ccc");
              done();
            case 6:
            case "end":
              return context$4$0.stop();
            }
          }, callee$3$0, this);
        }));
      });

      it('should chain properties as well', function(done) {
        run(wrapGenerator.mark(function callee$3$0() {
          var obj, obj2, res1, res2;

          return wrapGenerator(function callee$3$0$(context$4$0) {
            while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              obj = new Clazz();
              obj2 = new Clazz();
              context$4$0.next = 4;
              return obj.f1('a').f4('newguys')[1].f3('b');
            case 4:
              res1 = context$4$0.sent;
              res1.should.equal("newguysf3:::bbb");
              context$4$0.next = 8;
              return obj2.f1('a').f4('lol')[2].f2('b').data;
            case 8:
              res2 = context$4$0.sent;
              res2.should.equal("f1:af2::bb");
              done();
            case 11:
            case "end":
              return context$4$0.stop();
            }
          }, callee$3$0, this);
        }));
      });

    });
  }
});
