/*global Proxy:true */
(function(
  // Reliable reference to the global object (i.e. window in browsers).
  global,

  // Dummy constructor that we use as the .constructor property for
  // functions that return Generator objects.
  GeneratorFunction,

  // Undefined value, more compressible than void 0.
  undefined
) {
  var hasOwn = Object.prototype.hasOwnProperty;

  if (global.wrapGenerator) {
    return;
  }

  function wrapGenerator(innerFn, outerFn, self, tryList) {
    return new Generator(innerFn, outerFn, self || null, tryList || []);
  }

  global.wrapGenerator = wrapGenerator;
  if (typeof exports !== "undefined") {
    exports.wrapGenerator = wrapGenerator;
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  var Gp = Generator.prototype;
  var GFp = GeneratorFunction.prototype = Object.create(Function.prototype);
  GFp.constructor = GeneratorFunction;
  GFp.prototype = Gp;
  Gp.constructor = GFp;

  wrapGenerator.mark = function(genFun) {
    genFun.__proto__ = GFp;
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Ensure isGeneratorFunction works when Function#name not supported.
  if (GeneratorFunction.name !== "GeneratorFunction") {
    GeneratorFunction.name = "GeneratorFunction";
  }

  wrapGenerator.isGeneratorFunction = function(genFun) {
    var ctor = genFun && genFun.constructor;
    return ctor ? GeneratorFunction.name === ctor.name : false;
  };

  function Generator(innerFn, outerFn, self, tryList) {
    var generator = outerFn ? Object.create(outerFn.prototype) : this;
    var context = new Context(tryList);
    var state = GenStateSuspendedStart;

    function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        throw new Error("Generator has already finished");
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          try {
            var info = delegate.iterator[method](arg);

            // Delegate generator ran and handled its own exceptions so
            // regardless of what the method was, we continue as if it is
            // "next" with an undefined arg.
            method = "next";
            arg = undefined;

          } catch (uncaught) {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = uncaught;

            continue;
          }

          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          if (state === GenStateSuspendedStart &&
              typeof arg !== "undefined") {
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            throw new TypeError(
              "attempt to send " + JSON.stringify(arg) + " to newborn generator"
            );
          }

          if (state === GenStateSuspendedYield) {
            context.sent = arg;
          } else {
            delete context.sent;
          }

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }
        }

        state = GenStateExecuting;

        try {
          var value = innerFn.call(self, context);

          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: value,
            done: context.done
          };

          if (value === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } catch (thrown) {
          state = GenStateCompleted;

          if (method === "next") {
            context.dispatchException(thrown);
          } else {
            arg = thrown;
          }
        }
      }
    }

    generator.next = invoke.bind(generator, "next");
    generator.throw = invoke.bind(generator, "throw");

    return generator;
  }

  Gp[typeof Symbol === "function"
     && Symbol.iterator
     || "@@iterator"] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(triple) {
    var entry = { tryLoc: triple[0] };

    if (1 in triple) {
      entry.catchLoc = triple[1];
    }

    if (2 in triple) {
      entry.finallyLoc = triple[2];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry, i) {
    var record = entry.completion || {};
    record.type = i === 0 ? "normal" : "return";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryList.forEach(pushTryEntry, this);
    this.reset();
  }

  wrapGenerator.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    var iterator = iterable;
    var Symbol = global.Symbol;
    if (Symbol && Symbol.iterator in iterable) {
      iterator = iterable[Symbol.iterator]();
    } else if (!isNaN(iterable.length)) {
      var i = -1;
      iterator = function next() {
        while (++i < iterable.length) {
          if (i in iterable) {
            next.value = iterable[i];
            next.done = false;
            return next;
          }
        };
        next.done = true;
        return next;
      };
      iterator.next = iterator;
    }
    return iterator;
  }
  wrapGenerator.values = values;

  Context.prototype = {
    constructor: Context,

    reset: function() {
      this.prev = 0;
      this.next = 0;
      this.sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      // Pre-initialize at least 20 temporary variables to enable hidden
      // class optimizations for simple generators.
      for (var tempIndex = 0, tempName;
           hasOwn.call(this, tempName = "t" + tempIndex) || tempIndex < 20;
           ++tempIndex) {
        this[tempName] = null;
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    _findFinallyEntry: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") && (
              entry.finallyLoc === finallyLoc ||
              this.prev < entry.finallyLoc)) {
          return entry;
        }
      }
    },

    abrupt: function(type, arg) {
      var entry = this._findFinallyEntry();
      var record = entry ? entry.completion : {};

      record.type = type;
      record.arg = arg;

      if (entry) {
        this.next = entry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      var entry = this._findFinallyEntry(finallyLoc);
      return this.complete(entry.completion);
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry, i);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
}).apply(this, Function("return [this, function GeneratorFunction(){}]")());

"use strict";

var _ = require('underscore')
  , native = require('./detect-harmony.js').generators
  , arrayifyResponse = require('./helpers').arrayifyResponse
  , callback = require('./callback');

var alreadyReflected = typeof Proxy !== "undefined" &&
                       Proxy &&
                       typeof Proxy.revocable === "function";

if (native && !alreadyReflected) {
  require('harmony-reflect'); // get proxy support
}

var monocle = {};
monocle.native = native;

// create a callback with no handlers and set its err/result
var defer = function(err, result) {
  var cb = callback();
  cb(err, result);
  return cb;
};

// create an o-routine callback's handler
var getResultHandler = function(gen, cb) {
  return function(err, res) {
    if (err) {
      chain(err, gen, cb);
    } else {
      chain(res, gen, cb);
    }
  };
};

// check whether a given object is a monocle-specific 'callback'
var isCallback = function(obj) {
  return (typeof obj === 'function' && _.has(obj, '__is_monocle_cb'));
};

var isIterator = function(obj) {
  return (obj !== null &&
          typeof obj === 'object' &&
          typeof obj.next === 'function' &&
          typeof obj.throw === 'function');
};

var isGenerator = function (obj) {
  if (native) {
    return (obj !== null && isIterator(obj.prototype));
  } else {
    return (obj !== null &&
            obj.constructor.toString().indexOf("GeneratorFunction") !== -1);
  }
};

// check whether a given object is a promise
var isPromise = function(obj) {
  try {
    return Object.prototype.toString.call(obj.then).indexOf('Function') !== -1;
  } catch (e) {
    return false;
  }
};

var cleanupErrStack = function(err) {
  var chainSigRe = '(^.+at Object.<anonymous>.+monocle\.js.+$\n)?' +
                   '^.+at GeneratorFunctionPrototype\.next.+$\n' +
                   '^.+at chain.+monocle\.js.+$\n' +
                   '^.+at .+monocle\.js.+$\n';
  var re = new RegExp(chainSigRe, 'mg');
  if (re.exec(err.stack)) {
    err.stack = err.stack.replace(re, '');
  }
  return err;
};

var convertPromise = function(promise) {
  var cb = callback();
  promise.then(function() {
    var responses = Array.prototype.slice.call(arguments, 0);
    responses.unshift(null);
    cb.apply(cb, responses);
  }, function(err) {
    cb(err);
  });
  return cb;
};

// iterate through a generator, doing the appropriate things with the
// result of each 'yield'
var chain = function(toGen, gen, cb) {
  var fromGen, fromGenWrapper;
  while (true) {
    try {
      if (toGen instanceof Error) {
        // if a callback has passed us an error, throw it in the context
        // of the generator where we're waiting for the callback
        fromGenWrapper = gen.throw(toGen);
      } else {
        fromGenWrapper = gen.next(toGen);
      }
      // unwrap the actual response from the generator
      fromGen = fromGenWrapper.value;
    } catch (e) {
      // pass any errors up the chain
      cb(cleanupErrStack(e));
      return cb;
    }

    if (fromGenWrapper.done) {
      // we have reached the end of the generator, which means the result
      // of the last next() should be whatever was 'returned' (or undef).
      // pass it up the chain
      cb(null, fromGen);
      return cb;
    }

    if (isPromise(fromGen)) {
      // turn the promise into a callback
      fromGen = convertPromise(fromGen);
    } else if (isIterator(fromGen)) {
      // convert the iterator into a called o-routine
      fromGen = chain(undefined, fromGen, callback());
    } else if (!isCallback(fromGen)) {
      // let the user know that yielding anything other than a callback is
      // an error
      cb(new Error("o-routines can only yield callbacks, generators, and " +
                   "promises"));
      return cb;
    }

    if (!_.has(fromGen, 'result')) {
      // the user is yielding a callback, so we add a handler which will
      // be called when the callback itself is called
      fromGen.add(getResultHandler(gen, cb));
      return cb;
    }
    // if the callback already has a result, pass it back into the generator
    toGen = fromGen.result;
  }
};

// the monocle decorator
var o_O = function(gen) {
  var fn = function() {
    var result;
    try {
      // start the generator, passing any arguments
      result = gen.apply(this, Array.prototype.slice.call(arguments, 0));
    } catch (e) {
      return defer(e);
    }

    if(isIterator(result)) {
      // if we get an iterator back, we did indeed have a generator, so start
      // the monocle chain with a new main-level callback
      return chain(undefined, result, callback());
    } else if (isCallback(result)) {
      return result;
    }

    // if a user is monoclizing a non-generator, set up a deferred callback
    // so we return the result of the function straightaway
    return defer(null, result);
  };
  fn.__is_monocle_oroutine = true;
  return fn;
};

if (native) {
  var o_P = function(gen, props) {
    if (typeof props === "undefined") {
      props = [];
    }
    if (!(props instanceof Array)) {
      throw new Error("Chained property list must be an array");
    }
    var makeCbProxy = function(cb) {
      var handler = {
        get: function(tgt, name) {
          if (name in tgt || name === "inspect" || name === "then") {
            return tgt[name];
          } else if (/^[0-9]$/.test(name.toString()) || _.contains(props, name)) {
            // we're trying to get a property/index
            // just give a proxy for the actual property
            var propCb = callback();
            cb.add(function(err, res) {
              if (err) return propCb(err);
              propCb(null, res[name]);
            });
            return makeCbProxy(propCb);
          } else {
            // we're trying to call a method
            // give a proxy for the method call
            return o_P(wrapGenerator.mark(function callee$3$0() {
              var args, res, fin, args$4$0 = arguments;

              return wrapGenerator(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                case 0:
                  args = Array.prototype.slice.call(args$4$0);
                  context$4$0.next = 3;
                  return cb;
                case 3:
                  res = context$4$0.sent;
                  context$4$0.next = 6;
                  return res[name].apply(res, args);
                case 6:
                  fin = context$4$0.sent;
                  return context$4$0.abrupt("return", fin);
                case 8:
                case "end":
                  return context$4$0.stop();
                }
              }, callee$3$0, this);
            }), props);
          }
        }
      };
      return Proxy(cb, handler);
    };

    return function() {
      var mainCb = o_O(gen).apply(this, Array.prototype.slice.call(arguments));
      return makeCbProxy(mainCb);
    };
  };
}

// kick off an o-routine
monocle.launch = function(oroutine) {
  var args = Array.prototype.slice.call(arguments, 1);
  var cb;
  try {
    cb = oroutine.apply(oroutine, args);
  } catch (err) {
    console.log("got an initial err: " + err);
  }
  if (!isCallback(cb)) {
    // if we launch something that's not an o-routine, just return it
    // immediately
    return cb;
  }

  // make sure that any errors that get passed up but not handled get thrown
  // a user handles an error by defining .fin or .nodeify on the cb
  cb.add(function(err) {
    // if an error is thrown before the eventloop goes around, we won't know
    // that someone has actually attached a handler. So wait a tick.
    setTimeout(function() {
      if (!cb.errIsHandled && err) {
        throw err;
      }
    });
  });

  return cb;
};

// define and launch an o-routine in one go
monocle.run = function(gen, bindObj) {
  var oroutine = o_O(gen).bind(bindObj);
  return monocle.launch(oroutine);
};

// convert a regular node-style callback fn into an o-routine
monocle.monoclize = function(wrappedFn, wrappedObj) {
  return o_O(wrapGenerator.mark(function callee$1$0() {
    var cb, args, args$2$0 = arguments;

    return wrapGenerator(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        cb = callback();
        args = Array.prototype.slice.call(args$2$0, 0);
        args.push(cb);
        wrappedFn.apply(wrappedObj, args);
        context$2$0.next = 6;
        return cb;
      case 6:
        return context$2$0.abrupt("return", context$2$0.sent);
      case 7:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$0, this);
  }));
};

// run multiple o-routines paralleltaneously
monocle.parallel = o_O(wrapGenerator.mark(function callee$0$0(oroutines) {
  var allDone, numCompleted, responses, allErrors, onOroutineComplete, mainError;

  return wrapGenerator(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
    case 0:
      allDone = callback(), numCompleted = 0, responses = [], allErrors = [];

      onOroutineComplete = function(index, err, res) {
        if (err) {
          allErrors.push(err);
        }
        responses[index] = res;
        numCompleted++;
        if (numCompleted === oroutines.length) {
          allDone();
        }
      };

      _.each(oroutines, function(oroutine, index) {
        var args;
        if (typeof oroutine === "function") {
          args = [];
        } else {
          args = oroutine.slice(1);
          oroutine = oroutine[0];
        }
        oroutine.apply(oroutine, args).add(function() {
          var arrayified = arrayifyResponse(arguments);
          onOroutineComplete(index, arrayified[0], arrayified[1]);
        });
      });
      context$1$0.next = 5;
      return allDone;
    case 5:
      if (!(allErrors.length > 0)) {
        context$1$0.next = 9;
        break;
      }

      mainError = new Error("One or more parallel o-routines failed to " +
          "complete successfully. Error objects available as this.allErrors");

      mainError.allErrors = allErrors;
      throw mainError;
    case 9:
      return context$1$0.abrupt("return", responses);
    case 10:
    case "end":
      return context$1$0.stop();
    }
  }, callee$0$0, this);
}));

// allow o-routines and generators to become node-style callback methods again
monocle.nodeify = function(obj) {
  if (obj.__is_monocle_oroutine || isGenerator(obj)) {
    return function () {
      var args = Array.prototype.slice.call(arguments, 0);
      if (args.length < 1) {
        throw new Error("Can't call a node-style method without a callback!");
      }
      var cb = args[args.length - 1];
      var mCb;
      args = args.slice(0, -1);
      if (obj.__is_monocle_oroutine) {
        mCb = obj.apply(null, args);
      } else {
        mCb = chain(undefined, obj.apply(null, args), callback());
      }
      mCb.add(cb);
    };
  } else {
    throw new Error("Cannot nodeify something that's not an o-routine or generator");
  }
};


// fashion
monocle.o_O = o_O;
monocle.o_0 = o_O;
monocle.o0 = o_O;
monocle.oO = o_O;
if (native) {
  monocle.o_P = monocle.chainable = monocle.o_p = monocle.p_o = o_P;
}
monocle.ll = monocle.parallel;
monocle.go = monocle.run;
monocle.m = monocle.monoclize;
monocle.o_M = monocle.monoclize;
monocle.no = monocle.nodeify;

// export callback for users
monocle.callback = monocle.oC = monocle.o_C = callback;

module.exports = monocle;
