/*global describe:true, it:true, before:true, after:true */
"use strict";

var _ = require('underscore');
var yiewd = require('../../lib/main.js')
  , Express = require('../server/express.js').Express
  , should = require('should')
  , baseUrl = 'http://127.0.0.1:8181/test/'
  , mo_Ocha = require("mo_ocha")
  , monocle = require("monocle-js")
  , o0 = monocle.o0
  , caps = { browserName: 'chrome' };

var origIt = GLOBAL.it;
mo_Ocha.rewrite();

describe('yiewd', function() {
  // handle running test server
  var server = new Express();
  var driver = null;
  var handles = [];
  before(function() {
    server.start();
  });

  after(wrapGenerator.mark(function callee$1$0() {
    return wrapGenerator(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        server.stop();

        if (!(driver !== null)) {
          context$2$0.next = 4;
          break;
        }

        context$2$0.next = 4;
        return driver.quit();
      case 4:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$0, this);
  }));

  it('should start a session', wrapGenerator.mark(function callee$1$1() {
    var d;

    return wrapGenerator(function callee$1$1$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        d = yiewd.remote();
        driver = d;
        context$2$0.next = 4;
        return driver.init(caps);
      case 4:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$1, this);
  }));

  it('should get session status', wrapGenerator.mark(function callee$1$2() {
    var status;

    return wrapGenerator(function callee$1$2$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        context$2$0.next = 2;
        return driver.status();
      case 2:
        status = context$2$0.sent;
        should.exist(status.build);
      case 4:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$2, this);
  }));

  it('should get list of sessions', wrapGenerator.mark(function callee$1$3() {
    var sessions;

    return wrapGenerator(function callee$1$3$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        context$2$0.next = 2;
        return driver.sessions();
      case 2:
        sessions = context$2$0.sent;
        sessions.length.should.be.above(0);
        should.exist(sessions[0].id);
      case 5:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$3, this);
  }));

  it('should get session caps', wrapGenerator.mark(function callee$1$4() {
    var sessionCaps;

    return wrapGenerator(function callee$1$4$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        context$2$0.next = 2;
        return driver.sessionCapabilities();
      case 2:
        sessionCaps = context$2$0.sent;
        should.exist(sessionCaps.browserName);
        sessionCaps.browserName.should.equal('chrome');
      case 5:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$4, this);
  }));

  it('should get a url, page title, and window handle', wrapGenerator.mark(function callee$1$5() {
    var testPage, title, handle;

    return wrapGenerator(function callee$1$5$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        testPage = baseUrl + 'guinea-pig.html';
        context$2$0.next = 3;
        return driver.get(testPage);
      case 3:
        context$2$0.next = 5;
        return driver.title();
      case 5:
        title = context$2$0.sent;
        title.should.equal("I am a page title");
        context$2$0.next = 9;
        return driver.windowHandle();
      case 9:
        handle = context$2$0.sent;
        handle.length.should.be.above(0);
        handles['window-1'] = handle;
      case 12:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$5, this);
  }));

  it('should open a new window', wrapGenerator.mark(function callee$1$6() {
    var newWindow;

    return wrapGenerator(function callee$1$6$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        newWindow = baseUrl + 'guinea-pig2.html';
        context$2$0.next = 3;
        return driver.newWindow(newWindow, 'window-2');
      case 3:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$6, this);
  }));

  it('should switch to a window', wrapGenerator.mark(function callee$1$7() {
    return wrapGenerator(function callee$1$7$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        context$2$0.next = 2;
        return driver.window("window-2");
      case 2:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$7, this);
  }));

  it('should get the window name', wrapGenerator.mark(function callee$1$8() {
    var name, handle;

    return wrapGenerator(function callee$1$8$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        context$2$0.next = 2;
        return driver.windowName();
      case 2:
        name = context$2$0.sent;
        name.should.equal("window-2");
        context$2$0.next = 6;
        return driver.windowHandle();
      case 6:
        handle = context$2$0.sent;
        handle.length.should.be.above(0);
        handle.should.not.eql(handles['window-1']);
        handles['window-2'] = handle;
      case 10:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$8, this);
  }));

  it('should get window handles', wrapGenerator.mark(function callee$1$9() {
    var wdHandles;

    return wrapGenerator(function callee$1$9$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        context$2$0.next = 2;
        return driver.windowHandles();
      case 2:
        wdHandles = context$2$0.sent;
        _.each(handles, function(handle) {
          wdHandles.should.include(handle);
        });
      case 4:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$9, this);
  }));

  it('should handle wd errors', wrapGenerator.mark(function callee$1$10() {
    var err;

    return wrapGenerator(function callee$1$10$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        context$2$0.prev = 0;
        context$2$0.next = 3;
        return driver.alertText();
      case 3:
        context$2$0.next = 8;
        break;
      case 5:
        context$2$0.prev = 5;
        context$2$0.t0 = context$2$0.catch(0);
        err = context$2$0.t0;
      case 8:
        should.exist(err);
        err.message.should.include('27');
      case 10:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$10, this, [[0, 5]]);
  }));

  origIt('should handle wd errors asynchronously', function(done) {
    driver.run(wrapGenerator.mark(function callee$2$0() {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.prev = 0;
          context$3$0.next = 3;
          return this.alertText();
        case 3:
          context$3$0.next = 8;
          break;
        case 5:
          context$3$0.prev = 5;
          context$3$0.t1 = context$3$0.catch(0);
          throw context$3$0.t1;
        case 8:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this, [[0, 5]]);
    })).nodeify(function (err) {
      should.exist(err);
      err.message.should.include('27');
      done();
    });
  });

  it('should sleep', wrapGenerator.mark(function callee$1$11() {
    var begin, end;

    return wrapGenerator(function callee$1$11$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        begin = Date.now();
        context$2$0.next = 3;
        return driver.sleep(500);
      case 3:
        end = Date.now();
        (end - begin).should.be.above(499);
      case 5:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$11, this);
  }));

  it('should be able to compose methods', wrapGenerator.mark(function callee$1$12() {
    var title, start, myFunc, myFunc2;

    return wrapGenerator(function callee$1$12$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        title = '';
        start = Date.now();

        myFunc = o0(wrapGenerator.mark(function callee$2$0() {
          return wrapGenerator(function callee$2$0$(context$3$0) {
            while (1) switch (context$3$0.prev = context$3$0.next) {
            case 0:
              context$3$0.next = 2;
              return driver.title();
            case 2:
              title += context$3$0.sent;
              context$3$0.next = 5;
              return driver.sleep(250);
            case 5:
            case "end":
              return context$3$0.stop();
            }
          }, callee$2$0, this);
        }));

        myFunc2 = o0(wrapGenerator.mark(function callee$2$1() {
          return wrapGenerator(function callee$2$1$(context$3$0) {
            while (1) switch (context$3$0.prev = context$3$0.next) {
            case 0:
              title += ' foo ';
            case 1:
            case "end":
              return context$3$0.stop();
            }
          }, callee$2$1, this);
        }));

        context$2$0.next = 6;
        return myFunc();
      case 6:
        context$2$0.next = 8;
        return myFunc2();
      case 8:
        context$2$0.next = 10;
        return myFunc();
      case 10:
        (Date.now() - start).should.be.above(499);
      case 11:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$12, this);
  }));

  origIt('driver.run should bind methods to `this`', function(done) {
    driver.run(wrapGenerator.mark(function callee$2$0() {
      var title;

      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return this.title();
        case 2:
          title = context$3$0.sent;
          title.should.equal('I am another page title');
          done();
        case 5:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));
  });

  it('should stop a session', wrapGenerator.mark(function callee$1$13() {
    return wrapGenerator(function callee$1$13$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        context$2$0.next = 2;
        return driver.quit();
      case 2:
        driver = null;
      case 3:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$13, this);
  }));

  it('should work passing in host and port', wrapGenerator.mark(function callee$1$14() {
    var d;

    return wrapGenerator(function callee$1$14$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        d = yiewd.remote('localhost', 4444);
        context$2$0.next = 3;
        return d.init(caps);
      case 3:
        context$2$0.next = 5;
        return d.quit();
      case 5:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$14, this);
  }));

});
