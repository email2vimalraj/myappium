/*global describe:true, it:true, before:true */
"use strict";

var yiewd = require('../../lib/main.js')
  , should = require('should')
  , baseUrl = 'http://saucelabs.com/test/guinea-pig/'
  , userName = process.env.SAUCE_USERNAME
  , accessKey = process.env.SAUCE_ACCESS_KEY
  , mo_Ocha = require("mo_ocha")
  , caps = {
      platform: 'Linux'
      , browserName: 'chrome'
      , name: 'Yiewd test'
    };

require('colors');
mo_Ocha.rewrite();

describe('yiewd sauce support', function() {

  it('should only work for sauce tests', wrapGenerator.mark(function callee$1$0() {
    var driver, err;

    return wrapGenerator(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
      case 0:
        driver = yiewd.remote();
        context$2$0.next = 3;
        return driver.init({browserName: 'chrome'});
      case 3:
        err = null;
        context$2$0.prev = 4;
        context$2$0.next = 7;
        return driver.reportPass();
      case 7:
        context$2$0.next = 12;
        break;
      case 9:
        context$2$0.prev = 9;
        context$2$0.t0 = context$2$0.catch(4);
        err = context$2$0.t0;
      case 12:
        context$2$0.next = 14;
        return driver.quit();
      case 14:
        should.exist(err);
        should.exist(err.message);
      case 16:
      case "end":
        return context$2$0.stop();
      }
    }, callee$1$0, this, [[4, 9]]);
  }));

  describe('on sauce', function() {
    var driver;

    before(function() {
      driver = yiewd.sauce(userName, accessKey);
      driver.on('status', function(info) {
        console.log(info.cyan);
      });
      driver.on('command', function(meth, path, data) {
        console.log(' > ' + meth.yellow, path.grey, data || '');
      });
    });

    it('should run a job on sauce', wrapGenerator.mark(function callee$2$0() {
      return wrapGenerator(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return driver.init(caps);
        case 2:
          context$3$0.next = 4;
          return driver.get(baseUrl);
        case 4:
          context$3$0.next = 6;
          return driver.title();
        case 6:
          context$3$0.sent.should.include("I am a page title");
          context$3$0.next = 9;
          return driver.quit();
        case 9:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$0, this);
    }));

    it('should set passed status', wrapGenerator.mark(function callee$2$1() {
      var jobInfo;

      return wrapGenerator(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return driver.init(caps);
        case 2:
          context$3$0.next = 4;
          return driver.get(baseUrl);
        case 4:
          context$3$0.next = 6;
          return driver.title();
        case 6:
          context$3$0.sent.should.include("I am a page title");
          context$3$0.next = 9;
          return driver.reportPass();
        case 9:
          context$3$0.next = 11;
          return driver.quit();
        case 11:
          context$3$0.next = 13;
          return driver.sauceInfo();
        case 13:
          jobInfo = context$3$0.sent;
          jobInfo.passed.should.equal(true);
        case 15:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$1, this);
    }));

    it('should set failed status', wrapGenerator.mark(function callee$2$2() {
      var jobInfo;

      return wrapGenerator(function callee$2$2$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
        case 0:
          context$3$0.next = 2;
          return driver.init(caps);
        case 2:
          context$3$0.next = 4;
          return driver.get(baseUrl);
        case 4:
          context$3$0.next = 6;
          return driver.title();
        case 6:
          context$3$0.sent.should.include("I am a page title");
          context$3$0.next = 9;
          return driver.reportFail();
        case 9:
          context$3$0.next = 11;
          return driver.quit();
        case 11:
          context$3$0.next = 13;
          return driver.sauceInfo();
        case 13:
          jobInfo = context$3$0.sent;
          jobInfo.passed.should.equal(false);
        case 15:
        case "end":
          return context$3$0.stop();
        }
      }, callee$2$2, this);
    }));
  });

});

