'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

var _npmlog = require('npmlog');

var _npmlog2 = _interopRequireDefault(_npmlog);

var _appiumSupport = require('appium-support');

var _appiumSupport2 = _interopRequireDefault(_appiumSupport);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _denodeify = require('denodeify');

var _denodeify2 = _interopRequireDefault(_denodeify);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _asyncbox = require('asyncbox');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _plist = require('plist');

var _plist2 = _interopRequireDefault(_plist);

var exec = _appiumSupport2['default'].core.exec;
var util = _appiumSupport2['default'].util;
var fileExists = _appiumSupport2['default'].util.fileExists;
var escapeSpace = _appiumSupport2['default'].util.escapeSpace;
var readSymlink = (0, _denodeify2['default'])(_fs2['default'].readlink);
var env = process.env;

var XCODE_SELECT_TIMEOUT = 3000;
var XCODE_SUBDIR = '/Contents/Developer';
var DEFAULT_NUMBER_OF_RETRIES = 3;

var log = process.env.GLOBAL_NPMLOG ? global.log : _npmlog2['default'];

function hasExpectedSubDir(path) {
  return path.substring(path.length - XCODE_SUBDIR.length) === XCODE_SUBDIR;
}

function getPathFromSymlink(failMessage) {
  var symlinkPath, legacySymlinkPath, xcodePath, customPath, mesg, msg;
  return _regeneratorRuntime.async(function getPathFromSymlink$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // Node's invocation of xcode-select sometimes flakes and returns an empty string.
        // Not clear why. As a workaround, Appium can reliably deduce the version in use by checking
        // the locations xcode-select uses to store the selected version's path. This should be 100%
        // reliable so long as the link locations remain the same. However, since we're relying on
        // hardcoded paths, this approach will break the next time Apple changes the symlink location.
        log.warn('Finding XcodePath by symlink because ' + failMessage);

        symlinkPath = '/var/db/xcode_select_link';
        legacySymlinkPath = '/usr/share/xcode-select/xcode_dir_link';
        xcodePath = null;

        if (!util.hasContent(env.DEVELOPER_DIR)) {
          context$1$0.next = 17;
          break;
        }

        customPath = hasExpectedSubDir(env.DEVELOPER_DIR) ? env.DEVELOPER_DIR : env.DEVELOPER_DIR + XCODE_SUBDIR;
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(fileExists(customPath));

      case 8:
        if (!context$1$0.sent) {
          context$1$0.next = 12;
          break;
        }

        xcodePath = customPath;
        context$1$0.next = 15;
        break;

      case 12:
        mesg = 'Could not find path to Xcode, environment variable ' + ('DEVELOPER_DIR set to: ' + env.DEVELOPER_DIR + ' ') + 'but no Xcode found';

        log.warn(mesg);
        throw new Error(mesg);

      case 15:
        context$1$0.next = 27;
        break;

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(fileExists(symlinkPath));

      case 19:
        if (!context$1$0.sent) {
          context$1$0.next = 23;
          break;
        }

        xcodePath = readSymlink(symlinkPath);
        context$1$0.next = 27;
        break;

      case 23:
        context$1$0.next = 25;
        return _regeneratorRuntime.awrap(fileExists(legacySymlinkPath));

      case 25:
        if (!context$1$0.sent) {
          context$1$0.next = 27;
          break;
        }

        xcodePath = readSymlink(legacySymlinkPath);

      case 27:
        if (!xcodePath) {
          context$1$0.next = 29;
          break;
        }

        return context$1$0.abrupt('return', xcodePath.replace(new RegExp('/$'), '').trim());

      case 29:
        msg = 'Could not find path to Xcode by symlinks located in ' + symlinkPath + ', or ' + legacySymlinkPath;

        log.warn(msg);
        throw new Error(msg);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getPathFromXcodeSelect() {
  var _ref, _ref2, stdout, xcodeFolderPath, msg;

  return _regeneratorRuntime.async(function getPathFromXcodeSelect$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(exec('xcode-select --print-path', { maxBuffer: 524288, timeout: XCODE_SELECT_TIMEOUT }));

      case 2:
        _ref = context$1$0.sent;
        _ref2 = _slicedToArray(_ref, 1);
        stdout = _ref2[0];
        xcodeFolderPath = stdout.replace(new RegExp('/$'), '').trim();

        if (util.hasContent(xcodeFolderPath)) {
          context$1$0.next = 8;
          break;
        }

        throw new Error('xcode-select returned an empty string');

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(fileExists(xcodeFolderPath));

      case 10:
        if (!context$1$0.sent) {
          context$1$0.next = 14;
          break;
        }

        return context$1$0.abrupt('return', xcodeFolderPath);

      case 14:
        msg = 'xcode-select could not find xcode. Path: ' + xcodeFolderPath + ' does not exist.';

        log.error(msg);
        throw new Error(msg);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

var getPath = _lodash2['default'].memoize(function () {

  // first we try using xcode-select to find the path
  // then we try using the symlinks that Apple has by default

  return getPathFromXcodeSelect()['catch'](getPathFromSymlink);
});

function getVersionWithoutRetry() {
  var xcodePath, plistPath, cmd, _ref3, _ref32, stdout, versionPattern, match;

  return _regeneratorRuntime.async(function getVersionWithoutRetry$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getPath());

      case 2:
        xcodePath = context$1$0.sent;
        plistPath = _path2['default'].resolve(xcodePath, '..', 'Info.plist');
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(fileExists(plistPath));

      case 6:
        if (context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        throw new Error('Could not get Xcode version. ' + plistPath + ' does not exist on disk.');

      case 8:
        cmd = '/usr/libexec/PlistBuddy -c \'Print CFBundleShortVersionString\' ' + escapeSpace(plistPath);
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(exec(cmd, { maxBuffer: 524288, timeout: XCODE_SELECT_TIMEOUT }));

      case 11:
        _ref3 = context$1$0.sent;
        _ref32 = _slicedToArray(_ref3, 1);
        stdout = _ref32[0];
        versionPattern = /\d\.\d\.*\d*/;
        match = stdout.match(versionPattern);

        if (!(match === null || !util.hasContent(match[0]))) {
          context$1$0.next = 18;
          break;
        }

        throw new Error('Could not parse Xcode version. xcodebuild output was: ' + stdout);

      case 18:
        return context$1$0.abrupt('return', match[0]);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

var getVersion = _lodash2['default'].memoize(function () {
  var retries = arguments[0] === undefined ? DEFAULT_NUMBER_OF_RETRIES : arguments[0];

  return (0, _asyncbox.retry)(retries, getVersionWithoutRetry);
});

function getAutomationTraceTemplatePathWithoutRetry() {
  var xcodePath, extensions, pathPrefix, pathSuffix, automationTraceTemplatePaths, msg;
  return _regeneratorRuntime.async(function getAutomationTraceTemplatePathWithoutRetry$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getPath());

      case 2:
        xcodePath = context$1$0.sent;
        extensions = ['xrplugin', 'bundle'];
        pathPrefix = _path2['default'].resolve(xcodePath, '../Applications/Instruments.app/Contents/PlugIns');
        pathSuffix = 'Contents/Resources/Automation.tracetemplate';
        automationTraceTemplatePaths = [_path2['default'].resolve(pathPrefix, 'AutomationInstrument.' + extensions[0], pathSuffix), _path2['default'].resolve(pathPrefix, 'AutomationInstrument.' + extensions[1], pathSuffix)];
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(fileExists(automationTraceTemplatePaths[0]));

      case 9:
        if (!context$1$0.sent) {
          context$1$0.next = 11;
          break;
        }

        return context$1$0.abrupt('return', automationTraceTemplatePaths[0]);

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(fileExists(automationTraceTemplatePaths[1]));

      case 13:
        if (!context$1$0.sent) {
          context$1$0.next = 15;
          break;
        }

        return context$1$0.abrupt('return', automationTraceTemplatePaths[1]);

      case 15:
        msg = 'Could not find Automation.tracetemplate in any of the following' + ('locations ' + automationTraceTemplatePaths.toString());

        log.error(msg);
        throw new Error(msg);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

var getAutomationTraceTemplatePath = _lodash2['default'].memoize(function () {
  var retries = arguments[0] === undefined ? DEFAULT_NUMBER_OF_RETRIES : arguments[0];

  return (0, _asyncbox.retry)(retries, getAutomationTraceTemplatePathWithoutRetry);
});

function getMaxIOSSDKWithoutRetry() {
  var version, cmd, _ref4, _ref42, stdout, sdkVersion, match;

  return _regeneratorRuntime.async(function getMaxIOSSDKWithoutRetry$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getVersion());

      case 2:
        version = context$1$0.sent;

        if (!(version[0] === '4')) {
          context$1$0.next = 5;
          break;
        }

        return context$1$0.abrupt('return', '6.1');

      case 5:
        cmd = 'xcrun --sdk iphonesimulator --show-sdk-version';
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(exec(cmd, { maxBuffer: 524288, timeout: XCODE_SELECT_TIMEOUT }));

      case 8:
        _ref4 = context$1$0.sent;
        _ref42 = _slicedToArray(_ref4, 1);
        stdout = _ref42[0];
        sdkVersion = stdout.trim();
        match = /\d.\d/.exec(stdout);

        if (match) {
          context$1$0.next = 15;
          break;
        }

        throw new Error('xcrun returned a non-numeric iOS SDK version: ' + sdkVersion);

      case 15:
        return context$1$0.abrupt('return', sdkVersion);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

var getMaxIOSSDK = _lodash2['default'].memoize(function () {
  var retries = arguments[0] === undefined ? DEFAULT_NUMBER_OF_RETRIES : arguments[0];

  return (0, _asyncbox.retry)(retries, getMaxIOSSDKWithoutRetry);
});

function getConnectedDevices() {
  var _ref5, _ref52, stdout, plistContent, devicesFound, entriesToSearch, currentEntry, deviceInfo;

  return _regeneratorRuntime.async(function getConnectedDevices$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(exec('/usr/sbin/system_profiler -xml SPUSBDataType', { maxBuffer: 524288, timeout: XCODE_SELECT_TIMEOUT }));

      case 2:
        _ref5 = context$1$0.sent;
        _ref52 = _slicedToArray(_ref5, 1);
        stdout = _ref52[0];
        plistContent = _plist2['default'].parse(stdout);
        devicesFound = [];
        entriesToSearch = [plistContent[0]];

        while (entriesToSearch.length > 0) {
          currentEntry = entriesToSearch.pop();

          if (currentEntry instanceof Array) {
            entriesToSearch = entriesToSearch.concat(currentEntry);
          } else if (currentEntry._name && currentEntry._name.substring(0, 4) === 'iPad' || currentEntry._name && currentEntry._name.substring(0, 6) === 'iPhone') {
            deviceInfo = {
              name: currentEntry._name,
              udid: currentEntry.serial_num,
              productId: currentEntry.product_id,
              deviceVersion: currentEntry.bcd_device
            };

            devicesFound.push(deviceInfo);
          } else if (currentEntry._items) {
            entriesToSearch = entriesToSearch.concat(currentEntry._items);
          }
        }
        return context$1$0.abrupt('return', devicesFound);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function clearInternalCache() {

  // memoized functions
  var memoized = [getPath, getVersion, getAutomationTraceTemplatePath, getMaxIOSSDK];

  memoized.forEach(function (f) {
    if (f.cache) {
      f.cache = new _lodash2['default'].memoize.Cache();
    }
  });
}

exports.getPath = getPath;
exports.getVersion = getVersion;
exports.getAutomationTraceTemplatePath = getAutomationTraceTemplatePath;
exports.getMaxIOSSDK = getMaxIOSSDK;
exports.getAutomationTraceTemplatePathWithoutRetry = getAutomationTraceTemplatePathWithoutRetry;
exports.getMaxIOSSDKWithoutRetry = getMaxIOSSDKWithoutRetry;
exports.getConnectedDevices = getConnectedDevices;
exports.clearInternalCache = clearInternalCache;
//  Xcode < 5.x

// xcode-select allows users to override its settings with the DEVELOPER_DIR env var,
// so check that first

// We should only get here is we failed to capture xcode-select's stdout and our
// other checks failed. Either Apple has moved the symlink to a new location or the user
// is not using the default install. 99.999% chance it's the latter, so issue a warning
// should we ever hit the edge case.

// trim and remove trailing slash

// we want to read the CFBundleShortVersionString from Xcode's plist.
// It should be in /[root]/XCode.app/Contents/

// need to use string#match here; previous code used regexp#exec, which does not return null

// for ios 8 and up, the file extension for AutiomationInstrument changed.
// rather than waste time getting the iOSSDKVersion, just get both paths and see which one exists
//# sourceMappingURL=data:application/json;base64,