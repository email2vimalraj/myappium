'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _libXcode = require('../lib/xcode');

var xcode = _interopRequireWildcard(_libXcode);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

require('mochawait');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _denodeify = require('denodeify');

var _denodeify2 = _interopRequireDefault(_denodeify);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

require('source-map-support').install();

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var fileExists = (0, _denodeify2['default'])(_fs2['default'].stat);

describe('xcode @skip-linux', function () {

  it('should get the path to xcode executable', function callee$1$0() {
    var path;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(xcode.getPath());

        case 2:
          path = context$2$0.sent;

          should.exist(path);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(fileExists(path));

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should get the version of xcode', function callee$1$0() {
    var version;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(xcode.getVersion());

        case 2:
          version = context$2$0.sent;

          should.exist(version);
          _lodash2['default'].isString(version).should.be['true'];
          /\d\.\d\.*\d*/.test(version).should.be['true'];

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should get the path and version again, these values are cached', function callee$1$0() {
    var before, path, after, version;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(xcode.getPath());

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(xcode.getVersion());

        case 4:
          before = new Date();
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(xcode.getPath());

        case 7:
          path = context$2$0.sent;
          after = new Date();

          should.exist(path);
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(fileExists(path));

        case 12:
          (after - before).should.be.at.most(2);

          before = new Date();
          context$2$0.next = 16;
          return _regeneratorRuntime.awrap(xcode.getVersion());

        case 16:
          version = context$2$0.sent;

          after = new Date();

          should.exist(version);
          _lodash2['default'].isString(version).should.be['true'];
          /\d\.\d\.*\d*/.test(version).should.be['true'];
          (after - before).should.be.at.most(2);

        case 22:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should clear the cache if asked to', function callee$1$0() {
    var before, after;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:

          xcode.clearInternalCache();

          before = new Date();
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(xcode.getPath());

        case 4:
          after = new Date();

          (after - before).should.be.at.least(7);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should find the automation trace template', function callee$1$0() {
    var path, suffix;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(xcode.getAutomationTraceTemplatePath());

        case 2:
          path = context$2$0.sent;

          should.exist(path);
          fileExists(path).should.eventually.be['true'];
          suffix = '.tracetemplate';

          path.slice(-suffix.length).should.equal(suffix);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get max iOS SDK version', function callee$1$0() {
    var version;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(xcode.getMaxIOSSDK());

        case 2:
          version = context$2$0.sent;

          should.exist(version);
          (typeof version).should.equal('string');
          (parseFloat(version) - 6.1).should.be.at.least(0);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get a list of iOS devices', function callee$1$0() {
    var devices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(xcode.getConnectedDevices());

        case 2:
          devices = context$2$0.sent;

          should.exist(devices);
          (typeof devices).should.equal('object');

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QveGNvZGUtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozt3QkFFdUIsY0FBYzs7SUFBekIsS0FBSzs7b0JBQ0EsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7UUFDdEMsV0FBVzs7a0JBQ0gsSUFBSTs7Ozt5QkFDRyxXQUFXOzs7O3NCQUNuQixRQUFROzs7O0FBUnRCLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDOztBQVV4QyxJQUFJLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUMzQixrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixJQUFJLFVBQVUsR0FBRyw0QkFBVSxnQkFBRyxJQUFJLENBQUMsQ0FBQzs7QUFFcEMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLFlBQU07O0FBRWxDLElBQUUsQ0FBQyx5Q0FBeUMsRUFBRTtRQUV4QyxJQUFJOzs7OzsyQ0FBUyxLQUFLLENBQUMsT0FBTyxFQUFFOzs7QUFBNUIsY0FBSTs7QUFDUixnQkFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzs7MkNBQ2IsVUFBVSxDQUFDLElBQUksQ0FBQzs7Ozs7OztHQUV2QixDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLGlDQUFpQyxFQUFFO1FBRWhDLE9BQU87Ozs7OzJDQUFTLEtBQUssQ0FBQyxVQUFVLEVBQUU7OztBQUFsQyxpQkFBTzs7QUFDWCxnQkFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0Qiw4QkFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsUUFBSyxDQUFDO0FBQ25DLHdCQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQUssQ0FBQzs7Ozs7OztHQUM3QyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLGdFQUFnRSxFQUFFO1FBSy9ELE1BQU0sRUFDTixJQUFJLEVBQ0osS0FB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QUMsT0FBTyxDQUFDLENBQUM7QUFDdEIsV0FBQyxPQUFPLE9BQU8sQ0FBQSxDQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7Ozs7Ozs7R0FDekMsQ0FBQyxDQUFDO0NBRUosQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QveGNvZGUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQnKS5pbnN0YWxsKCk7XG5cbmltcG9ydCAqIGFzIHhjb2RlIGZyb20gJy4uL2xpYi94Y29kZSc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCAnbW9jaGF3YWl0JztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgZGVub2RlaWZ5IGZyb20gJ2Rlbm9kZWlmeSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5sZXQgc2hvdWxkID0gY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxubGV0IGZpbGVFeGlzdHMgPSBkZW5vZGVpZnkoZnMuc3RhdCk7XG5cbmRlc2NyaWJlKCd4Y29kZSBAc2tpcC1saW51eCcsICgpID0+IHtcblxuICBpdCgnc2hvdWxkIGdldCB0aGUgcGF0aCB0byB4Y29kZSBleGVjdXRhYmxlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuXG4gICAgbGV0IHBhdGggPSBhd2FpdCB4Y29kZS5nZXRQYXRoKCk7XG4gICAgc2hvdWxkLmV4aXN0KHBhdGgpO1xuICAgIGF3YWl0IGZpbGVFeGlzdHMocGF0aCk7XG5cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgdGhlIHZlcnNpb24gb2YgeGNvZGUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG5cbiAgICBsZXQgdmVyc2lvbiA9IGF3YWl0IHhjb2RlLmdldFZlcnNpb24oKTtcbiAgICBzaG91bGQuZXhpc3QodmVyc2lvbik7XG4gICAgXy5pc1N0cmluZyh2ZXJzaW9uKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAvXFxkXFwuXFxkXFwuKlxcZCovLnRlc3QodmVyc2lvbikuc2hvdWxkLmJlLnRydWU7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IHRoZSBwYXRoIGFuZCB2ZXJzaW9uIGFnYWluLCB0aGVzZSB2YWx1ZXMgYXJlIGNhY2hlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICAgIGF3YWl0IHhjb2RlLmdldFBhdGgoKTtcbiAgICBhd2FpdCB4Y29kZS5nZXRWZXJzaW9uKCk7XG5cbiAgICBsZXQgYmVmb3JlID0gbmV3IERhdGUoKTtcbiAgICBsZXQgcGF0aCA9IGF3YWl0IHhjb2RlLmdldFBhdGgoKTtcbiAgICBsZXQgYWZ0ZXIgPSBuZXcgRGF0ZSgpO1xuXG4gICAgc2hvdWxkLmV4aXN0KHBhdGgpO1xuICAgIGF3YWl0IGZpbGVFeGlzdHMocGF0aCk7XG4gICAgKGFmdGVyLWJlZm9yZSkuc2hvdWxkLmJlLmF0Lm1vc3QoMik7XG5cbiAgICBiZWZvcmUgPSBuZXcgRGF0ZSgpO1xuICAgIGxldCB2ZXJzaW9uID0gYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbigpO1xuICAgIGFmdGVyID0gbmV3IERhdGUoKTtcblxuICAgIHNob3VsZC5leGlzdCh2ZXJzaW9uKTtcbiAgICBfLmlzU3RyaW5nKHZlcnNpb24pLnNob3VsZC5iZS50cnVlO1xuICAgIC9cXGRcXC5cXGRcXC4qXFxkKi8udGVzdCh2ZXJzaW9uKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAoYWZ0ZXItYmVmb3JlKS5zaG91bGQuYmUuYXQubW9zdCgyKTtcblxuICB9KTtcblxuICBpdCgnc2hvdWxkIGNsZWFyIHRoZSBjYWNoZSBpZiBhc2tlZCB0bycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcblxuICAgIHhjb2RlLmNsZWFySW50ZXJuYWxDYWNoZSgpO1xuXG4gICAgbGV0IGJlZm9yZSA9IG5ldyBEYXRlKCk7XG4gICAgYXdhaXQgeGNvZGUuZ2V0UGF0aCgpO1xuICAgIGxldCBhZnRlciA9IG5ldyBEYXRlKCk7XG4gICAgKGFmdGVyLWJlZm9yZSkuc2hvdWxkLmJlLmF0LmxlYXN0KDcpO1xuXG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZmluZCB0aGUgYXV0b21hdGlvbiB0cmFjZSB0ZW1wbGF0ZScsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgcGF0aCA9IGF3YWl0IHhjb2RlLmdldEF1dG9tYXRpb25UcmFjZVRlbXBsYXRlUGF0aCgpO1xuXG4gICAgc2hvdWxkLmV4aXN0KHBhdGgpO1xuICAgIGZpbGVFeGlzdHMocGF0aCkuc2hvdWxkLmV2ZW50dWFsbHkuYmUudHJ1ZTtcbiAgICBsZXQgc3VmZml4ID0gXCIudHJhY2V0ZW1wbGF0ZVwiO1xuICAgIHBhdGguc2xpY2UoLXN1ZmZpeC5sZW5ndGgpLnNob3VsZC5lcXVhbChzdWZmaXgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCBtYXggaU9TIFNESyB2ZXJzaW9uJywgYXN5bmMoKSA9PiB7XG4gICAgbGV0IHZlcnNpb24gPSBhd2FpdCB4Y29kZS5nZXRNYXhJT1NTREsoKTtcblxuICAgIHNob3VsZC5leGlzdCh2ZXJzaW9uKTtcbiAgICAodHlwZW9mIHZlcnNpb24pLnNob3VsZC5lcXVhbCgnc3RyaW5nJyk7XG4gICAgKHBhcnNlRmxvYXQodmVyc2lvbiktNi4xKS5zaG91bGQuYmUuYXQubGVhc3QoMCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IGEgbGlzdCBvZiBpT1MgZGV2aWNlcycsIGFzeW5jKCkgPT4ge1xuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgeGNvZGUuZ2V0Q29ubmVjdGVkRGV2aWNlcygpO1xuICAgIHNob3VsZC5leGlzdChkZXZpY2VzKTtcbiAgICAodHlwZW9mIGRldmljZXMpLnNob3VsZC5lcXVhbCgnb2JqZWN0Jyk7XG4gIH0pO1xuXG59KTtcbiJdfQ==