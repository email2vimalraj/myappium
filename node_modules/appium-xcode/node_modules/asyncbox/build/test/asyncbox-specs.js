require('source-map-support').install();

/* global describe:true, it:true */
'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

require('mochawait');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libAsyncbox = require('../lib/asyncbox');

var regIt = it;

_chai2['default'].use(_chaiAsPromised2['default']);
var should = _chai2['default'].should();

describe('sleep', function () {
  it('should work like setTimeout', function callee$1$0() {
    var now;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          now = Date.now();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(20));

        case 3:
          (Date.now() - now).should.be.above(19);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

describe('retry', function () {
  var okFnCalls = 0;
  var okFn = function okFn(val1, val2) {
    return _regeneratorRuntime.async(function okFn$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(15));

        case 2:
          okFnCalls++;
          return context$2$0.abrupt('return', val1 * val2);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  };
  var badFnCalls = 0;
  var badFn = function badFn() {
    return _regeneratorRuntime.async(function badFn$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(15));

        case 2:
          badFnCalls++;
          throw new Error("bad");

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  };
  var eventuallyOkFnCalls = 0;
  var eventuallyOkFn = function eventuallyOkFn(times) {
    return _regeneratorRuntime.async(function eventuallyOkFn$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(15));

        case 2:
          eventuallyOkFnCalls++;

          if (!(eventuallyOkFnCalls < times)) {
            context$2$0.next = 5;
            break;
          }

          throw new Error("not ok yet");

        case 5:
          return context$2$0.abrupt('return', times * times);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  };
  var eventuallyOkNoSleepFn = function eventuallyOkNoSleepFn(times) {
    return _regeneratorRuntime.async(function eventuallyOkNoSleepFn$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          eventuallyOkFnCalls++;

          if (!(eventuallyOkFnCalls < times)) {
            context$2$0.next = 3;
            break;
          }

          throw new Error("not ok yet");

        case 3:
          return context$2$0.abrupt('return', times * times);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  };
  it('should return the result of a passing function', function callee$1$0() {
    var start, res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.retry)(3, okFn, 5, 4));

        case 3:
          res = context$2$0.sent;

          res.should.equal(20);
          (Date.now() - start).should.be.above(14);
          okFnCalls.should.equal(1);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should retry a failing function and eventually throw the same err', function callee$1$0() {
    var err, start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          err = null;
          start = Date.now();
          context$2$0.prev = 2;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.retry)(3, badFn));

        case 5:
          context$2$0.next = 10;
          break;

        case 7:
          context$2$0.prev = 7;
          context$2$0.t0 = context$2$0['catch'](2);

          err = context$2$0.t0;

        case 10:
          should.exist(err);
          err.message.should.equal('bad');
          badFnCalls.should.equal(3);
          (Date.now() - start).should.be.above(44);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[2, 7]]);
  });
  it('should return the correct value with a function that eventually passes', function callee$1$0() {
    var err, start, res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          err = null;
          start = Date.now();
          context$2$0.prev = 2;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.retry)(3, eventuallyOkFn, 4));

        case 5:
          context$2$0.next = 10;
          break;

        case 7:
          context$2$0.prev = 7;
          context$2$0.t0 = context$2$0['catch'](2);

          err = context$2$0.t0;

        case 10:
          should.exist(err);
          err.message.should.equal('not ok yet');
          eventuallyOkFnCalls.should.equal(3);
          (Date.now() - start).should.be.above(35);

          // rerun with ok number of calls
          start = Date.now();
          eventuallyOkFnCalls = 0;
          context$2$0.next = 18;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.retry)(3, eventuallyOkFn, 3));

        case 18:
          res = context$2$0.sent;

          eventuallyOkFnCalls.should.equal(3);
          res.should.equal(9);
          (Date.now() - start).should.be.above(35);

        case 22:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[2, 7]]);
  });
  it('in sleep mode, should return the correct value with a function that eventually passes', function callee$1$0() {
    var err, start, res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          eventuallyOkFnCalls = 0;
          err = null;
          start = Date.now();
          context$2$0.prev = 3;
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.retryInterval)(3, 15, eventuallyOkNoSleepFn, 4));

        case 6:
          context$2$0.next = 11;
          break;

        case 8:
          context$2$0.prev = 8;
          context$2$0.t0 = context$2$0['catch'](3);

          err = context$2$0.t0;

        case 11:
          should.exist(err);
          err.message.should.equal('not ok yet');
          eventuallyOkFnCalls.should.equal(3);
          (Date.now() - start).should.be.above(30);

          // rerun with ok number of calls
          start = Date.now();
          eventuallyOkFnCalls = 0;
          context$2$0.next = 19;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.retryInterval)(3, 15, eventuallyOkNoSleepFn, 3));

        case 19:
          res = context$2$0.sent;

          eventuallyOkFnCalls.should.equal(3);
          res.should.equal(9);
          (Date.now() - start).should.be.above(30);

        case 23:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[3, 8]]);
  });
});

describe('nodeifyAll', function () {
  var asyncFn = function asyncFn(val) {
    return _regeneratorRuntime.async(function asyncFn$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(15));

        case 2:
          return context$2$0.abrupt('return', val);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  };
  var asyncFn2 = function asyncFn2(val) {
    return _regeneratorRuntime.async(function asyncFn2$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(15));

        case 2:
          return context$2$0.abrupt('return', [val, val + val]);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  };
  var badAsyncFn = function badAsyncFn() {
    return _regeneratorRuntime.async(function badAsyncFn$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(15));

        case 2:
          throw new Error('boo');

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  };
  var cbMap = (0, _libAsyncbox.nodeifyAll)({ asyncFn: asyncFn, asyncFn2: asyncFn2, badAsyncFn: badAsyncFn });
  regIt('should turn async functions into nodey things', function (done) {
    var start = Date.now();
    (0, _libAsyncbox.nodeify)(asyncFn('foo'), function (err, val, val2) {
      should.not.exist(err);
      should.not.exist(val2);
      val.should.equal('foo');
      (Date.now() - start).should.be.above(14);
      done();
    });
  });
  regIt('should turn async functions into nodey things via nodeifyAll', function (done) {
    var start = Date.now();
    cbMap.asyncFn('foo', function (err, val, val2) {
      should.not.exist(err);
      should.not.exist(val2);
      val.should.equal('foo');
      (Date.now() - start).should.be.above(14);
      done();
    });
  });
  regIt('should turn async functions into nodey things with mult params', function (done) {
    var start = Date.now();
    (0, _libAsyncbox.nodeify)(asyncFn2('foo'), function (err, val) {
      should.not.exist(err);
      val.should.eql(['foo', 'foofoo']);
      (Date.now() - start).should.be.above(14);
      done();
    });
  });
  regIt('should handle errors correctly', function (done) {
    var start = Date.now();
    (0, _libAsyncbox.nodeify)(badAsyncFn('foo'), function (err, val) {
      should.not.exist(val);
      err.message.should.equal('boo');
      (Date.now() - start).should.be.above(14);
      done();
    });
  });
});

//describe('nodeifyAll', () => {
//let asyncFn = async (val) => {
//await sleep(15);
//return val;
//};
//let asyncFn2 = async (val) => {
//await sleep(15);
//return [val, val + val];
//};
//let badAsyncFn = async () => {
//await sleep(15);
//throw new Error('boo');
//};
//});

describe('parallel', function () {
  var asyncFn = function asyncFn(val) {
    return _regeneratorRuntime.async(function asyncFn$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(50));

        case 2:
          return context$2$0.abrupt('return', val);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  };
  var badAsyncFn = function badAsyncFn() {
    return _regeneratorRuntime.async(function badAsyncFn$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(20));

        case 2:
          throw new Error("boo");

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  };
  it('should perform tasks in parallel and return results', function callee$1$0() {
    var vals, promises, start, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, v, res;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          vals = [1, 2, 3];
          promises = [];
          start = Date.now();
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          context$2$0.prev = 6;

          for (_iterator = _getIterator(vals); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            v = _step.value;

            promises.push(asyncFn(v));
          }
          context$2$0.next = 14;
          break;

        case 10:
          context$2$0.prev = 10;
          context$2$0.t0 = context$2$0['catch'](6);
          _didIteratorError = true;
          _iteratorError = context$2$0.t0;

        case 14:
          context$2$0.prev = 14;
          context$2$0.prev = 15;

          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }

        case 17:
          context$2$0.prev = 17;

          if (!_didIteratorError) {
            context$2$0.next = 20;
            break;
          }

          throw _iteratorError;

        case 20:
          return context$2$0.finish(17);

        case 21:
          return context$2$0.finish(14);

        case 22:
          context$2$0.next = 24;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.parallel)(promises));

        case 24:
          res = context$2$0.sent;

          (Date.now() - start).should.be.above(49);
          (Date.now() - start).should.be.below(59);
          res.sort().should.eql([1, 2, 3]);

        case 28:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[6, 10, 14, 22], [15,, 17, 21]]);
  });
  it('should error with first response', function callee$1$0() {
    var vals, promises, start, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, v, err, res;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          vals = [1, 2, 3];
          promises = [];
          start = Date.now();
          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          context$2$0.prev = 6;

          for (_iterator2 = _getIterator(vals); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            v = _step2.value;

            promises.push(asyncFn(v));
          }
          context$2$0.next = 14;
          break;

        case 10:
          context$2$0.prev = 10;
          context$2$0.t0 = context$2$0['catch'](6);
          _didIteratorError2 = true;
          _iteratorError2 = context$2$0.t0;

        case 14:
          context$2$0.prev = 14;
          context$2$0.prev = 15;

          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
            _iterator2['return']();
          }

        case 17:
          context$2$0.prev = 17;

          if (!_didIteratorError2) {
            context$2$0.next = 20;
            break;
          }

          throw _iteratorError2;

        case 20:
          return context$2$0.finish(17);

        case 21:
          return context$2$0.finish(14);

        case 22:
          promises.push(badAsyncFn());
          err = null;
          res = [];
          context$2$0.prev = 25;
          context$2$0.next = 28;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.parallel)(promises));

        case 28:
          res = context$2$0.sent;
          context$2$0.next = 34;
          break;

        case 31:
          context$2$0.prev = 31;
          context$2$0.t1 = context$2$0['catch'](25);

          err = context$2$0.t1;

        case 34:
          (Date.now() - start).should.be.above(19);
          (Date.now() - start).should.be.below(49);
          should.exist(err);
          res.should.eql([]);

        case 38:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[6, 10, 14, 22], [15,, 17, 21], [25, 31]]);
  });
  it('should not allow parallelizing bad types of things', function callee$1$0() {
    var err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          err = undefined;
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.parallel)('foo'));

        case 4:
          context$2$0.next = 9;
          break;

        case 6:
          context$2$0.prev = 6;
          context$2$0.t0 = context$2$0['catch'](1);

          err = context$2$0.t0;

        case 9:
          should.exist(err);
          context$2$0.prev = 10;
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.parallel)([1]));

        case 13:
          context$2$0.next = 18;
          break;

        case 15:
          context$2$0.prev = 15;
          context$2$0.t1 = context$2$0['catch'](10);

          err = context$2$0.t1;

        case 18:
          should.exist(err);

        case 19:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 6], [10, 15]]);
  });

  describe('waitForCondition', function () {
    it('should wait and succeed', function callee$2$0() {
      var ref, condFn, duration;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            condFn = function condFn() {
              return Date.now() - ref > 200;
            };

            ref = Date.now();
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _libAsyncbox.waitForCondition)(condFn, { waitMs: 1000, intervalMs: 10 }));

          case 4:
            duration = Date.now() - ref;

            duration.should.be.above(200);
            duration.should.be.below(250);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should wait and fail', function callee$2$0() {
      var ref, condFn;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            condFn = function condFn() {
              return Date.now() - ref > 200;
            };

            ref = Date.now();
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap((0, _libAsyncbox.waitForCondition)(condFn, { waitMs: 100, intervalMs: 10 }).should.be.rejectedWith(/Condition unmet/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});

describe('asyncmap', function () {
  var mapper = function mapper(el) {
    return _regeneratorRuntime.async(function mapper$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(10));

        case 2:
          return context$2$0.abrupt('return', el * 2);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };
  var coll = [1, 2, 3];
  it('should map elements one at a time', function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.asyncmap)(coll, mapper, false));

        case 3:
          context$2$0.t0 = [2, 4, 6];
          context$2$0.sent.should.eql(context$2$0.t0);

          (Date.now() - start).should.be.above(30);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should map elements in parallel', function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.asyncmap)(coll, mapper));

        case 3:
          context$2$0.t0 = [2, 4, 6];
          context$2$0.sent.should.eql(context$2$0.t0);

          (Date.now() - start).should.be.below(20);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should handle an empty array', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.asyncmap)([], mapper, false));

        case 2:
          context$2$0.t0 = [];
          context$2$0.sent.should.eql(context$2$0.t0);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should handle an empty array in parallel', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.asyncmap)([], mapper));

        case 2:
          context$2$0.t0 = [];
          context$2$0.sent.should.eql(context$2$0.t0);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

describe('asyncfilter', function () {
  var filter = function filter(el) {
    return _regeneratorRuntime.async(function filter$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.sleep)(5));

        case 2:
          return context$2$0.abrupt('return', el % 2 === 0);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };
  var coll = [1, 2, 3, 4, 5];
  it('should filter elements one at a time', function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.asyncfilter)(coll, filter, false));

        case 3:
          context$2$0.t0 = [2, 4];
          context$2$0.sent.should.eql(context$2$0.t0);

          (Date.now() - start).should.be.above(19);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should filter elements in parallel', function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.asyncfilter)(coll, filter));

        case 3:
          context$2$0.t0 = [2, 4];
          context$2$0.sent.should.eql(context$2$0.t0);

          (Date.now() - start).should.be.below(9);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should handle an empty array', function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.asyncfilter)([], filter, false));

        case 3:
          context$2$0.t0 = [];
          context$2$0.sent.should.eql(context$2$0.t0);

          (Date.now() - start).should.be.below(9);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should handle an empty array in parallel', function callee$1$0() {
    var start;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          start = Date.now();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libAsyncbox.asyncfilter)([], filter));

        case 3:
          context$2$0.t0 = [];
          context$2$0.sent.should.eql(context$2$0.t0);

          (Date.now() - start).should.be.below(9);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,