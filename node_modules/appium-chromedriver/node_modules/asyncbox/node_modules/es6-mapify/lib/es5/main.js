"use strict";
Object.defineProperties(exports, {
  mapify: {get: function() {
      return mapify;
    }},
  demapify: {get: function() {
      return demapify;
    }},
  objify: {get: function() {
      return objify;
    }},
  __esModule: {value: true}
});
function mapify(obj) {
  var m = new Map();
  if (typeof obj !== 'object' || obj === null) {
    return obj;
  }
  if (obj instanceof Array) {
    try {
      throw undefined;
    } catch (newArr) {
      {
        newArr = [];
        for (var $__0 = obj[Symbol.iterator](),
            $__1; !($__1 = $__0.next()).done; ) {
          try {
            throw undefined;
          } catch (x) {
            {
              x = $__1.value;
              {
                newArr.push(mapify(x));
              }
            }
          }
        }
        return newArr;
      }
    }
  }
  for (var $k in obj) {
    try {
      throw undefined;
    } catch (k) {
      {
        k = $k;
        if (obj.hasOwnProperty(k)) {
          m.set(k, mapify(obj[k]));
        }
      }
    }
  }
  ;
  return m;
}
function demapify(map) {
  if (map instanceof Array) {
    try {
      throw undefined;
    } catch (newArr) {
      {
        newArr = [];
        for (var $__0 = map[Symbol.iterator](),
            $__1; !($__1 = $__0.next()).done; ) {
          try {
            throw undefined;
          } catch (x) {
            {
              x = $__1.value;
              {
                newArr.push(demapify(x));
              }
            }
          }
        }
        return newArr;
      }
    }
  } else if (!(map instanceof Map)) {
    return map;
  }
  var obj = {};
  for (var $__2 = map[Symbol.iterator](),
      $__3; !($__3 = $__2.next()).done; ) {
    try {
      throw undefined;
    } catch (v) {
      try {
        throw undefined;
      } catch (k) {
        try {
          throw undefined;
        } catch ($__4) {
          {
            {
              $__4 = $__3.value;
              k = $__4[0];
              v = $__4[1];
            }
            {
              obj[k] = demapify(v);
            }
          }
        }
      }
    }
  }
  return obj;
}
;
var objify = demapify;
;
