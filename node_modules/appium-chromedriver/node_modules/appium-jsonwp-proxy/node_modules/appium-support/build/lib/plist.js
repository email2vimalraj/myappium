'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _plist = require('plist');

var _plist2 = _interopRequireDefault(_plist);

var _bplistCreator = require('bplist-creator');

var _bplistCreator2 = _interopRequireDefault(_bplistCreator);

var _bplistParser = require('bplist-parser');

var _bplistParser2 = _interopRequireDefault(_bplistParser);

var _fs = require('./fs');

var _fs2 = _interopRequireDefault(_fs);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var parseFile = _bluebird2['default'].promisify(_bplistParser2['default'].parseFile);

// XML Plist library helper
function parseXmlPlistFile(plistFilename) {
  var xmlContent;
  return _regeneratorRuntime.async(function parseXmlPlistFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_fs2['default'].readFile(plistFilename, 'utf8'));

      case 2:
        xmlContent = context$1$0.sent;
        return context$1$0.abrupt('return', _plist2['default'].parse(xmlContent));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function parsePlistFile(plist) {
  var obj;
  return _regeneratorRuntime.async(function parsePlistFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Attempting to parse plist file \'' + plist + '\'');
        obj = undefined;
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(parseFile(plist));

      case 5:
        obj = context$1$0.sent;
        context$1$0.next = 23;
        break;

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](2);

        _logger2['default'].debug('Could not parse plist file as binary');
        _logger2['default'].debug('Will try to parse the plist file as XML');
        context$1$0.prev = 12;
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(parseXmlPlistFile(plist));

      case 15:
        obj = context$1$0.sent;
        context$1$0.next = 21;
        break;

      case 18:
        context$1$0.prev = 18;
        context$1$0.t1 = context$1$0['catch'](12);

        _logger2['default'].errorAndThrow('Could not parse plist file as XML: ' + context$1$0.t1.message);

      case 21:
        _logger2['default'].debug('Parsed file as XML');
        return context$1$0.abrupt('return', obj);

      case 23:
        if (!obj.length) {
          context$1$0.next = 28;
          break;
        }

        _logger2['default'].debug('Parsed plist file as binary');
        return context$1$0.abrupt('return', obj[0]);

      case 28:
        throw new Error('Binary file ' + plist + ' appears to be empty');

      case 29:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 8], [12, 18]]);
}

function updatePlistFile(plist, updatedFields) {
  var binary = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
  var obj, newPlist;
  return _regeneratorRuntime.async(function updatePlistFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Attempting to update plist file\'' + plist + '\'');
        obj = undefined;
        context$1$0.prev = 2;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(parsePlistFile(plist));

      case 5:
        obj = context$1$0.sent;
        context$1$0.next = 11;
        break;

      case 8:
        context$1$0.prev = 8;
        context$1$0.t0 = context$1$0['catch'](2);

        _logger2['default'].errorAndThrow('Could not update plist: ' + context$1$0.t0.message);

      case 11:
        _lodash2['default'].extend(obj, updatedFields);
        newPlist = binary ? (0, _bplistCreator2['default'])(obj) : _plist2['default'].build(obj);
        context$1$0.prev = 13;
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(_fs2['default'].writeFile(plist, newPlist));

      case 16:
        context$1$0.next = 21;
        break;

      case 18:
        context$1$0.prev = 18;
        context$1$0.t1 = context$1$0['catch'](13);

        _logger2['default'].errorAndThrow('Could not save plist: ' + context$1$0.t1.message);

      case 21:
        _logger2['default'].debug('Wrote plist file \'' + plist + '\'');

      case 22:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 8], [13, 18]]);
}

exports.parsePlistFile = parsePlistFile;
exports.updatePlistFile = updatePlistFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wbGlzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O3FCQUFxQixPQUFPOzs7OzZCQUNILGdCQUFnQjs7Ozs0QkFDakIsZUFBZTs7OztrQkFDeEIsTUFBTTs7OztzQkFDTCxVQUFVOzs7O3NCQUNaLFFBQVE7Ozs7d0JBQ1IsVUFBVTs7OztBQUd4QixJQUFJLFNBQVMsR0FBRyxzQkFBRSxTQUFTLENBQUMsMEJBQVksU0FBUyxDQUFDLENBQUM7OztBQUduRCxTQUFlLGlCQUFpQixDQUFFLGFBQWE7TUFDekMsVUFBVTs7Ozs7eUNBQVMsZ0JBQUcsUUFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUM7OztBQUFyRCxrQkFBVTs0Q0FDTixtQkFBUyxLQUFLLENBQUMsVUFBVSxDQUFDOzs7Ozs7O0NBQ25DOztBQUVELFNBQWUsY0FBYyxDQUFFLEtBQUs7TUFFOUIsR0FBRzs7OztBQURQLDRCQUFJLEtBQUssdUNBQW9DLEtBQUssUUFBSSxDQUFDO0FBQ25ELFdBQUc7Ozt5Q0FFTyxTQUFTLENBQUMsS0FBSyxDQUFDOzs7QUFBNUIsV0FBRzs7Ozs7Ozs7QUFFSCw0QkFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUNsRCw0QkFBSSxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQzs7O3lDQUV2QyxpQkFBaUIsQ0FBQyxLQUFLLENBQUM7OztBQUFwQyxXQUFHOzs7Ozs7OztBQUVILDRCQUFJLGFBQWEseUNBQXVDLGVBQUksT0FBTyxDQUFHLENBQUM7OztBQUV6RSw0QkFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQzs0Q0FDekIsR0FBRzs7O2FBRVIsR0FBRyxDQUFDLE1BQU07Ozs7O0FBQ1osNEJBQUksS0FBSyxDQUFDLDZCQUE2QixDQUFDLENBQUM7NENBQ2xDLEdBQUcsQ0FBQyxDQUFDLENBQUM7OztjQUVQLElBQUksS0FBSyxrQkFBZ0IsS0FBSywwQkFBdUI7Ozs7Ozs7Q0FFOUQ7O0FBRUQsU0FBZSxlQUFlLENBQUUsS0FBSyxFQUFFLGFBQWE7TUFBRSxNQUFNLHlEQUFHLElBQUk7TUFFN0QsR0FBRyxFQU9ILFFBQVE7Ozs7QUFSWiw0QkFBSSxLQUFLLHVDQUFvQyxLQUFLLFFBQUksQ0FBQztBQUNuRCxXQUFHOzs7eUNBRU8sY0FBYyxDQUFDLEtBQUssQ0FBQzs7O0FBQWpDLFdBQUc7Ozs7Ozs7O0FBRUgsNEJBQUksYUFBYSw4QkFBNEIsZUFBSSxPQUFPLENBQUcsQ0FBQzs7O0FBRTlELDRCQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDekIsZ0JBQVEsR0FBRyxNQUFNLEdBQUcsZ0NBQWEsR0FBRyxDQUFDLEdBQUcsbUJBQVMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7O3lDQUV2RCxnQkFBRyxTQUFTLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQzs7Ozs7Ozs7OztBQUVuQyw0QkFBSSxhQUFhLDRCQUEwQixlQUFJLE9BQU8sQ0FBRyxDQUFDOzs7QUFFNUQsNEJBQUksS0FBSyx5QkFBc0IsS0FBSyxRQUFJLENBQUM7Ozs7Ozs7Q0FDMUM7O1FBRVEsY0FBYyxHQUFkLGNBQWM7UUFBRSxlQUFlLEdBQWYsZUFBZSIsImZpbGUiOiJsaWIvcGxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeG1scGxpc3QgZnJvbSAncGxpc3QnO1xuaW1wb3J0IGJwbGlzdENyZWF0ZSBmcm9tICdicGxpc3QtY3JlYXRvcic7XG5pbXBvcnQgYnBsaXN0UGFyc2UgZnJvbSAnYnBsaXN0LXBhcnNlcic7XG5pbXBvcnQgZnMgZnJvbSAnLi9mcyc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cblxubGV0IHBhcnNlRmlsZSA9IEIucHJvbWlzaWZ5KGJwbGlzdFBhcnNlLnBhcnNlRmlsZSk7XG5cbi8vIFhNTCBQbGlzdCBsaWJyYXJ5IGhlbHBlclxuYXN5bmMgZnVuY3Rpb24gcGFyc2VYbWxQbGlzdEZpbGUgKHBsaXN0RmlsZW5hbWUpIHtcbiAgdmFyIHhtbENvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZShwbGlzdEZpbGVuYW1lLCAndXRmOCcpO1xuICByZXR1cm4gIHhtbHBsaXN0LnBhcnNlKHhtbENvbnRlbnQpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwYXJzZVBsaXN0RmlsZSAocGxpc3QpIHtcbiAgbG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIHBhcnNlIHBsaXN0IGZpbGUgJyR7cGxpc3R9J2ApO1xuICBsZXQgb2JqO1xuICB0cnkge1xuICAgIG9iaiA9IGF3YWl0IHBhcnNlRmlsZShwbGlzdCk7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIGxvZy5kZWJ1ZygnQ291bGQgbm90IHBhcnNlIHBsaXN0IGZpbGUgYXMgYmluYXJ5Jyk7XG4gICAgbG9nLmRlYnVnKCdXaWxsIHRyeSB0byBwYXJzZSB0aGUgcGxpc3QgZmlsZSBhcyBYTUwnKTtcbiAgICB0cnkge1xuICAgICAgb2JqID0gYXdhaXQgcGFyc2VYbWxQbGlzdEZpbGUocGxpc3QpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBwYXJzZSBwbGlzdCBmaWxlIGFzIFhNTDogJHtlcnIubWVzc2FnZX1gKTtcbiAgICB9XG4gICAgbG9nLmRlYnVnKCdQYXJzZWQgZmlsZSBhcyBYTUwnKTtcbiAgICByZXR1cm4gb2JqO1xuICB9XG4gIGlmIChvYmoubGVuZ3RoKSB7XG4gICAgbG9nLmRlYnVnKCdQYXJzZWQgcGxpc3QgZmlsZSBhcyBiaW5hcnknKTtcbiAgICByZXR1cm4gb2JqWzBdO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgQmluYXJ5IGZpbGUgJHtwbGlzdH0gYXBwZWFycyB0byBiZSBlbXB0eWApO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBsaXN0RmlsZSAocGxpc3QsIHVwZGF0ZWRGaWVsZHMsIGJpbmFyeSA9IHRydWUpIHtcbiAgbG9nLmRlYnVnKGBBdHRlbXB0aW5nIHRvIHVwZGF0ZSBwbGlzdCBmaWxlJyR7cGxpc3R9J2ApO1xuICBsZXQgb2JqO1xuICB0cnkge1xuICAgIG9iaiA9IGF3YWl0IHBhcnNlUGxpc3RGaWxlKHBsaXN0KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCB1cGRhdGUgcGxpc3Q6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbiAgXy5leHRlbmQob2JqLCB1cGRhdGVkRmllbGRzKTtcbiAgbGV0IG5ld1BsaXN0ID0gYmluYXJ5ID8gYnBsaXN0Q3JlYXRlKG9iaikgOiB4bWxwbGlzdC5idWlsZChvYmopO1xuICB0cnkge1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZShwbGlzdCwgbmV3UGxpc3QpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQ291bGQgbm90IHNhdmUgcGxpc3Q6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbiAgbG9nLmRlYnVnKGBXcm90ZSBwbGlzdCBmaWxlICcke3BsaXN0fSdgKTtcbn1cblxuZXhwb3J0IHsgcGFyc2VQbGlzdEZpbGUsIHVwZGF0ZVBsaXN0RmlsZSB9O1xuIl19