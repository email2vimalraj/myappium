'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _indexJs = require('../index.js');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

_chai2['default'].should();

describe('tempdir', function () {
  var _this = this;

  it('should be able to generate a path', function callee$1$0() {
    var path;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_indexJs.tempDir.path({ prefix: 'myfile', suffix: '.tmp' }));

        case 2:
          path = context$2$0.sent;

          path.should.exist;
          path.should.include('myfile.tmp');

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should be able to create a temp file', function callee$1$0() {
    var res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_indexJs.tempDir.open({ prefix: 'my-test-file', suffix: '.zip' }));

        case 2:
          res = context$2$0.sent;

          res.should.exist;
          res.path.should.exist;
          res.path.should.include('my-test-file.zip');
          res.fd.should.exist;
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(_indexJs.fs.exists(res.path).should.eventually.be.ok);

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should generate a random temp dir', function callee$1$0() {
    var res, res2;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_indexJs.tempDir.openDir());

        case 2:
          res = context$2$0.sent;

          res.should.be.a('string');
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_indexJs.fs.exists(res).should.eventually.be.ok);

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(_indexJs.tempDir.openDir());

        case 8:
          res2 = context$2$0.sent;
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(_indexJs.fs.exists(res2).should.eventually.be.ok);

        case 11:
          res.should.not.equal(res2);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should generate one temp dir used for the life of the process', function callee$1$0() {
    var res, res2;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_indexJs.tempDir.staticDir());

        case 2:
          res = context$2$0.sent;

          res.should.be.a('string');
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_indexJs.fs.exists(res).should.eventually.be.ok);

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(_indexJs.tempDir.staticDir());

        case 8:
          res2 = context$2$0.sent;
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(_indexJs.fs.exists(res2).should.eventually.be.ok);

        case 11:
          res.should.equal(res2);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdGVtcGRpci1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7dUJBQzRCLGFBQWE7O29CQUN4QixNQUFNOzs7O0FBRXZCLGtCQUFLLE1BQU0sRUFBRSxDQUFDOztBQUVkLFFBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBWTs7O0FBQzlCLElBQUUsQ0FBQyxtQ0FBbUMsRUFBRTtRQUNsQyxJQUFJOzs7OzsyQ0FBUyxpQkFBUSxJQUFJLENBQUMsRUFBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQzs7O0FBQTdELGNBQUk7O0FBQ1IsY0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDbEIsY0FBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7Ozs7Ozs7R0FDbkMsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxzQ0FBc0MsRUFBRTtRQUNyQyxHQUFHOzs7OzsyQ0FBUyxpQkFBUSxJQUFJLENBQUMsRUFBQyxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQzs7O0FBQWxFLGFBQUc7O0FBQ1AsYUFBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDakIsYUFBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3RCLGFBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzVDLGFBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzs7MkNBQ2QsWUFBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUU7Ozs7Ozs7R0FDbEQsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxtQ0FBbUMsRUFBRTtRQUNsQyxHQUFHLEVBR0gsSUFBSTs7Ozs7MkNBSFEsaUJBQVEsT0FBTyxFQUFFOzs7QUFBN0IsYUFBRzs7QUFDUCxhQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7OzJDQUNwQixZQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFOzs7OzJDQUMzQixpQkFBUSxPQUFPLEVBQUU7OztBQUE5QixjQUFJOzsyQ0FDRixZQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFOzs7QUFDN0MsYUFBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDOzs7Ozs7O0dBQzVCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsK0RBQStELEVBQUU7UUFDOUQsR0FBRyxFQUdILElBQUk7Ozs7OzJDQUhRLGlCQUFRLFNBQVMsRUFBRTs7O0FBQS9CLGFBQUc7O0FBQ1AsYUFBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDOzsyQ0FDcEIsWUFBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTs7OzsyQ0FDM0IsaUJBQVEsU0FBUyxFQUFFOzs7QUFBaEMsY0FBSTs7MkNBQ0YsWUFBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRTs7O0FBQzdDLGFBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDOzs7Ozs7O0dBQ3hCLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3RlbXBkaXItc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IHRlbXBEaXIsIGZzIH0gZnJvbSAnLi4vaW5kZXguanMnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5cbmNoYWkuc2hvdWxkKCk7XG5cbmRlc2NyaWJlKCd0ZW1wZGlyJywgZnVuY3Rpb24gKCkge1xuICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gZ2VuZXJhdGUgYSBwYXRoJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBwYXRoID0gYXdhaXQgdGVtcERpci5wYXRoKHtwcmVmaXg6ICdteWZpbGUnLCBzdWZmaXg6ICcudG1wJ30pO1xuICAgIHBhdGguc2hvdWxkLmV4aXN0O1xuICAgIHBhdGguc2hvdWxkLmluY2x1ZGUoJ215ZmlsZS50bXAnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZSBhYmxlIHRvIGNyZWF0ZSBhIHRlbXAgZmlsZScsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgcmVzID0gYXdhaXQgdGVtcERpci5vcGVuKHtwcmVmaXg6ICdteS10ZXN0LWZpbGUnLCBzdWZmaXg6ICcuemlwJ30pO1xuICAgIHJlcy5zaG91bGQuZXhpc3Q7XG4gICAgcmVzLnBhdGguc2hvdWxkLmV4aXN0O1xuICAgIHJlcy5wYXRoLnNob3VsZC5pbmNsdWRlKCdteS10ZXN0LWZpbGUuemlwJyk7XG4gICAgcmVzLmZkLnNob3VsZC5leGlzdDtcbiAgICBhd2FpdCBmcy5leGlzdHMocmVzLnBhdGgpLnNob3VsZC5ldmVudHVhbGx5LmJlLm9rO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdlbmVyYXRlIGEgcmFuZG9tIHRlbXAgZGlyJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCByZXMgPSBhd2FpdCB0ZW1wRGlyLm9wZW5EaXIoKTtcbiAgICByZXMuc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgIGF3YWl0IGZzLmV4aXN0cyhyZXMpLnNob3VsZC5ldmVudHVhbGx5LmJlLm9rO1xuICAgIGxldCByZXMyID0gYXdhaXQgdGVtcERpci5vcGVuRGlyKCk7XG4gICAgYXdhaXQgZnMuZXhpc3RzKHJlczIpLnNob3VsZC5ldmVudHVhbGx5LmJlLm9rO1xuICAgIHJlcy5zaG91bGQubm90LmVxdWFsKHJlczIpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdlbmVyYXRlIG9uZSB0ZW1wIGRpciB1c2VkIGZvciB0aGUgbGlmZSBvZiB0aGUgcHJvY2VzcycsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgcmVzID0gYXdhaXQgdGVtcERpci5zdGF0aWNEaXIoKTtcbiAgICByZXMuc2hvdWxkLmJlLmEoJ3N0cmluZycpO1xuICAgIGF3YWl0IGZzLmV4aXN0cyhyZXMpLnNob3VsZC5ldmVudHVhbGx5LmJlLm9rO1xuICAgIGxldCByZXMyID0gYXdhaXQgdGVtcERpci5zdGF0aWNEaXIoKTtcbiAgICBhd2FpdCBmcy5leGlzdHMocmVzMikuc2hvdWxkLmV2ZW50dWFsbHkuYmUub2s7XG4gICAgcmVzLnNob3VsZC5lcXVhbChyZXMyKTtcbiAgfSk7XG59KTtcbiJdfQ==