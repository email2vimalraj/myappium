'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _indexJs = require('../index.js');

_chai2['default'].should();

var plistPath = _path2['default'].resolve('test', 'assets', 'sample.plist');

describe('plist', function () {
  it('should parse plist file as binary', function callee$1$0() {
    var content;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_indexJs.plist.parsePlistFile(plistPath));

        case 2:
          content = context$2$0.sent;

          content.should.have.property('com.apple.locationd.bundle-/System/Library/PrivateFrameworks/Parsec.framework');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should write plist file as binary', function callee$1$0() {
    var plistFile, updatedFields, content;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.t0 = _path2['default'];
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_indexJs.tempDir.openDir());

        case 3:
          context$2$0.t1 = context$2$0.sent;
          plistFile = context$2$0.t0.resolve.call(context$2$0.t0, context$2$0.t1, 'sample.plist');
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_indexJs.fs.copyFile(plistPath, plistFile));

        case 7:
          updatedFields = {
            'io.appium.test': true
          };
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(_indexJs.plist.updatePlistFile(plistFile, updatedFields, true));

        case 10:
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(_indexJs.plist.parsePlistFile(plistFile));

        case 12:
          content = context$2$0.sent;

          content.should.have.property('io.appium.test');

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// create a temporary file, to which we will write

// write some data

// make sure the data is there
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcGxpc3Qtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7b0JBQWlCLE1BQU07Ozs7b0JBQ04sTUFBTTs7Ozt1QkFDWSxhQUFhOztBQUdoRCxrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFZCxJQUFNLFNBQVMsR0FBRyxrQkFBSyxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQzs7QUFFakUsUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFNO0FBQ3RCLElBQUUsQ0FBQyxtQ0FBbUMsRUFBRTtRQUNsQyxPQUFPOzs7OzsyQ0FBUyxlQUFNLGNBQWMsQ0FBQyxTQUFTLENBQUM7OztBQUEvQyxpQkFBTzs7QUFDWCxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLCtFQUErRSxDQUFDLENBQUM7Ozs7Ozs7R0FDL0csQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxtQ0FBbUMsRUFBRTtRQUVsQyxTQUFTLEVBSVQsYUFBYSxFQU1iLE9BQU87Ozs7OzsyQ0FWd0IsaUJBQVEsT0FBTyxFQUFFOzs7O0FBQWhELG1CQUFTLGtCQUFRLE9BQU8sc0NBQTBCLGNBQWM7OzJDQUM5RCxZQUFHLFFBQVEsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDOzs7QUFHbkMsdUJBQWEsR0FBRztBQUNsQiw0QkFBZ0IsRUFBRSxJQUFJO1dBQ3ZCOzsyQ0FDSyxlQUFNLGVBQWUsQ0FBQyxTQUFTLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQzs7OzsyQ0FHdkMsZUFBTSxjQUFjLENBQUMsU0FBUyxDQUFDOzs7QUFBL0MsaUJBQU87O0FBQ1gsaUJBQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDOzs7Ozs7O0dBQ2hELENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3BsaXN0LXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IHBsaXN0LCB0ZW1wRGlyLCBmcyB9IGZyb20gJy4uL2luZGV4LmpzJztcblxuXG5jaGFpLnNob3VsZCgpO1xuXG5jb25zdCBwbGlzdFBhdGggPSBwYXRoLnJlc29sdmUoJ3Rlc3QnLCAnYXNzZXRzJywgJ3NhbXBsZS5wbGlzdCcpO1xuXG5kZXNjcmliZSgncGxpc3QnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcGFyc2UgcGxpc3QgZmlsZSBhcyBiaW5hcnknLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGNvbnRlbnQgPSBhd2FpdCBwbGlzdC5wYXJzZVBsaXN0RmlsZShwbGlzdFBhdGgpO1xuICAgIGNvbnRlbnQuc2hvdWxkLmhhdmUucHJvcGVydHkoJ2NvbS5hcHBsZS5sb2NhdGlvbmQuYnVuZGxlLS9TeXN0ZW0vTGlicmFyeS9Qcml2YXRlRnJhbWV3b3Jrcy9QYXJzZWMuZnJhbWV3b3JrJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgd3JpdGUgcGxpc3QgZmlsZSBhcyBiaW5hcnknLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gY3JlYXRlIGEgdGVtcG9yYXJ5IGZpbGUsIHRvIHdoaWNoIHdlIHdpbGwgd3JpdGVcbiAgICBsZXQgcGxpc3RGaWxlID0gcGF0aC5yZXNvbHZlKGF3YWl0IHRlbXBEaXIub3BlbkRpcigpLCAnc2FtcGxlLnBsaXN0Jyk7XG4gICAgYXdhaXQgZnMuY29weUZpbGUocGxpc3RQYXRoLCBwbGlzdEZpbGUpO1xuXG4gICAgLy8gd3JpdGUgc29tZSBkYXRhXG4gICAgbGV0IHVwZGF0ZWRGaWVsZHMgPSB7XG4gICAgICAnaW8uYXBwaXVtLnRlc3QnOiB0cnVlXG4gICAgfTtcbiAgICBhd2FpdCBwbGlzdC51cGRhdGVQbGlzdEZpbGUocGxpc3RGaWxlLCB1cGRhdGVkRmllbGRzLCB0cnVlKTtcblxuICAgIC8vIG1ha2Ugc3VyZSB0aGUgZGF0YSBpcyB0aGVyZVxuICAgIGxldCBjb250ZW50ID0gYXdhaXQgcGxpc3QucGFyc2VQbGlzdEZpbGUocGxpc3RGaWxlKTtcbiAgICBjb250ZW50LnNob3VsZC5oYXZlLnByb3BlcnR5KCdpby5hcHBpdW0udGVzdCcpO1xuICB9KTtcbn0pO1xuIl19