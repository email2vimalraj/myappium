require('source-map-support').install();

'use strict';

var _helpers = require('./helpers');

describe('test logger', function () {
  var writers = undefined,
      log = undefined;
  before(function () {
    writers = (0, _helpers.setupWriters)();
    log = (0, _helpers.getDynamicLogger)(true);
  });

  after(function () {
    (0, _helpers.restoreWriters)(writers);
  });

  it('should contains levels', function () {
    log.levels.should.have.length.above(3);
    log.levels[2].should.equal('debug');
  });

  it('should unwrap', function () {
    log.unwrap.should.exist;
    log.unwrap().should.exist;
  });

  it('should rewrite npmlog levels during testing', function () {
    var text = 'hi';
    log.silly(text);
    log.verbose(text);
    log.info(text);
    log.http(text);
    log.warn(text);
    log.error(text);
    (function () {
      log.errorAndThrow(text);
    }).should['throw'](text);
    (0, _helpers.assertOutputDoesntContain)(writers, text);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbG9nZ2VyLXRlc3Qtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozt1QkFHMEMsV0FBVzs7QUFFckQsUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0FBQzVCLE1BQUksT0FBTyxZQUFBO01BQUUsR0FBRyxZQUFBLENBQUM7QUFDakIsUUFBTSxDQUFDLFlBQU07QUFDWCxXQUFPLEdBQUcsNEJBQWMsQ0FBQztBQUN6QixPQUFHLEdBQUcsK0JBQWlCLElBQUksQ0FBQyxDQUFDO0dBQzlCLENBQUMsQ0FBQzs7QUFFSCxPQUFLLENBQUMsWUFBTTtBQUNWLGlDQUFlLE9BQU8sQ0FBQyxDQUFDO0dBQ3pCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsd0JBQXdCLEVBQUUsWUFBTTtBQUNqQyxPQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUN2QyxPQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7R0FDckMsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxlQUFlLEVBQUUsWUFBTTtBQUN4QixPQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDeEIsT0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7R0FDM0IsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyw2Q0FBNkMsRUFBRSxZQUFNO0FBQ3RELFFBQU0sSUFBSSxHQUFHLElBQUksQ0FBQztBQUNsQixPQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hCLE9BQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEIsT0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNmLE9BQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDZixPQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2YsT0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQixLQUFDLFlBQU07QUFBRSxTQUFHLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQUUsQ0FBQSxDQUFFLE1BQU0sU0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hELDRDQUEwQixPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7R0FDMUMsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvbG9nZ2VyLXRlc3Qtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IHsgZ2V0RHluYW1pY0xvZ2dlciwgcmVzdG9yZVdyaXRlcnMsIHNldHVwV3JpdGVycyxcbiAgICAgICAgIGFzc2VydE91dHB1dERvZXNudENvbnRhaW4gfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5kZXNjcmliZSgndGVzdCBsb2dnZXInLCAoKSA9PiB7XG4gIGxldCB3cml0ZXJzLCBsb2c7XG4gIGJlZm9yZSgoKSA9PiB7XG4gICAgd3JpdGVycyA9IHNldHVwV3JpdGVycygpO1xuICAgIGxvZyA9IGdldER5bmFtaWNMb2dnZXIodHJ1ZSk7XG4gIH0pO1xuXG4gIGFmdGVyKCgpID0+IHtcbiAgICByZXN0b3JlV3JpdGVycyh3cml0ZXJzKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjb250YWlucyBsZXZlbHMnLCAoKSA9PiB7XG4gICAgbG9nLmxldmVscy5zaG91bGQuaGF2ZS5sZW5ndGguYWJvdmUoMyk7XG4gICAgbG9nLmxldmVsc1syXS5zaG91bGQuZXF1YWwoJ2RlYnVnJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdW53cmFwJywgKCkgPT4ge1xuICAgIGxvZy51bndyYXAuc2hvdWxkLmV4aXN0O1xuICAgIGxvZy51bndyYXAoKS5zaG91bGQuZXhpc3Q7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV3cml0ZSBucG1sb2cgbGV2ZWxzIGR1cmluZyB0ZXN0aW5nJywgKCkgPT4ge1xuICAgIGNvbnN0IHRleHQgPSAnaGknO1xuICAgIGxvZy5zaWxseSh0ZXh0KTtcbiAgICBsb2cudmVyYm9zZSh0ZXh0KTtcbiAgICBsb2cuaW5mbyh0ZXh0KTtcbiAgICBsb2cuaHR0cCh0ZXh0KTtcbiAgICBsb2cud2Fybih0ZXh0KTtcbiAgICBsb2cuZXJyb3IodGV4dCk7XG4gICAgKCgpID0+IHsgbG9nLmVycm9yQW5kVGhyb3codGV4dCk7IH0pLnNob3VsZC50aHJvdyh0ZXh0KTtcbiAgICBhc3NlcnRPdXRwdXREb2VzbnRDb250YWluKHdyaXRlcnMsIHRleHQpO1xuICB9KTtcbn0pO1xuIl19