'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libLogger = require('../lib/logger');

_chai2['default'].should();

function setupWriters() {
  return { 'stdout': _sinon2['default'].spy(process.stdout, 'write'),
    'stderr': _sinon2['default'].spy(process.stderr, 'write') };
}

function getDynamicLogger(testingMode, forceLogs) {
  var prefix = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  process.env._TESTING = testingMode ? '1' : '0';
  process.env._FORCE_LOGS = forceLogs ? '1' : '0';
  return (0, _libLogger.getLogger)(prefix);
}

function restoreWriters(writers) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(_lodash2['default'].values(writers)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var w = _step.value;

      w.restore();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function someoneHadOutput(writers, output) {
  var hadOutput = false;
  var matchOutput = _sinon2['default'].match(function (value) {
    return value && value.indexOf(output) >= 0;
  }, 'matchOutput');

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(_lodash2['default'].values(writers)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var writer = _step2.value;

      if (writer.calledWith) {
        hadOutput = writer.calledWithMatch(matchOutput);
        if (hadOutput) break;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return hadOutput;
}

function assertOutputContains(writers, output) {
  if (!someoneHadOutput(writers, output)) {
    throw new Error('Expected something to have been called with: \'' + output + '\'');
  }
}

function assertOutputDoesntContain(writers, output) {
  if (someoneHadOutput(writers, output)) {
    throw new Error('Expected nothing to have been called with: \'' + output + '\'');
  }
}

exports.setupWriters = setupWriters;
exports.restoreWriters = restoreWriters;
exports.assertOutputContains = assertOutputContains;
exports.assertOutputDoesntContain = assertOutputDoesntContain;
exports.getDynamicLogger = getDynamicLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O29CQUFpQixNQUFNOzs7O3FCQUNMLE9BQU87Ozs7c0JBQ1gsUUFBUTs7Ozt5QkFDSSxlQUFlOztBQUd6QyxrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFZCxTQUFTLFlBQVksR0FBSTtBQUN2QixTQUFPLEVBQUMsUUFBUSxFQUFFLG1CQUFNLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztBQUM1QyxZQUFRLEVBQUUsbUJBQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQUMsQ0FBQztDQUN2RDs7QUFFRCxTQUFTLGdCQUFnQixDQUFFLFdBQVcsRUFBRSxTQUFTLEVBQWU7TUFBYixNQUFNLHlEQUFDLElBQUk7O0FBQzVELFNBQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLFdBQVcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQy9DLFNBQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2hELFNBQU8sMEJBQVUsTUFBTSxDQUFDLENBQUM7Q0FDMUI7O0FBRUQsU0FBUyxjQUFjLENBQUUsT0FBTyxFQUFFOzs7Ozs7QUFDaEMsc0NBQWMsb0JBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyw0R0FBRTtVQUF4QixDQUFDOztBQUNSLE9BQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNiOzs7Ozs7Ozs7Ozs7Ozs7Q0FDRjs7QUFFRCxTQUFTLGdCQUFnQixDQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDMUMsTUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO0FBQ3RCLE1BQUksV0FBVyxHQUFHLG1CQUFNLEtBQUssQ0FBQyxVQUFVLEtBQUssRUFBRTtBQUM3QyxXQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUM1QyxFQUFFLGFBQWEsQ0FBQyxDQUFDOzs7Ozs7O0FBRWxCLHVDQUFtQixvQkFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGlIQUFFO1VBQTdCLE1BQU07O0FBQ2IsVUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO0FBQ3JCLGlCQUFTLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNoRCxZQUFJLFNBQVMsRUFBRSxNQUFNO09BQ3RCO0tBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDRCxTQUFPLFNBQVMsQ0FBQztDQUNsQjs7QUFFRCxTQUFTLG9CQUFvQixDQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDOUMsTUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRTtBQUN0QyxVQUFNLElBQUksS0FBSyxxREFBa0QsTUFBTSxRQUFJLENBQUM7R0FDN0U7Q0FDRjs7QUFFRCxTQUFTLHlCQUF5QixDQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDbkQsTUFBSSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7QUFDckMsVUFBTSxJQUFJLEtBQUssbURBQWdELE1BQU0sUUFBSSxDQUFDO0dBQzNFO0NBQ0Y7O1FBRVEsWUFBWSxHQUFaLFlBQVk7UUFBRSxjQUFjLEdBQWQsY0FBYztRQUFFLG9CQUFvQixHQUFwQixvQkFBb0I7UUFDbEQseUJBQXlCLEdBQXpCLHlCQUF5QjtRQUFFLGdCQUFnQixHQUFoQixnQkFBZ0IiLCJmaWxlIjoidGVzdC9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJy4uL2xpYi9sb2dnZXInO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5cbmZ1bmN0aW9uIHNldHVwV3JpdGVycyAoKSB7XG4gIHJldHVybiB7J3N0ZG91dCc6IHNpbm9uLnNweShwcm9jZXNzLnN0ZG91dCwgJ3dyaXRlJyksXG4gICAgICAgICAgJ3N0ZGVycic6IHNpbm9uLnNweShwcm9jZXNzLnN0ZGVyciwgJ3dyaXRlJyl9O1xufVxuXG5mdW5jdGlvbiBnZXREeW5hbWljTG9nZ2VyICh0ZXN0aW5nTW9kZSwgZm9yY2VMb2dzLCBwcmVmaXg9bnVsbCkge1xuICBwcm9jZXNzLmVudi5fVEVTVElORyA9IHRlc3RpbmdNb2RlID8gJzEnIDogJzAnO1xuICBwcm9jZXNzLmVudi5fRk9SQ0VfTE9HUyA9IGZvcmNlTG9ncyA/ICcxJyA6ICcwJztcbiAgcmV0dXJuIGdldExvZ2dlcihwcmVmaXgpO1xufVxuXG5mdW5jdGlvbiByZXN0b3JlV3JpdGVycyAod3JpdGVycykge1xuICBmb3IgKGxldCB3IG9mIF8udmFsdWVzKHdyaXRlcnMpKSB7XG4gICAgdy5yZXN0b3JlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc29tZW9uZUhhZE91dHB1dCAod3JpdGVycywgb3V0cHV0KSB7XG4gIGxldCBoYWRPdXRwdXQgPSBmYWxzZTtcbiAgbGV0IG1hdGNoT3V0cHV0ID0gc2lub24ubWF0Y2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmluZGV4T2Yob3V0cHV0KSA+PSAwO1xuICB9LCAnbWF0Y2hPdXRwdXQnKTtcblxuICBmb3IgKGxldCB3cml0ZXIgb2YgXy52YWx1ZXMod3JpdGVycykpIHtcbiAgICBpZiAod3JpdGVyLmNhbGxlZFdpdGgpIHtcbiAgICAgIGhhZE91dHB1dCA9IHdyaXRlci5jYWxsZWRXaXRoTWF0Y2gobWF0Y2hPdXRwdXQpO1xuICAgICAgaWYgKGhhZE91dHB1dCkgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBoYWRPdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE91dHB1dENvbnRhaW5zICh3cml0ZXJzLCBvdXRwdXQpIHtcbiAgaWYgKCFzb21lb25lSGFkT3V0cHV0KHdyaXRlcnMsIG91dHB1dCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIHNvbWV0aGluZyB0byBoYXZlIGJlZW4gY2FsbGVkIHdpdGg6ICcke291dHB1dH0nYCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T3V0cHV0RG9lc250Q29udGFpbiAod3JpdGVycywgb3V0cHV0KSB7XG4gIGlmIChzb21lb25lSGFkT3V0cHV0KHdyaXRlcnMsIG91dHB1dCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIG5vdGhpbmcgdG8gaGF2ZSBiZWVuIGNhbGxlZCB3aXRoOiAnJHtvdXRwdXR9J2ApO1xuICB9XG59XG5cbmV4cG9ydCB7IHNldHVwV3JpdGVycywgcmVzdG9yZVdyaXRlcnMsIGFzc2VydE91dHB1dENvbnRhaW5zLFxuICAgICAgICAgYXNzZXJ0T3V0cHV0RG9lc250Q29udGFpbiwgZ2V0RHluYW1pY0xvZ2dlciB9O1xuIl19