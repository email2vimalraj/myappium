{
  "_args": [
    [
      "appium-logger@https://registry.npmjs.org/appium-logger/-/appium-logger-2.0.0.tgz",
      "/Users/vimalraj/Documents/Development/appium/node_modules/appium-chromedriver/node_modules/appium-jsonwp-proxy"
    ]
  ],
  "_from": "appium-logger@https://registry.npmjs.org/appium-logger/-/appium-logger-2.0.0.tgz",
  "_id": "appium-logger@2.0.0",
  "_inCache": true,
  "_location": "/appium-chromedriver/appium-jsonwp-proxy/appium-logger",
  "_phantomChildren": {},
  "_requested": {
    "name": "appium-logger",
    "raw": "appium-logger@https://registry.npmjs.org/appium-logger/-/appium-logger-2.0.0.tgz",
    "rawSpec": "https://registry.npmjs.org/appium-logger/-/appium-logger-2.0.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/appium-logger/-/appium-logger-2.0.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/appium-chromedriver/appium-jsonwp-proxy",
    "/appium-chromedriver/appium-jsonwp-proxy/appium-support"
  ],
  "_resolved": "https://registry.npmjs.org/appium-logger/-/appium-logger-2.0.0.tgz",
  "_shasum": "a7647943d619800bc49b1f3cf2403a0de709ee38",
  "_shrinkwrap": null,
  "_spec": "appium-logger@https://registry.npmjs.org/appium-logger/-/appium-logger-2.0.0.tgz",
  "_where": "/Users/vimalraj/Documents/Development/appium/node_modules/appium-chromedriver/node_modules/appium-jsonwp-proxy",
  "author": {
    "name": "appium"
  },
  "bin": {},
  "bugs": {
    "url": "https://github.com/appium/logger/issues"
  },
  "dependencies": {
    "babel-runtime": "=5.8.24",
    "npmlog": "^1.2.1",
    "source-map-support": "^0.3.1"
  },
  "description": "Logging utility for appium",
  "devDependencies": {
    "appium-gulp-plugins": "^1.3.11",
    "chai": "^3.2.0",
    "gulp": "^3.9.0",
    "lodash": "^3.10.1",
    "sinon": "^1.16.1"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": [
    "node"
  ],
  "homepage": "https://github.com/appium/logger#readme",
  "keywords": [
    "appium"
  ],
  "license": "Apache-2.0",
  "main": "./build/lib/logger.js",
  "name": "appium-logger",
  "optionalDependencies": {},
  "readme": "## appium-logger\n\n[![NPM version](http://img.shields.io/npm/v/appium-logger.svg)](https://npmjs.org/package/appium-logger)\n[![Downloads](http://img.shields.io/npm/dm/appium-logger.svg)](https://npmjs.org/package/appium-logger)\n[![Dependency Status](https://david-dm.org/appium/logger.svg)](https://david-dm.org/appium/logger)\n[![devDependency Status](https://david-dm.org/appium/logger/dev-status.svg)](https://david-dm.org/appium/logger#info=devDependencies)\n\n[![Build Status](https://travis-ci.org/appium/logger.svg?branch=master)](https://travis-ci.org/appium/logger)\n[![Coverage Status](https://coveralls.io/repos/appium/logger/badge.svg?branch=master)](https://coveralls.io/r/appium/logger?branch=master)\n\nBasic logger defaulting to [npmlog](https://github.com/npm/npmlog) with special consideration for running\ntests (doesn't output logs when run with `_TESTING=1` in the env).\n\n### Logging levels\n\nThere are a number of levels, exposed as methods on the log object, at which logging can be made. The built-in ones correspond to those of [npmlog](https://github.com/npm/npmlog#loglevelprefix-message-), and are:\n`silly`, `verbose`, `info`, `http`, `warn`, and `error`. In addition there is a `debug` level.\n\nThe default threshhold level is `verbose`.\n\nThe logged output, by default, will be `level prefix message`. So\n\n```js\nimport { getLogger } from 'appium-logger';\nlet log = getLogger('mymodule');\nlog.warn('a warning');`\n```\n\nWill produce\n\n```shell\nwarn mymodule a warning\n```\n\n\n### Environment variables\n\nThere are two environment variable flags that affect the way `appium-logger` works.\n\n`_TESTING`\n\n- `_TESTING=1` stops output of logs when set to `1`.\n\n`_FORCE_LOGS`\n\n- This flag, when set to `1`, reverses the `_TESTING`\n\n\n### Usage\n\n`log.level`\n\n- get and set the threshhold level at which to display the logs. Any logs at or above this level will be displayed. The special level silent will prevent anything from being displayed ever. See [npmlog#level](https://github.com/npm/npmlog#loglevel).\n\n`log[level](message)`\n\n- logs to `level`\n    ```js\n    import { getLogger } from 'appium-logger';\n    let log = getLogger('mymodule');\n\n    log.info('hi!');\n    // => info mymodule hi!\n    ```\n\n`log.unwrap()`\n\n- retrieves the underlying [npmlog](https://github.com/npm/npmlog) object, in order to manage how logging is done at a low level (e.g., changing output streams, retrieving an array of messages, adding log levels, etc.).\n\n    ```js\n    import { getLogger } from 'appium-logger';\n    let log = getLogger('mymodule');\n\n    log.info('hi!');\n\n    let npmlogger = log.unwrap();\n\n    // any `npmlog` methods\n    let logs = npmlogger.record;\n    // logs === [ { id: 0, level: 'info', prefix: 'mymodule', message: 'hi!', messageRaw: [ 'hi!' ] }]\n    ```\n\n`log.errorAndThrow(error)`\n\n- logs the error passed in, at `error` level, and then throws the error. If the error passed in is not an instance of [Error](https://nodejs.org/api/errors.html#errors_class_error) (either directly, or a subclass of `Error`) it will be wrapped in a generic `Error` object.\n\n    ```js\n    import { getLogger } from 'appium-logger';\n    let log = getLogger('mymodule');\n\n    // previously there would be two lines\n    log.error('This is an error');\n    throw new Error('This is an error');\n\n    // now is compacted\n    log.errorAndThrow('This is an error');\n    ```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appium/logger.git"
  },
  "scripts": {
    "prepublish": "gulp prepublish",
    "test": "gulp once",
    "watch": "gulp"
  },
  "version": "2.0.0"
}
