require('source-map-support').install();

/* global describe:true, it:true, before:true, after:true */

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('..');

var _2 = _interopRequireDefault(_);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _asyncbox = require('asyncbox');

var _chromedriver = require('chromedriver');

var _chromedriver2 = _interopRequireDefault(_chromedriver);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('proxy', function () {
  var cdProc = null;
  var j = new _2['default']();
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cdProc = _child_process2['default'].spawn(_chromedriver2['default'].path, ['--url-base=/wd/hub', '--port=4444']);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(1000));

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cdProc.kill();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(500));

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should proxy status straight', function callee$1$0() {
    var _ref, _ref2, res, resBody;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(j.proxy('/status', 'GET'));

        case 2:
          _ref = context$2$0.sent;
          _ref2 = _slicedToArray(_ref, 2);
          res = _ref2[0];
          resBody = _ref2[1];

          resBody = JSON.parse(resBody);
          res.statusCode.should.equal(200);
          resBody.status.should.equal(0);
          resBody.value.should.have.property('build');

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should proxy status as command', function callee$1$0() {
    var res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(j.command('/status', 'GET'));

        case 2:
          res = context$2$0.sent;

          res.should.have.property('build');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should start a new session', function callee$1$0() {
    var caps, res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          caps = { browserName: 'chrome' };
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(j.command('/session', 'POST', { desiredCapabilities: caps }));

        case 3:
          res = context$2$0.sent;

          res.should.have.property('browserName');
          j.sessionId.should.have.length(32);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should quit a session', function callee$1$0() {
    var res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(j.command('', 'DELETE'));

        case 2:
          res = context$2$0.sent;

          should.not.exist(res);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcHJveHktZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Z0JBR29CLElBQUk7Ozs7NkJBQ1QsZUFBZTs7OztvQkFDYixNQUFNOzs7O3dCQUNELFVBQVU7OzRCQUNQLGNBQWM7Ozs7OEJBQ1osa0JBQWtCOzs7O0FBRzdDLElBQUksTUFBTSxHQUFHLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQzNCLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxPQUFPLEVBQUUsWUFBTTtBQUN0QixNQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFDbEIsTUFBSSxDQUFDLEdBQUcsbUJBQWEsQ0FBQztBQUN0QixRQUFNLENBQUM7Ozs7QUFDTCxnQkFBTSxHQUFHLDJCQUFHLEtBQUssQ0FBQywwQkFBYSxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDOzsyQ0FDdEUscUJBQU0sSUFBSSxDQUFDOzs7Ozs7O0dBQ2xCLENBQUMsQ0FBQztBQUNILE9BQUssQ0FBQzs7OztBQUNKLGdCQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7OzJDQUNSLHFCQUFNLEdBQUcsQ0FBQzs7Ozs7OztHQUNqQixDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDhCQUE4QixFQUFFO3FCQUM1QixHQUFHLEVBQUUsT0FBTzs7Ozs7OzJDQUFVLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQzs7Ozs7QUFBL0MsYUFBRztBQUFFLGlCQUFPOztBQUNqQixpQkFBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUIsYUFBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLGlCQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0IsaUJBQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7Ozs7Ozs7R0FDN0MsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLGdDQUFnQyxFQUFFO1FBQy9CLEdBQUc7Ozs7OzJDQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQzs7O0FBQXZDLGFBQUc7O0FBQ1AsYUFBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDOzs7Ozs7O0dBQ25DLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyw0QkFBNEIsRUFBRTtRQUMzQixJQUFJLEVBQ0osR0FBRzs7OztBQURILGNBQUksR0FBRyxFQUFDLFdBQVcsRUFBRSxRQUFRLEVBQUM7OzJDQUNsQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsRUFBQyxtQkFBbUIsRUFBRSxJQUFJLEVBQUMsQ0FBQzs7O0FBQXRFLGFBQUc7O0FBQ1AsYUFBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3hDLFdBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7Ozs7Ozs7R0FDcEMsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLHVCQUF1QixFQUFFO1FBQ3RCLEdBQUc7Ozs7OzJDQUFTLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQzs7O0FBQW5DLGFBQUc7O0FBQ1AsZ0JBQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7Ozs7O0dBQ3ZCLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3Byb3h5LWUyZS1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuLyogZ2xvYmFsIGRlc2NyaWJlOnRydWUsIGl0OnRydWUsIGJlZm9yZTp0cnVlLCBhZnRlcjp0cnVlICovXG5cbmltcG9ydCBKV1Byb3h5IGZyb20gJy4uJztcbmltcG9ydCBjcCBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgY2hyb21lZHJpdmVyIGZyb20gJ2Nocm9tZWRyaXZlcic7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5cblxubGV0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmRlc2NyaWJlKCdwcm94eScsICgpID0+IHtcbiAgbGV0IGNkUHJvYyA9IG51bGw7XG4gIGxldCBqID0gbmV3IEpXUHJveHkoKTtcbiAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICBjZFByb2MgPSBjcC5zcGF3bihjaHJvbWVkcml2ZXIucGF0aCwgWyctLXVybC1iYXNlPS93ZC9odWInLCAnLS1wb3J0PTQ0NDQnXSk7XG4gICAgYXdhaXQgc2xlZXAoMTAwMCk7XG4gIH0pO1xuICBhZnRlcihhc3luYyAoKSA9PiB7XG4gICAgY2RQcm9jLmtpbGwoKTtcbiAgICBhd2FpdCBzbGVlcCg1MDApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHByb3h5IHN0YXR1cyBzdHJhaWdodCcsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgW3JlcywgcmVzQm9keV0gPSBhd2FpdCBqLnByb3h5KCcvc3RhdHVzJywgJ0dFVCcpO1xuICAgIHJlc0JvZHkgPSBKU09OLnBhcnNlKHJlc0JvZHkpO1xuICAgIHJlcy5zdGF0dXNDb2RlLnNob3VsZC5lcXVhbCgyMDApO1xuICAgIHJlc0JvZHkuc3RhdHVzLnNob3VsZC5lcXVhbCgwKTtcbiAgICByZXNCb2R5LnZhbHVlLnNob3VsZC5oYXZlLnByb3BlcnR5KCdidWlsZCcpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBwcm94eSBzdGF0dXMgYXMgY29tbWFuZCcsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgcmVzID0gYXdhaXQgai5jb21tYW5kKCcvc3RhdHVzJywgJ0dFVCcpO1xuICAgIHJlcy5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnYnVpbGQnKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgc3RhcnQgYSBuZXcgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgY2FwcyA9IHticm93c2VyTmFtZTogJ2Nocm9tZSd9O1xuICAgIGxldCByZXMgPSBhd2FpdCBqLmNvbW1hbmQoJy9zZXNzaW9uJywgJ1BPU1QnLCB7ZGVzaXJlZENhcGFiaWxpdGllczogY2Fwc30pO1xuICAgIHJlcy5zaG91bGQuaGF2ZS5wcm9wZXJ0eSgnYnJvd3Nlck5hbWUnKTtcbiAgICBqLnNlc3Npb25JZC5zaG91bGQuaGF2ZS5sZW5ndGgoMzIpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBxdWl0IGEgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgcmVzID0gYXdhaXQgai5jb21tYW5kKCcnLCAnREVMRVRFJyk7XG4gICAgc2hvdWxkLm5vdC5leGlzdChyZXMpO1xuICB9KTtcbn0pO1xuIl19