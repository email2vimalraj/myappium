require('source-map-support').install();

/* global describe:true, it:true */

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('..');

var _2 = _interopRequireDefault(_);

var _mockRequest = require('./mock-request');

var _mockRequest2 = _interopRequireDefault(_mockRequest);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function buildReqRes(url, method, body) {
  var req = { originalUrl: url, method: method, body: body };
  var res = {};
  res.headers = {};
  res.set = function (k, v) {
    res[k] = v;
  };
  res.status = function (code) {
    res.sentCode = code;
    return res;
  };
  res.send = function (body) {
    try {
      body = JSON.parse(body);
    } catch (e) {}
    res.sentBody = body;
  };
  return [req, res];
}

function mockProxy() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  var proxy = new _2['default'](opts);
  proxy.request = function callee$1$0() {
    var args$2$0 = arguments;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_mockRequest2['default'].apply(undefined, args$2$0));

        case 2:
          return context$2$0.abrupt('return', context$2$0.sent);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  };
  return proxy;
}

describe('proxy', function () {
  it('should override default params', function () {
    var j = mockProxy({ server: '127.0.0.2' });
    j.server.should.equal('127.0.0.2');
    j.port.should.equal(4444);
  });
  it('should save session id on session creation', function callee$1$0() {
    var j, _ref, _ref2, res, body;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          j = mockProxy();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(j.proxy('/session', 'POST', { desiredCapabilities: {} }));

        case 3:
          _ref = context$2$0.sent;
          _ref2 = _slicedToArray(_ref, 2);
          res = _ref2[0];
          body = _ref2[1];

          res.statusCode.should.equal(200);
          body.should.eql({ status: 0, sessionId: '123', value: { browserName: 'boo' } });
          j.sessionId.should.equal('123');

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should save session id on session creation with 303', function callee$1$0() {
    var j, _ref3, _ref32, res, body;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          j = mockProxy();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(j.proxy('/session', 'POST', { desiredCapabilities: { redirect: true } }));

        case 3:
          _ref3 = context$2$0.sent;
          _ref32 = _slicedToArray(_ref3, 2);
          res = _ref32[0];
          body = _ref32[1];

          res.statusCode.should.equal(303);
          body.should.eql('http://localhost:4444/wd/hub/session/123');
          j.sessionId.should.equal('123');

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  describe('getUrlForProxy', function () {
    it('should modify session id, host, and port', function callee$2$0() {
      var j;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });

            j.getUrlForProxy('http://host.com:1234/wd/hub/session/456/element/200/value').should.eql('http://localhost:4444/wd/hub/session/123/element/200/value');

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should prepend scheme, host and port if not provided', function callee$2$0() {
      var j;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });

            j.getUrlForProxy('/wd/hub/session/456/element/200/value').should.eql('http://localhost:4444/wd/hub/session/123/element/200/value');

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should work with urls which do not have sessiopn ids', function callee$2$0() {
      var j, newUrl;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });

            j.getUrlForProxy('http://host.com:1234/wd/hub/session').should.eql('http://localhost:4444/wd/hub/session');

            newUrl = j.getUrlForProxy('/wd/hub/session');

            newUrl.should.eql('http://localhost:4444/wd/hub/session');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should throw an error if url requires a sessionId but its null', function callee$2$0() {
      var j, e;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy();
            e = undefined;

            try {
              j.getUrlForProxy('/wd/hub/session/456/element/200/value');
            } catch (err) {
              e = err;
            }
            should.exist(e);
            e.message.should.contain('without session id');

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not throw an error if url does not require a session id and its null', function callee$2$0() {
      var j, newUrl;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy();
            newUrl = j.getUrlForProxy('/wd/hub/status');

            should.exist(newUrl);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
  describe('straight proxy', function () {
    it('should successfully proxy straight', function callee$2$0() {
      var j, _ref4, _ref42, res, body;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(j.proxy('/status', 'GET'));

          case 3:
            _ref4 = context$3$0.sent;
            _ref42 = _slicedToArray(_ref4, 2);
            res = _ref42[0];
            body = _ref42[1];

            res.statusCode.should.equal(200);
            body.should.eql({ status: 0, value: { foo: 'bar' } });

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should pass along request errors', function callee$2$0() {
      var j;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });

            j.proxy('/badurl', 'GET').should.eventually.be.rejectedWith("Could not proxy");

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should proxy error responses and codes', function callee$2$0() {
      var j, _ref5, _ref52, res, body;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(j.proxy('/element/bad/text', 'GET'));

          case 3:
            _ref5 = context$3$0.sent;
            _ref52 = _slicedToArray(_ref5, 2);
            res = _ref52[0];
            body = _ref52[1];

            res.statusCode.should.equal(500);
            body.should.eql({ status: 11, value: { message: 'Invisible element' } });

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
  describe('command proxy', function () {
    it('should successfully proxy command', function callee$2$0() {
      var j, res;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy();
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(j.command('/status', 'GET'));

          case 3:
            res = context$3$0.sent;

            res.should.eql({ foo: 'bar' });

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should pass along request errors', function callee$2$0() {
      var j;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });

            j.command('/badurl', 'GET').should.eventually.be.rejectedWith("Could not proxy");

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should throw when a command fails', function callee$2$0() {
      var j, e;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            e = null;
            context$3$0.prev = 2;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(j.command('/element/bad/text', 'GET'));

          case 5:
            context$3$0.next = 10;
            break;

          case 7:
            context$3$0.prev = 7;
            context$3$0.t0 = context$3$0['catch'](2);

            e = context$3$0.t0;

          case 10:
            should.exist(e);
            e.message.should.contain('Original error: Invisible element');
            e.value.should.eql({ message: 'Invisible element' });
            e.status.should.equal(11);

          case 14:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[2, 7]]);
    });
    it('should throw when a command fails with a 200', function callee$2$0() {
      var j, e;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            e = null;
            context$3$0.prev = 2;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(j.command('/element/200/text', 'GET'));

          case 5:
            context$3$0.next = 10;
            break;

          case 7:
            context$3$0.prev = 7;
            context$3$0.t0 = context$3$0['catch'](2);

            e = context$3$0.t0;

          case 10:
            should.exist(e);
            e.message.should.contain('Original error: Invisible element');
            e.value.should.eql({ message: 'Invisible element' });
            e.status.should.equal(11);

          case 14:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[2, 7]]);
    });
    it('should throw when a command fails with a 100', function callee$2$0() {
      var j, e;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            e = null;
            context$3$0.prev = 2;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(j.command('/session/badchrome/nochrome', 'GET'));

          case 5:
            context$3$0.next = 10;
            break;

          case 7:
            context$3$0.prev = 7;
            context$3$0.t0 = context$3$0['catch'](2);

            e = context$3$0.t0;

          case 10:
            should.exist(e);
            e.message.should.contain('Original error: chrome not reachable');
            e.value.should.eql({ message: 'chrome not reachable' });
            e.status.should.equal(0);

          case 14:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[2, 7]]);
    });
  });
  describe('req/res proxy', function () {
    it('should successfully proxy via req and send to res', function callee$2$0() {
      var j, _buildReqRes, _buildReqRes2, req, res;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy();
            _buildReqRes = buildReqRes('/status', 'GET');
            _buildReqRes2 = _slicedToArray(_buildReqRes, 2);
            req = _buildReqRes2[0];
            res = _buildReqRes2[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(j.proxyReqRes(req, res));

          case 7:
            res.headers['Content-type'].should.equal('application/json');
            res.sentCode.should.equal(200);
            res.sentBody.should.eql({ status: 0, value: { foo: 'bar' } });

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should rewrite the inner session id so it doesnt change', function callee$2$0() {
      var j, _buildReqRes3, _buildReqRes32, req, res;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            _buildReqRes3 = buildReqRes('/element/200/value', 'GET');
            _buildReqRes32 = _slicedToArray(_buildReqRes3, 2);
            req = _buildReqRes32[0];
            res = _buildReqRes32[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(j.proxyReqRes(req, res));

          case 7:
            res.sentBody.should.eql({ status: 0, value: 'foobar', sessionId: '123' });

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should rewrite the inner session id with sessionId in url', function callee$2$0() {
      var j, _buildReqRes4, _buildReqRes42, req, res;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            _buildReqRes4 = buildReqRes('/wd/hub/session/456/element/200/value', 'POST');
            _buildReqRes42 = _slicedToArray(_buildReqRes4, 2);
            req = _buildReqRes42[0];
            res = _buildReqRes42[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(j.proxyReqRes(req, res));

          case 7:
            res.sentBody.should.eql({ status: 0, value: 'foobar', sessionId: '456' });

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should pass through urls that do not require session IDs', function callee$2$0() {
      var j, _buildReqRes5, _buildReqRes52, req, res;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            _buildReqRes5 = buildReqRes('/wd/hub/status', 'GET');
            _buildReqRes52 = _slicedToArray(_buildReqRes5, 2);
            req = _buildReqRes52[0];
            res = _buildReqRes52[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(j.proxyReqRes(req, res));

          case 7:
            res.sentBody.should.eql({ status: 0, value: { 'foo': 'bar' } });

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should proxy strange responses', function callee$2$0() {
      var j, _buildReqRes6, _buildReqRes62, req, res;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            j = mockProxy({ sessionId: '123' });
            _buildReqRes6 = buildReqRes('/nochrome', 'GET');
            _buildReqRes62 = _slicedToArray(_buildReqRes6, 2);
            req = _buildReqRes62[0];
            res = _buildReqRes62[1];
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(j.proxyReqRes(req, res));

          case 7:
            res.sentCode.should.equal(100);
            res.sentBody.should.eql({ status: 0, value: { message: 'chrome not reachable' } });

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,