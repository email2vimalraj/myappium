'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumLogger = require('appium-logger');

var _appiumSupport = require('appium-support');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _jsonwpStatus = require('jsonwp-status');

var _jsonwpStatus2 = _interopRequireDefault(_jsonwpStatus);

var log = (0, _appiumLogger.getLogger)('JSONWP Proxy');

var JWProxy = (function () {
  function JWProxy() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, JWProxy);

    _Object$assign(this, {
      scheme: 'http',
      server: 'localhost',
      port: 4444,
      base: '/wd/hub',
      sessionId: null
    }, opts);
    this.scheme = this.scheme.toLowerCase();
  }

  // abstract the call behind a member function
  // so that we can mock it in tests

  _createClass(JWProxy, [{
    key: 'request',
    value: function request() {
      var args$2$0 = arguments;
      return _regeneratorRuntime.async(function request$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_requestPromise2['default'].apply(undefined, args$2$0));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'endpointRequiresSessionId',
    value: function endpointRequiresSessionId(endpoint) {
      return !_lodash2['default'].contains(['/session', '/sessions', '/status'], endpoint);
    }
  }, {
    key: 'getUrlForProxy',
    value: function getUrlForProxy(url) {
      if (url === '') {
        url = '/';
      }
      var proxyBase = this.scheme + '://' + this.server + ':' + this.port + this.base;
      var endpointRe = '(/(session|status))';
      var remainingUrl = '';
      if (/^http/.test(url)) {
        var first = new RegExp('(https?://.+)' + endpointRe).exec(url);
        if (!first) {
          throw new Error('Got a complete url but could not extract JWP endpoint');
        }
        remainingUrl = url.replace(first[1], '');
      } else if (new RegExp('^/').test(url)) {
        remainingUrl = url;
      } else {
        throw new Error('Did not know what to do with url \'' + url + '\'');
      }

      var stripPrefixRe = new RegExp('^.+(/(session|status).*)$');
      if (stripPrefixRe.test(remainingUrl)) {
        remainingUrl = stripPrefixRe.exec(remainingUrl)[1];
      }

      if (!new RegExp(endpointRe).test(remainingUrl)) {
        remainingUrl = '/session/' + this.sessionId + remainingUrl;
      }

      var requiresSessionId = this.endpointRequiresSessionId(remainingUrl);

      if (requiresSessionId && this.sessionId === null) {
        throw new Error('Trying to proxy a session command without session id');
      }

      var sessionBaseRe = new RegExp('^/session/([^/]+)');
      if (sessionBaseRe.test(remainingUrl)) {
        // we have something like /session/:id/foobar, so we need to replace
        // the session id
        var match = sessionBaseRe.exec(remainingUrl);
        remainingUrl = remainingUrl.replace(match[1], this.sessionId);
      } else if (requiresSessionId) {
        throw new Error('Could not find :session section for url: ' + remainingUrl);
      }
      remainingUrl = remainingUrl.replace(/\/$/, ''); // can't have trailing slashes
      return proxyBase + remainingUrl;
    }
  }, {
    key: 'proxy',
    value: function proxy(url, method) {
      var body = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
      var newUrl, reqOpts, res, resBody;
      return _regeneratorRuntime.async(function proxy$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            method = method.toUpperCase();
            newUrl = this.getUrlForProxy(url);
            reqOpts = {
              url: newUrl,
              method: method,
              headers: { 'Content-type': 'application/json;charset=UTF=8' },
              resolveWithFullResponse: true
            };

            if (body !== null) {
              if (typeof body !== 'object') {
                body = JSON.parse(body);
              }
              reqOpts.json = body;
            }
            log.info('Proxying [' + method + ' ' + (url || "/") + '] to [' + method + ' ' + newUrl + '] ' + (body ? 'with body: ' + _lodash2['default'].trunc(JSON.stringify(body), 200) : 'with no body'));
            res = undefined, resBody = undefined;
            context$2$0.prev = 6;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.request(reqOpts));

          case 9:
            res = context$2$0.sent;

            resBody = res.body;
            log.info('Got response with status ' + res.statusCode + ': ' + _lodash2['default'].trunc(JSON.stringify(resBody), 200));
            if (/\/session$/.test(url) && method === 'POST') {
              if (res.statusCode === 200) {
                this.sessionId = resBody.sessionId;
              } else if (res.statusCode === 303) {
                this.sessionId = /\/session\/([^\/]+)/.exec(resBody)[1];
              }
            }
            context$2$0.next = 18;
            break;

          case 15:
            context$2$0.prev = 15;
            context$2$0.t0 = context$2$0['catch'](6);
            throw new Error('Could not proxy command to remote server. ' + ('Original error: ' + context$2$0.t0.message));

          case 18:
            return context$2$0.abrupt('return', [res, resBody]);

          case 19:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[6, 15]]);
    }
  }, {
    key: 'command',
    value: function command(url, method) {
      var body = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

      var _ref, _ref2, response, resBody, statusCodesWithRes, message, e;

      return _regeneratorRuntime.async(function command$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.proxy(url, method, body));

          case 2:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 2);
            response = _ref2[0];
            resBody = _ref2[1];
            statusCodesWithRes = [100, 200, 500];

            resBody = _appiumSupport.util.safeJsonParse(resBody);

            if (!(_lodash2['default'].contains(statusCodesWithRes, response.statusCode) && (_lodash2['default'].isUndefined(resBody.status) || _lodash2['default'].isUndefined(resBody.value)))) {
              context$2$0.next = 10;
              break;
            }

            throw new Error('Did not get a valid response object. Object was: ' + JSON.stringify(resBody));

          case 10:
            if (!_lodash2['default'].contains(statusCodesWithRes, response.statusCode)) {
              context$2$0.next = 24;
              break;
            }

            if (!(response.statusCode === 200 && resBody.status === 0)) {
              context$2$0.next = 15;
              break;
            }

            return context$2$0.abrupt('return', resBody.value);

          case 15:
            if (!(response.statusCode === 200 && _lodash2['default'].isUndefined(resBody.status))) {
              context$2$0.next = 17;
              break;
            }

            return context$2$0.abrupt('return', resBody);

          case 17:
            message = _jsonwpStatus2['default'].getSummaryByCode(resBody.status);

            if (resBody.value.message) {
              message += ' (Original error: ' + resBody.value.message + ')';
            }
            e = new Error(message);

            e.status = resBody.status;
            e.value = resBody.value;
            e.httpCode = response.statusCode;
            throw e;

          case 24:
            throw new Error('Didn\'t know what to do with response code \'' + response.statusCode + '\'');

          case 25:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getSessionIdFromUrl',
    value: function getSessionIdFromUrl(url) {
      var match = url.match(/\/session\/([^\/]+)/);
      return match ? match[1] : null;
    }
  }, {
    key: 'proxyReqRes',
    value: function proxyReqRes(req, res) {
      var _ref3, _ref32, response, body, reqSessionId;

      return _regeneratorRuntime.async(function proxyReqRes$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.proxy(req.originalUrl, req.method, req.body));

          case 2:
            _ref3 = context$2$0.sent;
            _ref32 = _slicedToArray(_ref3, 2);
            response = _ref32[0];
            body = _ref32[1];

            res.headers = response.headers;
            res.set('Content-type', response.headers['content-type']);
            // if the proxied response contains a sessionId that the downstream
            // driver has generated, we don't want to return that to the client.
            // Instead, return the id from the request or from current session
            body = _appiumSupport.util.safeJsonParse(body);
            if (body && body.sessionId) {
              reqSessionId = this.getSessionIdFromUrl(req.originalUrl);

              if (reqSessionId) {
                log.info('Replacing sessionId ' + body.sessionId + ' with ' + reqSessionId);
                body.sessionId = reqSessionId;
              } else if (this.sessionId) {
                log.info('Replacing sessionId ' + body.sessionId + ' with ' + this.sessionId);
                body.sessionId = this.sessionId;
              }
            }
            res.status(response.statusCode).send(JSON.stringify(body));

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return JWProxy;
})();

exports['default'] = JWProxy;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,