require('source-map-support').install();

'use strict';

var _helpers = require('./helpers');

describe('normal logger', function () {
  var writers = undefined,
      log = undefined;
  before(function () {
    writers = (0, _helpers.setupWriters)();
    log = (0, _helpers.getDynamicLogger)(false, false);
    log.level = 'silly';
  });

  after(function () {
    (0, _helpers.restoreWriters)(writers);
  });

  it('should not rewrite log levels outside of testing', function () {
    log.silly('silly');
    (0, _helpers.assertOutputContains)(writers, 'silly');
    log.verbose('verbose');
    (0, _helpers.assertOutputContains)(writers, 'verbose');
    log.verbose('debug');
    (0, _helpers.assertOutputContains)(writers, 'debug');
    log.info('info');
    (0, _helpers.assertOutputContains)(writers, 'info');
    log.http('http');
    (0, _helpers.assertOutputContains)(writers, 'http');
    log.warn('warn');
    (0, _helpers.assertOutputContains)(writers, 'warn');
    log.error('error');
    (0, _helpers.assertOutputContains)(writers, 'error');
  });
  it('throw should not rewrite log levels outside of testing and throw error', function () {
    (function () {
      log.errorAndThrow('msg1');
    }).should['throw']('msg1');
    (function () {
      log.errorAndThrow(new Error('msg2'));
    }).should['throw']('msg2');
    (0, _helpers.assertOutputContains)(writers, 'msg1');
    (0, _helpers.assertOutputContains)(writers, 'msg2');
  });
});

describe('normal logger with prefix', function () {
  var writers = undefined,
      log = undefined;
  before(function () {
    writers = (0, _helpers.setupWriters)();
    log = (0, _helpers.getDynamicLogger)(false, false, 'myprefix');
    log.level = 'silly';
  });

  after(function () {
    (0, _helpers.restoreWriters)(writers);
  });

  it('should not rewrite log levels outside of testing', function () {
    log.silly('silly');
    (0, _helpers.assertOutputContains)(writers, 'silly');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.verbose('verbose');
    (0, _helpers.assertOutputContains)(writers, 'verbose');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.verbose('debug');
    (0, _helpers.assertOutputContains)(writers, 'debug');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.info('info');
    (0, _helpers.assertOutputContains)(writers, 'info');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.http('http');
    (0, _helpers.assertOutputContains)(writers, 'http');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.warn('warn');
    (0, _helpers.assertOutputContains)(writers, 'warn');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
    log.error('error');
    (0, _helpers.assertOutputContains)(writers, 'error');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
  });
  it('throw should not rewrite log levels outside of testing and throw error', function () {
    (function () {
      log.errorAndThrow('msg');
    }).should['throw']('msg');
    (0, _helpers.assertOutputContains)(writers, 'error');
    (0, _helpers.assertOutputContains)(writers, 'myprefix');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbG9nZ2VyLW5vcm1hbC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O3VCQUdxQyxXQUFXOztBQUVoRCxRQUFRLENBQUMsZUFBZSxFQUFFLFlBQU07QUFDOUIsTUFBSSxPQUFPLFlBQUE7TUFBRSxHQUFHLFlBQUEsQ0FBQztBQUNqQixRQUFNLENBQUMsWUFBTTtBQUNYLFdBQU8sR0FBRyxhQU42QixZQUFZLEdBTTNCLENBQUM7QUFDekIsT0FBRyxHQUFHLGFBUEQsZ0JBQWdCLEVBT0UsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3JDLE9BQUcsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDO0dBQ3JCLENBQUMsQ0FBQzs7QUFFSCxPQUFLLENBQUMsWUFBTTtBQUNWLGlCQVp1QixjQUFjLEVBWXRCLE9BQU8sQ0FBQyxDQUFDO0dBQ3pCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsa0RBQWtELEVBQUUsWUFBTTtBQUMzRCxPQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25CLGlCQWhCSyxvQkFBb0IsRUFnQkosT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLE9BQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkIsaUJBbEJLLG9CQUFvQixFQWtCSixPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDekMsT0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyQixpQkFwQkssb0JBQW9CLEVBb0JKLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN2QyxPQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pCLGlCQXRCSyxvQkFBb0IsRUFzQkosT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLE9BQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakIsaUJBeEJLLG9CQUFvQixFQXdCSixPQUFPLEVBQUUsTUFBTSxDQUFDLENB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QUFVLENBQUMsQ0FBQztBQUMxQyxPQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ25CLGlCQXRFSyxvQkFBb0IsRUFzRUosT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3ZDLGlCQXZFSyxvQkFBb0IsRUF1RUosT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0dBQzNDLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyx3RUFBd0UsRUFBRSxZQUFNO0FBQ2pGLEtBQUMsWUFBTTtBQUFFLFNBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7S0FBRSxDQUFBLENBQUUsTUFBTSxTQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUQsaUJBM0VLLG9CQUFvQixFQTJFSixPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDdkMsaUJBNUVLLG9CQUFvQixFQTRFSixPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUM7R0FDM0MsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvbG9nZ2VyLW5vcm1hbC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgeyBnZXREeW5hbWljTG9nZ2VyLCByZXN0b3JlV3JpdGVycywgc2V0dXBXcml0ZXJzLFxuICAgICAgICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5kZXNjcmliZSgnbm9ybWFsIGxvZ2dlcicsICgpID0+IHtcbiAgbGV0IHdyaXRlcnMsIGxvZztcbiAgYmVmb3JlKCgpID0+IHtcbiAgICB3cml0ZXJzID0gc2V0dXBXcml0ZXJzKCk7XG4gICAgbG9nID0gZ2V0RHluYW1pY0xvZ2dlcihmYWxzZSwgZmFsc2UpO1xuICAgIGxvZy5sZXZlbCA9ICdzaWxseSc7XG4gIH0pO1xuXG4gIGFmdGVyKCgpID0+IHtcbiAgICByZXN0b3JlV3JpdGVycyh3cml0ZXJzKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgcmV3cml0ZSBsb2cgbGV2ZWxzIG91dHNpZGUgb2YgdGVzdGluZycsICgpID0+IHtcbiAgICBsb2cuc2lsbHkoJ3NpbGx5Jyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ3NpbGx5Jyk7XG4gICAgbG9nLnZlcmJvc2UoJ3ZlcmJvc2UnKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAndmVyYm9zZScpO1xuICAgIGxvZy52ZXJib3NlKCdkZWJ1ZycpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdkZWJ1ZycpO1xuICAgIGxvZy5pbmZvKCdpbmZvJyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ2luZm8nKTtcbiAgICBsb2cuaHR0cCgnaHR0cCcpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdodHRwJyk7XG4gICAgbG9nLndhcm4oJ3dhcm4nKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnd2FybicpO1xuICAgIGxvZy5lcnJvcignZXJyb3InKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnZXJyb3InKTtcbiAgfSk7XG4gIGl0KCd0aHJvdyBzaG91bGQgbm90IHJld3JpdGUgbG9nIGxldmVscyBvdXRzaWRlIG9mIHRlc3RpbmcgYW5kIHRocm93IGVycm9yJywgKCkgPT4ge1xuICAgICgoKSA9PiB7IGxvZy5lcnJvckFuZFRocm93KCdtc2cxJyk7IH0pLnNob3VsZC50aHJvdygnbXNnMScpO1xuICAgICgoKSA9PiB7IGxvZy5lcnJvckFuZFRocm93KG5ldyBFcnJvcignbXNnMicpKTsgfSkuc2hvdWxkLnRocm93KCdtc2cyJyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ21zZzEnKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnbXNnMicpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnbm9ybWFsIGxvZ2dlciB3aXRoIHByZWZpeCcsICgpID0+IHtcbiAgbGV0IHdyaXRlcnMsIGxvZztcbiAgYmVmb3JlKCgpID0+IHtcbiAgICB3cml0ZXJzID0gc2V0dXBXcml0ZXJzKCk7XG4gICAgbG9nID0gZ2V0RHluYW1pY0xvZ2dlcihmYWxzZSwgZmFsc2UsICdteXByZWZpeCcpO1xuICAgIGxvZy5sZXZlbCA9ICdzaWxseSc7XG4gIH0pO1xuXG4gIGFmdGVyKCgpID0+IHtcbiAgICByZXN0b3JlV3JpdGVycyh3cml0ZXJzKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBub3QgcmV3cml0ZSBsb2cgbGV2ZWxzIG91dHNpZGUgb2YgdGVzdGluZycsICgpID0+IHtcbiAgICBsb2cuc2lsbHkoJ3NpbGx5Jyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ3NpbGx5Jyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ215cHJlZml4Jyk7XG4gICAgbG9nLnZlcmJvc2UoJ3ZlcmJvc2UnKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAndmVyYm9zZScpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdteXByZWZpeCcpO1xuICAgIGxvZy52ZXJib3NlKCdkZWJ1ZycpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdkZWJ1ZycpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdteXByZWZpeCcpO1xuICAgIGxvZy5pbmZvKCdpbmZvJyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ2luZm8nKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnbXlwcmVmaXgnKTtcbiAgICBsb2cuaHR0cCgnaHR0cCcpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdodHRwJyk7XG4gICAgYXNzZXJ0T3V0cHV0Q29udGFpbnMod3JpdGVycywgJ215cHJlZml4Jyk7XG4gICAgbG9nLndhcm4oJ3dhcm4nKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnd2FybicpO1xuICAgIGFzc2VydE91dHB1dENvbnRhaW5zKHdyaXRlcnMsICdteXByZWZpeCcpO1xuICAgIGxvZy5lcnJvcignZXJyb3InKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnZXJyb3InKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnbXlwcmVmaXgnKTtcbiAgfSk7XG4gIGl0KCd0aHJvdyBzaG91bGQgbm90IHJld3JpdGUgbG9nIGxldmVscyBvdXRzaWRlIG9mIHRlc3RpbmcgYW5kIHRocm93IGVycm9yJywgKCkgPT4ge1xuICAgICgoKSA9PiB7IGxvZy5lcnJvckFuZFRocm93KCdtc2cnKTsgfSkuc2hvdWxkLnRocm93KCdtc2cnKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnZXJyb3InKTtcbiAgICBhc3NlcnRPdXRwdXRDb250YWlucyh3cml0ZXJzLCAnbXlwcmVmaXgnKTtcbiAgfSk7XG59KTtcbiJdfQ==