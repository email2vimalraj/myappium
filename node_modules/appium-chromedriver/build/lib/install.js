'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _appiumSupport = require('appium-support');

var _appiumSupport2 = _interopRequireDefault(_appiumSupport);

var _appiumLogger = require('appium-logger');

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _admZip = require('adm-zip');

var _admZip2 = _interopRequireDefault(_admZip);

var _asyncbox = require('asyncbox');

var _utils = require('./utils');

var system = _appiumSupport2['default'].system;
var tempDir = _appiumSupport2['default'].tempDir;
var util = _appiumSupport2['default'].util;

var log = (0, _appiumLogger.getLogger)('Chromedriver Install');

var CD_VER = process.env.npm_config_chromedriver_version || "2.18";
var CD_CDN = process.env.npm_config_chromedriver_cdnurl || process.env.CHROMEDRIVER_CDNURL || "http://chromedriver.storage.googleapis.com";
var CD_BASE_DIR = _path2['default'].resolve(__dirname, "..", "..", "chromedriver");
var CD_PLATS = ["linux", "win", "mac"];
var CD_ARCHS = ["32", "64"];

var getCurArch = _q2['default'].denodeify(system.arch);
var writeFile = _q2['default'].denodeify(_fs2['default'].writeFile);
var readFile = _q2['default'].denodeify(_fs2['default'].readFile);
var mkdir = _q2['default'].denodeify(_fs2['default'].mkdir);
var chmod = _q2['default'].denodeify(_fs2['default'].chmod);
var mkdirp = util.mkdirp;

function getCurPlatform() {
  return system.isWindows() ? "win" : system.isMac() ? "mac" : "linux";
}

function getChromedriverDir() {
  var platform = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

  if (!platform) {
    platform = getCurPlatform();
  }
  return _path2['default'].resolve(CD_BASE_DIR, platform);
}

function getChromedriverBinaryPath() {
  var platform = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
  var arch = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
  var baseDir, ext;
  return _regeneratorRuntime.async(function getChromedriverBinaryPath$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!platform) {
          platform = getCurPlatform();
        }
        baseDir = getChromedriverDir(platform);
        ext = "";

        if (!(platform === "win")) {
          context$1$0.next = 7;
          break;
        }

        ext = ".exe";
        context$1$0.next = 13;
        break;

      case 7:
        if (!(platform === "linux")) {
          context$1$0.next = 13;
          break;
        }

        if (arch) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(getCurArch());

      case 11:
        arch = context$1$0.sent;

      case 12:
        ext = "_" + arch;

      case 13:
        return context$1$0.abrupt('return', _path2['default'].resolve(baseDir, 'chromedriver' + ext));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getDownloadUrl(version, platform, arch) {
  return CD_CDN + '/' + version + '/chromedriver_' + platform + arch + '.zip';
}

function validatePlatform(platform, arch) {
  if (!_lodash2['default'].contains(CD_PLATS, platform)) {
    throw new Error('Invalid platform: ' + platform);
  }
  if (!_lodash2['default'].contains(CD_ARCHS, arch)) {
    throw new Error('Invalid arch: ' + arch);
  }
  if (arch === "64" && platform !== "linux") {
    throw new Error("Only linux has a 64-bit version of Chromedriver");
  }
}

function installForPlatform(version, platform, arch) {
  var url, binarySpec, tempFile, body, tempUnzipped, zip, extractedBin, newBin, binContents;
  return _regeneratorRuntime.async(function installForPlatform$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        validatePlatform(platform, arch);
        url = getDownloadUrl(version, platform, arch);
        binarySpec = 'chromedriver_' + platform + arch;

        log.info('Opening temp file to write ' + binarySpec + ' to...');
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(tempDir.open({
          prefix: binarySpec,
          suffix: '.zip'
        }));

      case 6:
        tempFile = context$1$0.sent;

        // actually download the zipfile and write it with appropriate perms
        log.info('Downloading ' + url + '...');
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_requestPromise2['default'].get({ url: url, encoding: 'binary' }));

      case 10:
        body = context$1$0.sent;

        log.info('Writing binary content to ' + tempFile.path + '...');
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(writeFile(tempFile.path, body, { encoding: 'binary' }));

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(chmod(tempFile.path, 420));

      case 16:
        tempUnzipped = _path2['default'].resolve(_path2['default'].dirname(tempFile.path), binarySpec);

        log.info('Extracting ' + tempFile.path + ' to ' + tempUnzipped);
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(mkdir(tempUnzipped));

      case 20:
        zip = new _admZip2['default'](tempFile.path);

        zip.extractAllTo(tempUnzipped, true);
        extractedBin = _path2['default'].resolve(tempUnzipped, "chromedriver");

        if (platform === "win") {
          extractedBin += ".exe";
        }

        // make build dirs that will hold the chromedriver binary
        log.info('Creating ' + _path2['default'].resolve(CD_BASE_DIR, platform) + '...');
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(mkdirp(CD_BASE_DIR));

      case 27:
        context$1$0.next = 29;
        return _regeneratorRuntime.awrap(mkdirp(_path2['default'].resolve(CD_BASE_DIR, platform)));

      case 29:
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(getChromedriverBinaryPath(platform, arch));

      case 31:
        newBin = context$1$0.sent;

        log.info('Copying unzipped binary, reading from ' + extractedBin + '...');
        context$1$0.next = 35;
        return _regeneratorRuntime.awrap(readFile(extractedBin, { encoding: 'binary' }));

      case 35:
        binContents = context$1$0.sent;

        log.info('Writing to ' + newBin + '...');
        context$1$0.next = 39;
        return _regeneratorRuntime.awrap(writeFile(newBin, binContents, { encoding: 'binary', mode: 493 }));

      case 39:
        log.info(newBin + ' successfully put in place');

      case 40:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function install() {
  var arch, platform;
  return _regeneratorRuntime.async(function install$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getCurArch());

      case 2:
        arch = context$1$0.sent;
        platform = getCurPlatform();

        if (platform !== "linux" && arch === "64") {
          arch = "32";
        }
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(installForPlatform(CD_VER, platform, arch));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function conditionalInstall() {
  var arch, platform, binPath;
  return _regeneratorRuntime.async(function conditionalInstall$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(getCurArch());

      case 2:
        arch = context$1$0.sent;
        platform = getCurPlatform();

        if (platform !== "linux" && arch === "64") {
          arch = "32";
        }
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(getChromedriverBinaryPath(platform, arch));

      case 7:
        binPath = context$1$0.sent;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap((0, _utils.exists)(binPath));

      case 10:
        if (context$1$0.sent) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(installForPlatform(CD_VER, platform, arch));

      case 13:
        context$1$0.next = 16;
        break;

      case 15:
        log.info('No need to install chromedriver, ' + binPath + ' exists');

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function installAll() {
  var plats, downloads, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, platform, arch;

  return _regeneratorRuntime.async(function installAll$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        plats = [['linux', '32'], ['linux', '64'], ['win', '32'], ['mac', '32']];
        downloads = [];
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 5;

        for (_iterator = _getIterator(plats); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _step$value = _slicedToArray(_step.value, 2);
          platform = _step$value[0];
          arch = _step$value[1];

          downloads.push(installForPlatform(CD_VER, platform, arch));
        }
        context$1$0.next = 13;
        break;

      case 9:
        context$1$0.prev = 9;
        context$1$0.t0 = context$1$0['catch'](5);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 13:
        context$1$0.prev = 13;
        context$1$0.prev = 14;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 16:
        context$1$0.prev = 16;

        if (!_didIteratorError) {
          context$1$0.next = 19;
          break;
        }

        throw _iteratorError;

      case 19:
        return context$1$0.finish(16);

      case 20:
        return context$1$0.finish(13);

      case 21:
        context$1$0.next = 23;
        return _regeneratorRuntime.awrap((0, _asyncbox.parallel)(downloads));

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[5, 9, 13, 21], [14,, 16, 20]]);
}

function doInstall() {
  return _regeneratorRuntime.async(function doInstall$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!_lodash2['default'].contains(process.argv, '--all')) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(installAll());

      case 3:
        context$1$0.next = 12;
        break;

      case 5:
        if (!_lodash2['default'].contains(process.argv, '--conditional')) {
          context$1$0.next = 10;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(conditionalInstall());

      case 8:
        context$1$0.next = 12;
        break;

      case 10:
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(install());

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.getChromedriverBinaryPath = getChromedriverBinaryPath;
exports.install = install;
exports.installAll = installAll;
exports.CD_BASE_DIR = CD_BASE_DIR;
exports.getCurPlatform = getCurPlatform;
exports.conditionalInstall = conditionalInstall;
exports.doInstall = doInstall;

// set up a temp file to download the chromedriver zipfile to

// extract downloaded zipfile to tempdir

// copy the extracted binary to the correct build dir
//# sourceMappingURL=data:application/json;base64,