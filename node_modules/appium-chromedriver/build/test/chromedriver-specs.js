require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _libInstall = require('../lib/install');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _q = require('q');

var _q2 = _interopRequireDefault(_q);

var _psNode = require('ps-node');

var _psNode2 = _interopRequireDefault(_psNode);

require('mochawait');

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function nextState(cd) {
  var d = _q2['default'].defer();
  cd.on(_2['default'].EVENT_CHANGED, function (msg) {
    d.resolve(msg.state);
  });
  return d.promise;
}

function nextError(cd) {
  var d = _q2['default'].defer();
  cd.on(_2['default'].EVENT_ERROR, function (err) {
    d.resolve(err);
  });
  return d.promise;
}

function assertNoRunningChromedrivers() {
  var res;
  return _regeneratorRuntime.async(function assertNoRunningChromedrivers$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_q2['default'].nfcall(_psNode2['default'].lookup, { command: /([^ ]*)chromedriver$/,
          psargs: 'aux' }));

      case 2:
        res = context$1$0.sent;

        res.should.have.length(0);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function buildReqRes(url, method, body) {
  var req = { originalUrl: url, method: method, body: body };
  var res = {};
  res.headers = {};
  res.set = function (k, v) {
    res[k] = v;
  };
  res.status = function (code) {
    res.sentCode = code;
    return {
      send: function send(body) {
        try {
          body = JSON.parse(body);
        } catch (e) {}
        res.sentBody = body;
      }
    };
  };
  return [req, res];
}

describe('chromedriver binary setup', function () {
  before(function callee$1$0() {
    var cd;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd = new _2['default']();
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(cd.initChromedriverPath());

        case 4:
          context$2$0.next = 11;
          break;

        case 6:
          context$2$0.prev = 6;
          context$2$0.t0 = context$2$0['catch'](1);

          if (!(context$2$0.t0.message.indexOf("Trying to use") !== -1)) {
            context$2$0.next = 11;
            break;
          }

          context$2$0.next = 11;
          return _regeneratorRuntime.awrap((0, _libInstall.install)());

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 6]]);
  });

  it('should start with a binary that exists', function callee$1$0() {
    var cd;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd = new _2['default']();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(cd.initChromedriverPath());

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

describe('chromedriver with EventEmitter', function () {
  var cd = null;
  var caps = { browserName: 'chrome' };
  before(function callee$1$0() {
    var opts;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          opts = {};

          cd = new _2['default'](opts);

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should start a session', function callee$1$0() {
    var nextStatePromise;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql('stopped');
          nextStatePromise = nextState(cd);

          cd.start(caps);
          cd.capabilities.should.eql(caps);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(nextStatePromise.should.become(_2['default'].STATE_STARTING));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(nextState(cd).should.become(_2['default'].STATE_ONLINE));

        case 8:
          should.exist(cd.jwproxy.sessionId);
          should.exist(cd.sessionId());

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should run some commands', function callee$1$0() {
    var res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(cd.sendCommand('/url', 'POST', { url: 'http://google.com' }));

        case 2:
          res = context$2$0.sent;

          should.not.exist(res);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(cd.sendCommand('/url', 'GET'));

        case 6:
          res = context$2$0.sent;

          res.should.contain('google');

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should proxy commands', function callee$1$0() {
    var initSessId, _buildReqRes, _buildReqRes2, req, res;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          initSessId = cd.sessionId();
          _buildReqRes = buildReqRes('/url', 'GET');
          _buildReqRes2 = _slicedToArray(_buildReqRes, 2);
          req = _buildReqRes2[0];
          res = _buildReqRes2[1];
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(cd.proxyReq(req, res));

        case 7:
          res.headers['content-type'].should.contain('application/json');
          res.sentCode.should.equal(200);
          res.sentBody.status.should.equal(0);
          res.sentBody.value.should.contain('google');
          res.sentBody.sessionId.should.equal(initSessId);

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should say whether there is a working webview', function callee$1$0() {
    var res;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(cd.hasWorkingWebview());

        case 2:
          res = context$2$0.sent;

          res.should.equal(true);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should restart a session', function callee$1$0() {
    var p1;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          p1 = nextState(cd);

          cd.restart();
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(p1.should.become(_2['default'].STATE_RESTARTING));

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(nextState(cd).should.become(_2['default'].STATE_ONLINE));

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should stop a session', function callee$1$0() {
    var nextStatePromise;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          nextStatePromise = nextState(cd);

          cd.stop();
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(nextStatePromise.should.become(_2['default'].STATE_STOPPING));

        case 4:
          should.not.exist(cd.sessionId());
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(nextState(cd).should.become(_2['default'].STATE_STOPPED));

        case 7:
          should.not.exist(cd.sessionId());
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(assertNoRunningChromedrivers());

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it.skip('should change state to stopped if chromedriver crashes', function callee$1$0() {
    var nextStatePromise;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          // test works but is skipped because it leaves a chrome window orphaned
          // and I can't figure out a way to safely kill only that one
          cd.state.should.eql(_2['default'].STATE_STOPPED);
          nextStatePromise = nextState(cd);

          cd.start(caps);
          cd.capabilities.should.eql(caps);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(nextStatePromise.should.become(_2['default'].STATE_STARTING));

        case 6:
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(nextState(cd).should.become(_2['default'].STATE_ONLINE));

        case 8:
          should.exist(cd.jwproxy.sessionId);
          should.exist(cd.sessionId());
          nextStatePromise = nextState(cd);
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(cd.killAll());

        case 13:
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap(nextStatePromise.should.become(_2['default'].STATE_STOPPED));

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should throw an error when chromedriver doesnt exist', function callee$1$0() {
    var cd2, nextErrP, err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd2 = new _2['default']({ executable: '/does/not/exist' });
          nextErrP = nextError(cd2);

          cd2.start({});
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(nextErrP);

        case 5:
          err = context$2$0.sent;

          err.message.should.contain('Trying to use');

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

describe('chromedriver with asyncawait', function () {
  var cd = null;
  var caps = { browserName: 'chrome' };
  before(function callee$1$0() {
    var opts;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          opts = {};

          cd = new _2['default'](opts);

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should start a session', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql('stopped');
          should.not.exist(cd.sessionId());
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(cd.start(caps));

        case 4:
          cd.capabilities.should.eql(caps);
          cd.state.should.eql(_2['default'].STATE_ONLINE);
          should.exist(cd.jwproxy.sessionId);
          should.exist(cd.sessionId());

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should restart a session', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql(_2['default'].STATE_ONLINE);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(cd.restart());

        case 3:
          cd.state.should.eql(_2['default'].STATE_ONLINE);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should stop a session', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cd.state.should.eql(_2['default'].STATE_ONLINE);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(cd.stop());

        case 3:
          cd.state.should.eql(_2['default'].STATE_STOPPED);
          should.not.exist(cd.sessionId());
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(assertNoRunningChromedrivers());

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should throw an error during start if spawn doesnt work', function callee$1$0() {
    var badCd;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          badCd = new _2['default']({ port: 1 });
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(badCd.start(caps).should.eventually.be.rejectedWith('Could not proxy'));

        case 3:
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(assertNoRunningChromedrivers());

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should throw an error during start if session doesnt work', function callee$1$0() {
    var badCd;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          badCd = new _2['default']();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(badCd.start({ chromeOptions: { badCap: 'foo' } }).should.eventually.be.rejectedWith('cannot parse capability'));

        case 3:
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(assertNoRunningChromedrivers());

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// we miss the opportunity to listen for the 'starting' state
//# sourceMappingURL=data:application/json;base64,