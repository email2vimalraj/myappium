'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Symbol = require('babel-runtime/core-js/symbol')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _indexJs = require('../index.js');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

_chai2['default'].should();

var sandbox = undefined,
    tpMock = undefined,
    osMock = null;
var SANDBOX = _Symbol();
var mocks = {};
var libs = { teen_process: teen_process, os: _os2['default'], system: _indexJs.system };

describe('system', function () {
  describe('isX functions', function () {
    beforeEach(function () {
      osMock = _sinon2['default'].mock(_os2['default']);
    });
    afterEach(function () {
      osMock.verify();
      osMock.restore();
    });

    it('should correctly return Windows System if it is a Windows', function () {
      osMock.expects('type').returns('Windows_NT');
      _indexJs.system.isWindows().should.equal['true'];
    });

    it('should correctly return Mac if it is a Mac', function () {
      osMock.expects('type').returns('Darwin');
      _indexJs.system.isMac().should.equal['true'];
    });

    it('should correctly return Linux if it is a Linux', function () {
      osMock.expects('type').twice().returns('Linux');
      _indexJs.system.isLinux().should.equal['true'];
    });
  });

  describe('mac OSX version', function () {
    beforeEach(function () {
      tpMock = _sinon2['default'].mock(teen_process);
    });
    afterEach(function () {
      tpMock.verify();
      tpMock.restore();
    });

    it('should return correct version for 10.10.5', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            tpMock.expects('exec').once().withExactArgs('sw_vers', ['-productVersion']).returns({ stdout: '10.10.5' });
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_indexJs.system.macOsxVersion().should.eventually.equal('10.10'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it("should throw an error if OSX version can't be determined", function callee$2$0() {
      var invalidOsx;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            invalidOsx = '99.99.99';

            tpMock.expects('exec').once().withExactArgs('sw_vers', ['-productVersion']).returns({ stdout: invalidOsx });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_indexJs.system.macOsxVersion().should.eventually.be.rejectedWith(invalidOsx));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('architecture', function () {
    beforeEach(function () {
      sandbox = _sinon2['default'].sandbox.create();
      mocks[SANDBOX] = sandbox;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(_lodash2['default'].toPairs(libs)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2);

          var key = _step$value[0];
          var value = _step$value[1];

          mocks[key] = sandbox.mock(value);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    });

    afterEach(function () {
      sandbox.restore();
    });

    it('should return correct architecture if it is a 64 bit Mac/Linux', function callee$2$0() {
      var arch;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.os.expects('type').thrice().returns('Darwin');
            mocks.teen_process.expects('exec').once().withExactArgs('uname', ['-m']).returns({ stdout: 'x86_64' });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_indexJs.system.arch());

          case 4:
            arch = context$3$0.sent;

            arch.should.equal('64');
            mocks[SANDBOX].verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should return correct architecture if it is a 32 bit Mac/Linux', function callee$2$0() {
      var arch;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.os.expects('type').twice().returns('Linux');
            mocks.teen_process.expects('exec').once().withExactArgs('uname', ['-m']).returns({ stdout: 'i686' });
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_indexJs.system.arch());

          case 4:
            arch = context$3$0.sent;

            arch.should.equal('32');
            mocks[SANDBOX].verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should return correct architecture if it is a 64 bit Windows', function callee$2$0() {
      var arch;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.os.expects('type').thrice().returns('Windows_NT');
            mocks.system.expects('isOSWin64').once().returns(true);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_indexJs.system.arch());

          case 4:
            arch = context$3$0.sent;

            arch.should.equal('64');
            mocks[SANDBOX].verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should return correct architecture if it is a 32 bit Windows', function callee$2$0() {
      var arch;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.os.expects('type').thrice().returns('Windows_NT');
            mocks.system.expects('isOSWin64').once().returns(false);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_indexJs.system.arch());

          case 4:
            arch = context$3$0.sent;

            arch.should.equal('32');
            mocks[SANDBOX].verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  it('should know architecture', function () {
    return _indexJs.system.arch();
  });
});
//# sourceMappingURL=data:application/json;base64,