'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _indexJs = require('../index.js');

_chai2['default'].should();

var plistPath = _path2['default'].resolve('test', 'assets', 'sample.plist');

describe('plist', function () {
  it('should parse plist file as binary', function callee$1$0() {
    var content;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_indexJs.plist.parsePlistFile(plistPath));

        case 2:
          content = context$2$0.sent;

          content.should.have.property('com.apple.locationd.bundle-/System/Library/PrivateFrameworks/Parsec.framework');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should return an empty object if file doesn\'t exist and mustExist is set to false', function callee$1$0() {
    var mustExist, content;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mustExist = false;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_indexJs.plist.parsePlistFile('doesntExist.plist', mustExist));

        case 3:
          content = context$2$0.sent;

          content.should.be.an.Object;
          content.should.be.empty;

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should write plist file as binary', function callee$1$0() {
    var plistFile, updatedFields, content;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.t0 = _path2['default'];
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_indexJs.tempDir.openDir());

        case 3:
          context$2$0.t1 = context$2$0.sent;
          plistFile = context$2$0.t0.resolve.call(context$2$0.t0, context$2$0.t1, 'sample.plist');
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_indexJs.fs.copyFile(plistPath, plistFile));

        case 7:
          updatedFields = {
            'io.appium.test': true
          };
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(_indexJs.plist.updatePlistFile(plistFile, updatedFields, true));

        case 10:
          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(_indexJs.plist.parsePlistFile(plistFile));

        case 12:
          content = context$2$0.sent;

          content.should.have.property('io.appium.test');

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// create a temporary file, to which we will write

// write some data

// make sure the data is there
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcGxpc3Qtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7b0JBQWlCLE1BQU07Ozs7b0JBQ04sTUFBTTs7Ozt1QkFDWSxhQUFhOztBQUdoRCxrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFZCxJQUFNLFNBQVMsR0FBRyxrQkFBSyxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQzs7QUFFakUsUUFBUSxDQUFDLE9BQU8sRUFBRSxZQUFNO0FBQ3RCLElBQUUsQ0FBQyxtQ0FBbUMsRUFBRTtRQUNsQyxPQUFPOzs7OzsyQ0FBUyxlQUFNLGNBQWMsQ0FBQyxTQUFTLENBQUM7OztBQUEvQyxpQkFBTzs7QUFDWCxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLCtFQUErRSxDQUFDLENBQUM7Ozs7Ozs7R0FDL0csQ0FBQyxDQUFDOztBQUVILElBQUUsdUZBQXNGO1FBQ2xGLFNBQVMsRUFDVCxPQUFPOzs7O0FBRFAsbUJBQVMsR0FBRyxLQUFLOzsyQ0FDRCxlQUFNLGNBQWMsQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLENBQUM7OztBQUFwRSxpQkFBTzs7QUFDWCxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQztBQUM1QixpQkFBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDOzs7Ozs7O0dBQ3pCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsbUNBQW1DLEVBQUU7UUFFbEMsU0FBUyxFQUlULGFBQWEsRUFNYixPQUFPOzs7Ozs7MkNBVndCLGlCQUFRLE9BQU8sRUFBRTs7OztBQUFoRCxtQkFBUyxrQkFBUSxPQUFPLHNDQUEwQixjQUFjOzsyQ0FDOUQsWUFBRyxRQUFRLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQzs7O0FBR25DLHVCQUFhLEdBQUc7QUFDbEIsNEJBQWdCLEVBQUUsSUFBSTtXQUN2Qjs7MkNBQ0ssZUFBTSxlQUFlLENBQUMsU0FBUyxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUM7Ozs7MkNBR3ZDLGVBQU0sY0FBYyxDQUFDLFNBQVMsQ0FBQzs7O0FBQS9DLGlCQUFPOztBQUNYLGlCQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs7Ozs7OztHQUNoRCxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9wbGlzdC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBwbGlzdCwgdGVtcERpciwgZnMgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5cblxuY2hhaS5zaG91bGQoKTtcblxuY29uc3QgcGxpc3RQYXRoID0gcGF0aC5yZXNvbHZlKCd0ZXN0JywgJ2Fzc2V0cycsICdzYW1wbGUucGxpc3QnKTtcblxuZGVzY3JpYmUoJ3BsaXN0JywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHBhcnNlIHBsaXN0IGZpbGUgYXMgYmluYXJ5JywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBjb250ZW50ID0gYXdhaXQgcGxpc3QucGFyc2VQbGlzdEZpbGUocGxpc3RQYXRoKTtcbiAgICBjb250ZW50LnNob3VsZC5oYXZlLnByb3BlcnR5KCdjb20uYXBwbGUubG9jYXRpb25kLmJ1bmRsZS0vU3lzdGVtL0xpYnJhcnkvUHJpdmF0ZUZyYW1ld29ya3MvUGFyc2VjLmZyYW1ld29yaycpO1xuICB9KTtcbiAgXG4gIGl0KGBzaG91bGQgcmV0dXJuIGFuIGVtcHR5IG9iamVjdCBpZiBmaWxlIGRvZXNuJ3QgZXhpc3QgYW5kIG11c3RFeGlzdCBpcyBzZXQgdG8gZmFsc2VgLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IG11c3RFeGlzdCA9IGZhbHNlO1xuICAgIGxldCBjb250ZW50ID0gYXdhaXQgcGxpc3QucGFyc2VQbGlzdEZpbGUoJ2RvZXNudEV4aXN0LnBsaXN0JywgbXVzdEV4aXN0KTtcbiAgICBjb250ZW50LnNob3VsZC5iZS5hbi5PYmplY3Q7XG4gICAgY29udGVudC5zaG91bGQuYmUuZW1wdHk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgd3JpdGUgcGxpc3QgZmlsZSBhcyBiaW5hcnknLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gY3JlYXRlIGEgdGVtcG9yYXJ5IGZpbGUsIHRvIHdoaWNoIHdlIHdpbGwgd3JpdGVcbiAgICBsZXQgcGxpc3RGaWxlID0gcGF0aC5yZXNvbHZlKGF3YWl0IHRlbXBEaXIub3BlbkRpcigpLCAnc2FtcGxlLnBsaXN0Jyk7XG4gICAgYXdhaXQgZnMuY29weUZpbGUocGxpc3RQYXRoLCBwbGlzdEZpbGUpO1xuXG4gICAgLy8gd3JpdGUgc29tZSBkYXRhXG4gICAgbGV0IHVwZGF0ZWRGaWVsZHMgPSB7XG4gICAgICAnaW8uYXBwaXVtLnRlc3QnOiB0cnVlXG4gICAgfTtcbiAgICBhd2FpdCBwbGlzdC51cGRhdGVQbGlzdEZpbGUocGxpc3RGaWxlLCB1cGRhdGVkRmllbGRzLCB0cnVlKTtcblxuICAgIC8vIG1ha2Ugc3VyZSB0aGUgZGF0YSBpcyB0aGVyZVxuICAgIGxldCBjb250ZW50ID0gYXdhaXQgcGxpc3QucGFyc2VQbGlzdEZpbGUocGxpc3RGaWxlKTtcbiAgICBjb250ZW50LnNob3VsZC5oYXZlLnByb3BlcnR5KCdpby5hcHBpdW0udGVzdCcpO1xuICB9KTtcbn0pO1xuIl19