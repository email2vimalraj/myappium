'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('..');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('util', function () {
  describe('hasValue', function () {
    it('should exist', function () {
      should.exist(_.util.hasValue);
    });

    it('should handle undefined', function () {
      _.util.hasValue(undefined).should.be['false'];
    });

    it('should handle not a number', function () {
      _.util.hasValue(NaN).should.be['false'];
    });

    it('should handle null', function () {
      _.util.hasValue(null).should.be['false'];
    });

    it('should handle functions', function () {
      _.util.hasValue(function () {}).should.be['true'];
    });

    it('should handle empty arrays', function () {
      _.util.hasValue({}).should.be['true'];
    });

    it('should handle zero', function () {
      _.util.hasValue(0).should.be['true'];
    });

    it('should handle simple string', function () {
      _.util.hasValue('string').should.be['true'];
    });

    it('should handle booleans', function () {
      _.util.hasValue(false).should.be['true'];
    });

    it('should handle empty strings', function () {
      _.util.hasValue('').should.be['true'];
    });
  });

  describe('hasContent', function () {
    it('should exist', function () {
      should.exist(_.util.hasContent);
    });

    it('should handle undefined', function () {
      _.util.hasContent(undefined).should.be['false'];
    });

    it('should handle not a number', function () {
      _.util.hasContent(NaN).should.be['false'];
    });

    it('should handle null', function () {
      _.util.hasContent(null).should.be['false'];
    });

    it('should handle functions', function () {
      _.util.hasContent(function () {}).should.be['false'];
    });

    it('should handle empty arrays', function () {
      _.util.hasContent({}).should.be['false'];
    });

    it('should handle zero', function () {
      _.util.hasContent(0).should.be['false'];
    });

    it('should handle simple string', function () {
      _.util.hasContent('string').should.be['true'];
    });

    it('should handle booleans', function () {
      _.util.hasContent(false).should.be['false'];
    });

    it('should handle empty strings', function () {
      _.util.hasContent('').should.be['false'];
    });
  });

  describe('escapeSpace', function () {
    it('should do nothing to a string without space', function () {
      var actual = 'appium';
      var expected = 'appium';
      _.util.escapeSpace(actual).should.equal(expected);
    });

    it('should do escape spaces', function () {
      var actual = '/Applications/ Xcode 6.1.1.app/Contents/Developer';
      var expected = '/Applications/\\ Xcode\\ 6.1.1.app/Contents/Developer';
      _.util.escapeSpace(actual).should.equal(expected);
    });

    it('should escape consecutive spaces', function () {
      var actual = 'appium   space';
      var expected = 'appium\\ \\ \\ space';
      _.util.escapeSpace(actual).should.equal(expected);
    });
  });

  describe('localIp', function () {
    it('should find a local ip address', function () {
      var utilMock = _sinon2['default'].mock(_.util);
      utilMock.expects('localIp').returns('10.35.4.175');
      _.util.localIp();
      utilMock.verify();
    });
  });

  describe('cancellableDelay', function () {
    it('should delay', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_.util.cancellableDelay('10'));

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
    it('cancel should work', function callee$2$0() {
      var delay;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            delay = _.util.cancellableDelay('1000');

            _bluebird2['default'].delay(10).then(function () {
              delay.cancel();
            }).done();
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(delay.should.be.rejectedWith(/cancellation error/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  describe('safeJsonParse', function () {
    it('should pass object through', function () {
      var obj = { a: 'a', b: 'b' };
      _.util.safeJsonParse(obj).should.equal(obj);
    });
    it('should correctly parse json string', function () {
      var obj = { a: 'a', b: 'b' };
      _.util.safeJsonParse(JSON.stringify(obj)).should.eql(obj);
    });
    it('should pass a number through', function () {
      var num = 42;
      _.util.safeJsonParse(num).should.eql(num);
    });
    it('should make a number from a string representation', function () {
      var num = 42;
      _.util.safeJsonParse(String(num)).should.eql(num);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,