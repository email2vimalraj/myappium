'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _plist = require('plist');

var _plist2 = _interopRequireDefault(_plist);

var _bplistCreator = require('bplist-creator');

var _bplistCreator2 = _interopRequireDefault(_bplistCreator);

var _bplistParser = require('bplist-parser');

var _bplistParser2 = _interopRequireDefault(_bplistParser);

var _fs = require('./fs');

var _fs2 = _interopRequireDefault(_fs);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var parseFile = _bluebird2['default'].promisify(_bplistParser2['default'].parseFile);

// XML Plist library helper
function parseXmlPlistFile(plistFilename) {
  var xmlContent;
  return _regeneratorRuntime.async(function parseXmlPlistFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_fs2['default'].readFile(plistFilename, 'utf8'));

      case 2:
        xmlContent = context$1$0.sent;
        return context$1$0.abrupt('return', _plist2['default'].parse(xmlContent));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function parsePlistFile(plist) {
  var mustExist = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  var quiet = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
  var obj, type;
  return _regeneratorRuntime.async(function parsePlistFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_fs2['default'].exists(plist));

      case 2:
        if (context$1$0.sent) {
          context$1$0.next = 9;
          break;
        }

        if (!mustExist) {
          context$1$0.next = 7;
          break;
        }

        _logger2['default'].errorAndThrow('Plist file doesn\'t exist: \'' + plist + '\'');
        context$1$0.next = 9;
        break;

      case 7:
        _logger2['default'].debug('File does not exist. Returning an empty plist.');
        return context$1$0.abrupt('return', {});

      case 9:
        obj = {};
        type = 'binary';
        context$1$0.prev = 11;
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(parseFile(plist));

      case 14:
        obj = context$1$0.sent;

        if (!obj.length) {
          context$1$0.next = 19;
          break;
        }

        obj = obj[0];
        context$1$0.next = 20;
        break;

      case 19:
        throw new Error('Binary file \'' + plist + '\'\' appears to be empty');

      case 20:
        context$1$0.next = 34;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](11);
        context$1$0.prev = 24;
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(parseXmlPlistFile(plist));

      case 27:
        obj = context$1$0.sent;

        type = 'xml';
        context$1$0.next = 34;
        break;

      case 31:
        context$1$0.prev = 31;
        context$1$0.t1 = context$1$0['catch'](24);

        _logger2['default'].errorAndThrow('Could not parse plist file as XML: ' + context$1$0.t1.message);

      case 34:

        if (!quiet) {
          _logger2['default'].debug('Parsed plist file \'' + plist + '\' as ' + type);
        }
        return context$1$0.abrupt('return', obj);

      case 36:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[11, 22], [24, 31]]);
}

function updatePlistFile(plist, updatedFields) {
  var binary = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
  var mustExist = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
  var quiet = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];
  var obj, newPlist;
  return _regeneratorRuntime.async(function updatePlistFile$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        obj = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(parsePlistFile(plist, mustExist));

      case 4:
        obj = context$1$0.sent;
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _logger2['default'].errorAndThrow('Could not update plist: ' + context$1$0.t0.message);

      case 10:
        _lodash2['default'].extend(obj, updatedFields);
        newPlist = binary ? (0, _bplistCreator2['default'])(obj) : _plist2['default'].build(obj);
        context$1$0.prev = 12;
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(_fs2['default'].writeFile(plist, newPlist));

      case 15:
        context$1$0.next = 20;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t1 = context$1$0['catch'](12);

        _logger2['default'].errorAndThrow('Could not save plist: ' + context$1$0.t1.message);

      case 20:
        if (!quiet) {
          _logger2['default'].debug('Wrote plist file \'' + plist + '\'');
        }

      case 21:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7], [12, 17]]);
}

exports.parsePlistFile = parsePlistFile;
exports.updatePlistFile = updatePlistFile;

// handle nonexistant file
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wbGlzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O3FCQUFxQixPQUFPOzs7OzZCQUNILGdCQUFnQjs7Ozs0QkFDakIsZUFBZTs7OztrQkFDeEIsTUFBTTs7OztzQkFDTCxVQUFVOzs7O3NCQUNaLFFBQVE7Ozs7d0JBQ1IsVUFBVTs7OztBQUd4QixJQUFJLFNBQVMsR0FBRyxzQkFBRSxTQUFTLENBQUMsMEJBQVksU0FBUyxDQUFDLENBQUM7OztBQUduRCxTQUFlLGlCQUFpQixDQUFFLGFBQWE7TUFDekMsVUFBVTs7Ozs7eUNBQVMsZ0JBQUcsUUFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUM7OztBQUFyRCxrQkFBVTs0Q0FDUCxtQkFBUyxLQUFLLENBQUMsVUFBVSxDQUFDOzs7Ozs7O0NBQ2xDOztBQUVELFNBQWUsY0FBYyxDQUFFLEtBQUs7TUFBRSxTQUFTLHlEQUFHLElBQUk7TUFBRSxLQUFLLHlEQUFHLElBQUk7TUFXOUQsR0FBRyxFQUNILElBQUk7Ozs7O3lDQVZHLGdCQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7Ozs7Ozs7O2FBQ3JCLFNBQVM7Ozs7O0FBQ1gsNEJBQUksYUFBYSxtQ0FBK0IsS0FBSyxRQUFJLENBQUM7Ozs7O0FBRTFELDRCQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDOzRDQUNyRCxFQUFFOzs7QUFJVCxXQUFHLEdBQUcsRUFBRTtBQUNSLFlBQUksR0FBRyxRQUFROzs7eUNBRUwsU0FBUyxDQUFDLEtBQUssQ0FBQzs7O0FBQTVCLFdBQUc7O2FBQ0MsR0FBRyxDQUFDLE1BQU07Ozs7O0FBQ1osV0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7Y0FFUCxJQUFJLEtBQUssb0JBQWlCLEtBQUssOEJBQXlCOzs7Ozs7Ozs7Ozt5Q0FJbEQsaUJBQWlCLENBQUMsS0FBSyxDQUFDOzs7QUFBcEMsV0FBRzs7QUFDSCxZQUFJLEdBQUcsS0FBSyxDQUFDOzs7Ozs7OztBQUViLDRCQUFJLGFBQWEseUNBQXVDLGVBQUksT0FBTyxDQUFHLENBQUM7Ozs7QUFJM0UsWUFBSSxDQUFDLEtBQUssRUFBRTtBQUNWLDhCQUFJLEtBQUssMEJBQXVCLEtBQUssY0FBUSxJQUFJLENBQUcsQ0FBQztTQUN0RDs0Q0FDTSxHQUFHOzs7Ozs7O0NBQ1g7O0FBRUQsU0FBZSxlQUFlLENBQUUsS0FBSyxFQUFFLGFBQWE7TUFBRSxNQUFNLHlEQUFHLElBQUk7TUFBRSxTQUFTLHlEQUFHLElBQUk7TUFBRSxLQUFLLHlEQUFHLElBQUk7TUFDN0YsR0FBRyxFQU9ILFFBQVE7Ozs7QUFQUixXQUFHOzs7eUNBRU8sY0FBYyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUM7OztBQUE1QyxXQUFHOzs7Ozs7OztBQUVILDRCQUFJLGFBQWEsOEJBQTRCLGVBQUksT0FBTyxDQUFHLENBQUM7OztBQUU5RCw0QkFBRSxNQUFNLENBQUMsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3pCLGdCQUFRLEdBQUcsTUFBTSxHQUFHLGdDQUFhLEdBQUcsQ0FBQyxHQUFHLG1CQUFTLEtBQUssQ0FBQyxHQUFHLENBQUM7Ozt5Q0FFdkQsZ0JBQUcsU0FBUyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUM7Ozs7Ozs7Ozs7QUFFbkMsNEJBQUksYUFBYSw0QkFBMEIsZUFBSSxPQUFPLENBQUcsQ0FBQzs7O0FBRTVELFlBQUksQ0FBQyxLQUFLLEVBQUU7QUFDViw4QkFBSSxLQUFLLHlCQUFzQixLQUFLLFFBQUksQ0FBQztTQUMxQzs7Ozs7OztDQUNGOztRQUVRLGNBQWMsR0FBZCxjQUFjO1FBQUUsZUFBZSxHQUFmLGVBQWUiLCJmaWxlIjoibGliL3BsaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHhtbHBsaXN0IGZyb20gJ3BsaXN0JztcbmltcG9ydCBicGxpc3RDcmVhdGUgZnJvbSAnYnBsaXN0LWNyZWF0b3InO1xuaW1wb3J0IGJwbGlzdFBhcnNlIGZyb20gJ2JwbGlzdC1wYXJzZXInO1xuaW1wb3J0IGZzIGZyb20gJy4vZnMnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5cbmxldCBwYXJzZUZpbGUgPSBCLnByb21pc2lmeShicGxpc3RQYXJzZS5wYXJzZUZpbGUpO1xuXG4vLyBYTUwgUGxpc3QgbGlicmFyeSBoZWxwZXJcbmFzeW5jIGZ1bmN0aW9uIHBhcnNlWG1sUGxpc3RGaWxlIChwbGlzdEZpbGVuYW1lKSB7XG4gIHZhciB4bWxDb250ZW50ID0gYXdhaXQgZnMucmVhZEZpbGUocGxpc3RGaWxlbmFtZSwgJ3V0ZjgnKTtcbiAgcmV0dXJuIHhtbHBsaXN0LnBhcnNlKHhtbENvbnRlbnQpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBwYXJzZVBsaXN0RmlsZSAocGxpc3QsIG11c3RFeGlzdCA9IHRydWUsIHF1aWV0ID0gdHJ1ZSkge1xuICAvLyBoYW5kbGUgbm9uZXhpc3RhbnQgZmlsZVxuICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhwbGlzdCkpIHtcbiAgICBpZiAobXVzdEV4aXN0KSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgUGxpc3QgZmlsZSBkb2Vzbid0IGV4aXN0OiAnJHtwbGlzdH0nYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5kZWJ1ZygnRmlsZSBkb2VzIG5vdCBleGlzdC4gUmV0dXJuaW5nIGFuIGVtcHR5IHBsaXN0LicpO1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgfVxuXG4gIGxldCBvYmogPSB7fTtcbiAgbGV0IHR5cGUgPSAnYmluYXJ5JztcbiAgdHJ5IHtcbiAgICBvYmogPSBhd2FpdCBwYXJzZUZpbGUocGxpc3QpO1xuICAgIGlmIChvYmoubGVuZ3RoKSB7XG4gICAgICBvYmogPSBvYmpbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQmluYXJ5IGZpbGUgJyR7cGxpc3R9JycgYXBwZWFycyB0byBiZSBlbXB0eWApO1xuICAgIH1cbiAgfSBjYXRjaCAoaWduKSB7XG4gICAgdHJ5IHtcbiAgICAgIG9iaiA9IGF3YWl0IHBhcnNlWG1sUGxpc3RGaWxlKHBsaXN0KTtcbiAgICAgIHR5cGUgPSAneG1sJztcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgcGFyc2UgcGxpc3QgZmlsZSBhcyBYTUw6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFxdWlldCkge1xuICAgIGxvZy5kZWJ1ZyhgUGFyc2VkIHBsaXN0IGZpbGUgJyR7cGxpc3R9JyBhcyAke3R5cGV9YCk7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlUGxpc3RGaWxlIChwbGlzdCwgdXBkYXRlZEZpZWxkcywgYmluYXJ5ID0gdHJ1ZSwgbXVzdEV4aXN0ID0gdHJ1ZSwgcXVpZXQgPSB0cnVlKSB7XG4gIGxldCBvYmo7XG4gIHRyeSB7XG4gICAgb2JqID0gYXdhaXQgcGFyc2VQbGlzdEZpbGUocGxpc3QsIG11c3RFeGlzdCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgdXBkYXRlIHBsaXN0OiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG4gIF8uZXh0ZW5kKG9iaiwgdXBkYXRlZEZpZWxkcyk7XG4gIGxldCBuZXdQbGlzdCA9IGJpbmFyeSA/IGJwbGlzdENyZWF0ZShvYmopIDogeG1scGxpc3QuYnVpbGQob2JqKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUocGxpc3QsIG5ld1BsaXN0KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBzYXZlIHBsaXN0OiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG4gIGlmICghcXVpZXQpIHtcbiAgICBsb2cuZGVidWcoYFdyb3RlIHBsaXN0IGZpbGUgJyR7cGxpc3R9J2ApO1xuICB9XG59XG5cbmV4cG9ydCB7IHBhcnNlUGxpc3RGaWxlLCB1cGRhdGVQbGlzdEZpbGUgfTtcbiJdfQ==