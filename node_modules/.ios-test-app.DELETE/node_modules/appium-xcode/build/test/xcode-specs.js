require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('xcode @skip-linux', function () {

  it('should get the path to xcode executable', function callee$1$0() {
    var path;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_index2['default'].getPath());

        case 2:
          path = context$2$0.sent;

          should.exist(path);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(path));

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  describe('getVersion', function () {
    var versionRE = /\d\.\d\.*\d*/;

    it('should get the version of xcode', function callee$2$0() {
      var version;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_index2['default'].getVersion());

          case 2:
            version = context$3$0.sent;

            should.exist(version);
            _lodash2['default'].isString(version).should.be['true'];
            versionRE.test(version).should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should get the path and version again, these values are cached', function callee$2$0() {
      var before, path, after, version;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_index2['default'].getPath());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_index2['default'].getVersion());

          case 4:
            before = new Date();
            context$3$0.next = 7;
            return _regeneratorRuntime.awrap(_index2['default'].getPath());

          case 7:
            path = context$3$0.sent;
            after = new Date();

            should.exist(path);
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(path));

          case 12:
            (after - before).should.be.at.most(2);

            before = new Date();
            context$3$0.next = 16;
            return _regeneratorRuntime.awrap(_index2['default'].getVersion());

          case 16:
            version = context$3$0.sent;

            after = new Date();

            should.exist(version);
            _lodash2['default'].isString(version).should.be['true'];
            versionRE.test(version).should.be['true'];
            (after - before).should.be.at.most(2);

          case 22:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });

    it('should get the parsed version', function callee$2$0() {
      var nonParsedVersion, version;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(_index2['default'].getVersion());

          case 2:
            nonParsedVersion = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(_index2['default'].getVersion(true));

          case 5:
            version = context$3$0.sent;

            should.exist(version);
            _lodash2['default'].isString(version.versionString).should.be['true'];
            version.versionString.should.eql(nonParsedVersion);

            parseFloat(version.versionFloat).should.equal(version.versionFloat);
            parseInt(version.major).should.equal(version.major);
            parseInt(version.minor).should.equal(version.minor);

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });

  it('should clear the cache if asked to', function callee$1$0() {
    var before, after;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:

          _index2['default'].clearInternalCache();

          before = new Date();
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(_index2['default'].getPath());

        case 4:
          after = new Date();

          (after - before).should.be.at.least(6);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });

  it('should find the automation trace template', function callee$1$0() {
    var path, suffix;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_index2['default'].getAutomationTraceTemplatePath());

        case 2:
          path = context$2$0.sent;

          should.exist(path);
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(path).should.eventually.be['true']);

        case 6:
          suffix = ".tracetemplate";

          path.slice(-suffix.length).should.equal(suffix);

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get max iOS SDK version', function callee$1$0() {
    var version;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_index2['default'].getMaxIOSSDK());

        case 2:
          version = context$2$0.sent;

          should.exist(version);
          (typeof version).should.equal('string');
          (parseFloat(version) - 6.1).should.be.at.least(0);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get a list of iOS devices', function callee$1$0() {
    var devices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_index2['default'].getConnectedDevices());

        case 2:
          devices = context$2$0.sent;

          should.exist(devices);
          (typeof devices).should.equal('object');

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get the path to instruments binary', function callee$1$0() {
    var instrumentsPath;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_index2['default'].getInstrumentsPath());

        case 2:
          instrumentsPath = context$2$0.sent;

          should.exist(instrumentsPath);
          (typeof instrumentsPath).should.equal('string');
          instrumentsPath.length.should.be.above(3);
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(instrumentsPath));

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,