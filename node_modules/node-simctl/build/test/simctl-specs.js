/* global it:true, describe:true*/
'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

require('mochawait');

var _should = require('should');

var _should2 = _interopRequireDefault(_should);

var _es6Mapify = require('es6-mapify');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libSimctlJs = require('../lib/simctl.js');

require('source-map-support').install();

describe('simctl', function () {
  var randNum = parseInt(Math.random() * 100, 10);
  var randName = 'device' + randNum;
  var randDeviceUdid = null;
  var validSdks = [];

  it('should create a device', function callee$1$0() {
    var devices, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, list, udid;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 2:
          devices = context$2$0.sent;

          validSdks = _lodash2['default'].keys(devices);

          if (validSdks.length) {
            context$2$0.next = 6;
            break;
          }

          throw new Error('No valid SDKs');

        case 6:
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          context$2$0.prev = 9;
          _iterator = _getIterator((0, _es6Mapify.mapify)(devices).values());

        case 11:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            context$2$0.next = 18;
            break;
          }

          list = _step.value;

          if (!_lodash2['default'].contains(_lodash2['default'].pluck(list, 'name'), randName)) {
            context$2$0.next = 15;
            break;
          }

          throw new Error('Couldn\'t run test because device ' + randName + ' ' + 'already exists');

        case 15:
          _iteratorNormalCompletion = true;
          context$2$0.next = 11;
          break;

        case 18:
          context$2$0.next = 24;
          break;

        case 20:
          context$2$0.prev = 20;
          context$2$0.t0 = context$2$0['catch'](9);
          _didIteratorError = true;
          _iteratorError = context$2$0.t0;

        case 24:
          context$2$0.prev = 24;
          context$2$0.prev = 25;

          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }

        case 27:
          context$2$0.prev = 27;

          if (!_didIteratorError) {
            context$2$0.next = 30;
            break;
          }

          throw _iteratorError;

        case 30:
          return context$2$0.finish(27);

        case 31:
          return context$2$0.finish(24);

        case 32:
          context$2$0.next = 34;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)(randName, 'iPad Air', validSdks[0]));

        case 34:
          udid = context$2$0.sent;

          udid.should.be.an['instanceof'](String);
          udid.length.should.equal(36);

        case 37:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[9, 20, 24, 32], [25,, 27, 31]]);
  });

  it('should get devices', function callee$1$0() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)(validSdks[0]));

        case 2:
          sdkDevices = context$2$0.sent;

          _lodash2['default'].pluck(sdkDevices, 'name').should.containEql(randName);
          randDeviceUdid = sdkDevices.filter(function (d) {
            return d.name === randName;
          })[0].udid;

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should erase devices', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.eraseDevice)(randDeviceUdid));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should delete devices', function callee$1$0() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.deleteDevice)(randDeviceUdid));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)(validSdks[0]));

        case 4:
          sdkDevices = context$2$0.sent;

          _lodash2['default'].pluck(sdkDevices, 'name').should.not.containEql(randName);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should return a nice error for invalid usage', function callee$1$0() {
    var err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          err = null;
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('foo', 'bar', 'baz'));

        case 4:
          context$2$0.next = 9;
          break;

        case 6:
          context$2$0.prev = 6;
          context$2$0.t0 = context$2$0['catch'](1);

          err = context$2$0.t0;

        case 9:
          _should2['default'].exist(err);
          err.message.should.containEql('Invalid device type: bar');

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 6]]);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc2ltY3RsLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O1FBR08sV0FBVzs7c0JBQ0MsUUFBUTs7Ozt5QkFDSixZQUFZOztzQkFDckIsUUFBUTs7OzsyQkFDOEMsa0JBQWtCOztBQU50RixPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQzs7QUFReEMsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0FBQ3ZCLE1BQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hELE1BQUksUUFBUSxjQUFZLE9BQU8sQUFBRSxDQUFDO0FBQ2xDLE1BQUksY0FBYyxHQUFHLElBQUksQ0FBQztBQUMxQixNQUFJLFNBQVMsR0FBRyxFQUFFLENBQUM7O0FBRW5CLElBQUUsQ0FBQyx3QkFBd0IsRUFBRTtRQUN2QixPQUFPLGtGQUtGLElBQUksRUFNVCxJQUFJOzs7Ozs7MkNBWFksaUJBVDBCLFVBQVUsR0FTeEI7OztBQUE1QixpQkFBTzs7QUFDWCxtQkFBUyxHQUFHLG9CQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzs7Y0FDdkIsU0FBUyxDQUFDLE1BQU07Ozs7O2dCQUNiLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQzs7Ozs7OzttQ0FFakIsZUFoQlosTUFBTSxFQWdCYSxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUU7Ozs7Ozs7O0FBQWhDLGNBQUk7O2VBQ1Asb0JBQUUsUUFBUSxDQUFDLG9CQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQUUsUUFBUSxDQUFDOzs7OztnQkFDdkMsSUFBSSxLQUFLLENBQUMsdUNBQW9DLFFBQVEseUJBQzVCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkNBR3BCLGlCQXBCWixZQUFZLEVBb0JhLFFBQVEsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7QUFBN0QsY0FBSTs7QUFFUixjQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNyQyxjQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Ozs7Ozs7R0FDOUIsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxvQkFBb0IsRUFBRTtRQUNuQixVQUFVOzs7OzsyQ0FBUyxpQkEzQnVCLFVBQVUsRUEyQnRCLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7O0FBQTNDLG9CQUFVOztBQUNkLDhCQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4RCx3QkFBYyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDO21CQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssUUFBUTtXQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7R0FDeEUsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxzQkFBc0IsRUFBRTs7Ozs7MkNBQ25CLGlCQWpDMkIsV0FBVyxFQWlDMUIsY0FBYyxDQUFDOzs7Ozs7O0dBQ2xDLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsdUJBQXVCLEVBQUU7UUFFdEIsVUFBVTs7Ozs7MkNBRFIsaUJBckNhLFlBQVksRUFxQ1osY0FBYyxDQUFDOzs7OzJDQUNYLGlCQXRDdUIsVUFBVSxFQXNDdEIsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7QUFBM0Msb0JBQVU7O0FBQ2QsOEJBQUUsS0FBSyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs7OztHQUM3RCxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDhDQUE4QyxFQUFFO1FBQzdDLEdBQUc7Ozs7QUFBSCxhQUFHLEdBQUcsSUFBSTs7OzJDQUVOLGlCQTdDSCxZQUFZLEVBNkNJLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDOzs7Ozs7Ozs7O0FBRXZDLGFBQUcsaUJBQUksQ0FBQzs7O0FBRVYsOEJBQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLGFBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDOzs7Ozs7O0dBQzNELENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3NpbWN0bC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBpdDp0cnVlLCBkZXNjcmliZTp0cnVlKi9cbnJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcblxuaW1wb3J0ICdtb2NoYXdhaXQnO1xuaW1wb3J0IHNob3VsZCBmcm9tICdzaG91bGQnO1xuaW1wb3J0IHsgbWFwaWZ5IH0gZnJvbSAnZXM2LW1hcGlmeSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgY3JlYXRlRGV2aWNlLCBkZWxldGVEZXZpY2UsIGVyYXNlRGV2aWNlLCBnZXREZXZpY2VzIH0gZnJvbSAnLi4vbGliL3NpbWN0bC5qcyc7XG5cbmRlc2NyaWJlKCdzaW1jdGwnLCAoKSA9PiB7XG4gIGxldCByYW5kTnVtID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIDEwMCwgMTApO1xuICBsZXQgcmFuZE5hbWUgPSBgZGV2aWNlJHtyYW5kTnVtfWA7XG4gIGxldCByYW5kRGV2aWNlVWRpZCA9IG51bGw7XG4gIGxldCB2YWxpZFNka3MgPSBbXTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBhIGRldmljZScsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgZGV2aWNlcyA9IGF3YWl0IGdldERldmljZXMoKTtcbiAgICB2YWxpZFNka3MgPSBfLmtleXMoZGV2aWNlcyk7XG4gICAgaWYgKCF2YWxpZFNka3MubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB2YWxpZCBTREtzXCIpO1xuICAgIH1cbiAgICBmb3IgKGxldCBsaXN0IG9mIG1hcGlmeShkZXZpY2VzKS52YWx1ZXMoKSkge1xuICAgICAgaWYgKF8uY29udGFpbnMoXy5wbHVjayhsaXN0LCAnbmFtZScpLCByYW5kTmFtZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCBydW4gdGVzdCBiZWNhdXNlIGRldmljZSAke3JhbmROYW1lfSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgIGBhbHJlYWR5IGV4aXN0c2ApO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgdWRpZCA9IGF3YWl0IGNyZWF0ZURldmljZShyYW5kTmFtZSwgJ2lQYWQgQWlyJywgdmFsaWRTZGtzWzBdKTtcblxuICAgIHVkaWQuc2hvdWxkLmJlLmFuLmluc3RhbmNlb2YoU3RyaW5nKTtcbiAgICB1ZGlkLmxlbmd0aC5zaG91bGQuZXF1YWwoMzYpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCBkZXZpY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBzZGtEZXZpY2VzID0gYXdhaXQgZ2V0RGV2aWNlcyh2YWxpZFNka3NbMF0pO1xuICAgIF8ucGx1Y2soc2RrRGV2aWNlcywgJ25hbWUnKS5zaG91bGQuY29udGFpbkVxbChyYW5kTmFtZSk7XG4gICAgcmFuZERldmljZVVkaWQgPSBzZGtEZXZpY2VzLmZpbHRlcigoZCkgPT4gZC5uYW1lID09PSByYW5kTmFtZSlbMF0udWRpZDtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBlcmFzZSBkZXZpY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGVyYXNlRGV2aWNlKHJhbmREZXZpY2VVZGlkKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkZWxldGUgZGV2aWNlcycsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBkZWxldGVEZXZpY2UocmFuZERldmljZVVkaWQpO1xuICAgIGxldCBzZGtEZXZpY2VzID0gYXdhaXQgZ2V0RGV2aWNlcyh2YWxpZFNka3NbMF0pO1xuICAgIF8ucGx1Y2soc2RrRGV2aWNlcywgJ25hbWUnKS5zaG91bGQubm90LmNvbnRhaW5FcWwocmFuZE5hbWUpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiBhIG5pY2UgZXJyb3IgZm9yIGludmFsaWQgdXNhZ2UnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGVyciA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGNyZWF0ZURldmljZSgnZm9vJywgJ2JhcicsICdiYXonKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnIgPSBlO1xuICAgIH1cbiAgICBzaG91bGQuZXhpc3QoZXJyKTtcbiAgICBlcnIubWVzc2FnZS5zaG91bGQuY29udGFpbkVxbCgnSW52YWxpZCBkZXZpY2UgdHlwZTogYmFyJyk7XG4gIH0pO1xuXG59KTtcbiJdfQ==