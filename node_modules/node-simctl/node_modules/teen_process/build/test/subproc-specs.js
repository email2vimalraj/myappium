'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ = require('..');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _helpers = require('./helpers');

require('source-map-support').install();

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('SubProcess', function () {
  it('should throw an error if initialized without a command', function () {
    should['throw'](function () {
      new _.SubProcess();
    });
  });
  it('should throw an error if initialized with a bad command', function () {
    should['throw'](function () {
      new _.SubProcess({ lol: true });
    });
    should['throw'](function () {
      new _.SubProcess(1);
    });
  });
  it('should throw an error if initialized with bad args', function () {
    should['throw'](function () {
      new _.SubProcess('ls', 'foo');
    });
    should['throw'](function () {
      new _.SubProcess('ls', 1);
    });
    should['throw'](function () {
      new _.SubProcess('ls', {});
    });
  });
  it('should default args list to []', function () {
    var x = new _.SubProcess('ls');
    x.args.should.eql([]);
  });
  it('should default opts dict to {}', function () {
    var x = new _.SubProcess('ls');
    x.opts.should.eql({});
  });
  it('should pass opts to spawn', function callee$1$0() {
    var cwd, subproc, lines;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          cwd = _path2['default'].resolve(_helpers.getFixture('.'));
          subproc = new _.SubProcess('ls', [], { cwd: cwd });
          lines = [];

          subproc.on('lines-stdout', function (newLines) {
            lines = lines.concat(newLines);
          });
          context$2$0.next = 6;
          return subproc.start(0);

        case 6:
          context$2$0.next = 8;
          return _bluebird2['default'].delay(50);

        case 8:
          lines.should.include('bad_exit.sh');
          lines.should.contain('bigbuffer.js');
          lines.should.contain('echo.sh');

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  describe('#start', function () {
    it('should throw an error if command fails on startup', function callee$2$0() {
      var s;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            s = new _.SubProcess('blargimarg');
            context$3$0.next = 3;
            return s.start().should.eventually.be.rejectedWith(/ENOENT/);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should have a default startDetector of waiting for output', function callee$2$1() {
      var hasData, s;
      return _regeneratorRuntime.async(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            hasData = false;
            s = new _.SubProcess('ls');

            s.on('output', function (stdout) {
              if (stdout) {
                hasData = true;
              }
            });
            context$3$0.next = 5;
            return s.start();

          case 5:
            hasData.should.be['true'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should interpret a numeric startDetector as a start timeout', function callee$2$2() {
      var hasData, s;
      return _regeneratorRuntime.async(function callee$2$2$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            hasData = false;
            s = new _.SubProcess(_helpers.getFixture('sleepyproc.sh'), ['ls']);

            s.on('output', function (stdout) {
              if (stdout) {
                hasData = true;
              }
            });
            context$3$0.next = 5;
            return s.start(0);

          case 5:
            hasData.should.be['false'];
            context$3$0.next = 8;
            return _bluebird2['default'].delay(1200);

          case 8:
            hasData.should.be['true'];

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should fail even with a start timeout of 0 when command is bad', function callee$2$3() {
      var s;
      return _regeneratorRuntime.async(function callee$2$3$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            s = new _.SubProcess('blargimarg');
            context$3$0.next = 3;
            return s.start(0).should.eventually.be.rejectedWith(/ENOENT/);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to provide a custom startDetector function', function callee$2$4() {
      var sd, hasData, s;
      return _regeneratorRuntime.async(function callee$2$4$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sd = function sd(stdout) {
              return stdout;
            };

            hasData = false;
            s = new _.SubProcess('ls');

            s.on('output', function (stdout) {
              if (stdout) {
                hasData = true;
              }
            });
            context$3$0.next = 6;
            return s.start(sd);

          case 6:
            hasData.should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should pass on custom errors from startDetector', function callee$2$5() {
      var sd, s;
      return _regeneratorRuntime.async(function callee$2$5$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sd = function sd() {
              throw new Error('foo');
            };

            s = new _.SubProcess('ls');
            context$3$0.next = 4;
            return s.start(sd).should.eventually.be.rejectedWith(/foo/);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should time out starts that take longer than specified ms', function callee$2$6() {
      var sd, s, start;
      return _regeneratorRuntime.async(function callee$2$6$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sd = function sd(stdout) {
              return stdout.indexOf('nothere') !== -1;
            };

            s = new _.SubProcess('ls');
            start = Date.now();
            context$3$0.next = 5;
            return s.start(sd, 500).should.eventually.be.rejectedWith(/did not start.+time/i);

          case 5:
            (Date.now() - start).should.be.below(600);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('listening for data', function () {
    var subproc = undefined;
    it('should get output as params', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this2 = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return new _Promise(function callee$3$0(resolve) {
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    subproc = new _.SubProcess(_helpers.getFixture('sleepyproc.sh'), ['ls', _path2['default'].resolve(__dirname)]);
                    subproc.on('output', function (stdout) {
                      if (stdout && stdout.indexOf('subproc-specs') !== -1) {
                        resolve();
                      }
                    });
                    context$4$0.next = 4;
                    return subproc.start();

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this2);
            });

          case 2:
            context$3$0.next = 4;
            return subproc.stop();

          case 4:
            context$3$0.next = 6;
            return new _Promise(function callee$3$1(resolve) {
              return _regeneratorRuntime.async(function callee$3$1$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    subproc = new _.SubProcess(_helpers.getFixture('echo.sh'), ['foo', 'bar']);
                    subproc.on('output', function (stdout, stderr) {
                      if (stderr && stderr.indexOf('bar') !== -1) {
                        resolve();
                      }
                    });
                    context$4$0.next = 4;
                    return subproc.start();

                  case 4:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this2);
            });

          case 6:
            context$3$0.next = 8;
            return subproc.stop();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should get output by lines', function callee$2$1() {
      var lines;
      return _regeneratorRuntime.async(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            subproc = new _.SubProcess('ls', [_path2['default'].resolve(__dirname)]);
            lines = [];

            subproc.on('lines-stdout', function (newLines) {
              lines = lines.concat(newLines);
            });
            context$3$0.next = 5;
            return subproc.start(0);

          case 5:
            context$3$0.next = 7;
            return _bluebird2['default'].delay(50);

          case 7:
            lines.should.eql(['exec-specs.js', 'fixtures', 'helpers.js', 'subproc-specs.js']);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('#stop', function () {
    it('should send the right signal to stop a proc', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        var _this3 = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            return context$3$0.abrupt('return', new _Promise(function callee$3$0(resolve, reject) {
              var subproc;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    subproc = new _.SubProcess('tail', ['-f', _path2['default'].resolve(__filename)]);
                    context$4$0.next = 3;
                    return subproc.start();

                  case 3:
                    subproc.on('exit', function (code, signal) {
                      try {
                        signal.should.equal('SIGHUP');
                        resolve();
                      } catch (e) {
                        reject(e);
                      }
                    });
                    context$4$0.next = 6;
                    return subproc.stop('SIGHUP');

                  case 6:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this3);
            }));

          case 1:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should time out if stop doesnt complete fast enough', function callee$2$1() {
      var subproc;
      return _regeneratorRuntime.async(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            subproc = new _.SubProcess(_helpers.getFixture('traphup.sh'), ['tail', '-f', _path2['default'].resolve(__filename)]);
            context$3$0.next = 3;
            return subproc.start();

          case 3:
            context$3$0.next = 5;
            return subproc.stop('SIGHUP', 10).should.eventually.be.rejectedWith(/Process didn't end/);

          case 5:
            context$3$0.prev = 5;
            context$3$0.next = 8;
            return _.exec('kill', ['-9', subproc.proc.pid + 1]);

          case 8:
            context$3$0.next = 12;
            break;

          case 10:
            context$3$0.prev = 10;
            context$3$0.t2 = context$3$0['catch'](5);

          case 12:
            context$3$0.prev = 12;
            context$3$0.next = 15;
            return _.exec('kill', ['-9', subproc.proc.pid]);

          case 15:
            context$3$0.next = 19;
            break;

          case 17:
            context$3$0.prev = 17;
            context$3$0.t3 = context$3$0['catch'](12);

          case 19:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[5, 10], [12, 17]]);
    });

    it('should error if there is no process to stop', function callee$2$2() {
      var subproc;
      return _regeneratorRuntime.async(function callee$2$2$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            subproc = new _.SubProcess('ls');
            context$3$0.next = 3;
            return subproc.stop().should.eventually.be.rejectedWith(/Can't stop/);

          case 3:
            context$3$0.next = 5;
            return subproc.start();

          case 5:
            context$3$0.next = 7;
            return _bluebird2['default'].delay(10);

          case 7:
            context$3$0.next = 9;
            return subproc.stop().should.eventually.be.rejectedWith(/Can't stop/);

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('#join', function () {
    it('should fail if the #start has not yet been called', function callee$2$0() {
      var proc;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess(_helpers.getFixture('sleepyproc.sh'), ['ls']);
            context$3$0.next = 3;
            return proc.join().should.eventually.be.rejectedWith(/Can't join/);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should wait until the process has been finished', function callee$2$1() {
      var proc, now, diff;
      return _regeneratorRuntime.async(function callee$2$1$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess(_helpers.getFixture('sleepyproc.sh'), ['ls']);
            now = Date.now();
            context$3$0.next = 4;
            return proc.start(0);

          case 4:
            context$3$0.next = 6;
            return proc.join();

          case 6:
            diff = Date.now() - now;

            diff.should.be.above(1000);

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should throw if process ends with a invalid exitcode', function callee$2$2() {
      var proc;
      return _regeneratorRuntime.async(function callee$2$2$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess(_helpers.getFixture('bad_exit.sh'));
            context$3$0.next = 3;
            return proc.start(0);

          case 3:
            context$3$0.next = 5;
            return proc.join().should.eventually.be.rejectedWith(/Process ended with exitcode/);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    it('should NOT throw if process ends with a custom allowed exitcode', function callee$2$3() {
      var proc;
      return _regeneratorRuntime.async(function callee$2$3$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            proc = new _.SubProcess(_helpers.getFixture('bad_exit.sh'));
            context$3$0.next = 3;
            return proc.start(0);

          case 3:
            context$3$0.next = 5;
            return proc.join([1]).should.eventually.be.become(1);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});

// need to kill the process
// 1 for the trap, 1 for the tail
//# sourceMappingURL=data:application/json;base64,