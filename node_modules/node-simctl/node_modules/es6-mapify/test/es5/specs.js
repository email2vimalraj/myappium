"use strict";
var $__traceur_64_0_46_0_46_58_47_bin_47_traceur_45_runtime__,
    $__should__,
    $___46__46__47__46__46__47_lib_47_es5_47_main__;
($__traceur_64_0_46_0_46_58_47_bin_47_traceur_45_runtime__ = require("traceur/bin/traceur-runtime"), $__traceur_64_0_46_0_46_58_47_bin_47_traceur_45_runtime__ && $__traceur_64_0_46_0_46_58_47_bin_47_traceur_45_runtime__.__esModule && $__traceur_64_0_46_0_46_58_47_bin_47_traceur_45_runtime__ || {default: $__traceur_64_0_46_0_46_58_47_bin_47_traceur_45_runtime__});
var should = ($__should__ = require("should"), $__should__ && $__should__.__esModule && $__should__ || {default: $__should__}).default;
var $__1 = ($___46__46__47__46__46__47_lib_47_es5_47_main__ = require("../../lib/es5/main"), $___46__46__47__46__46__47_lib_47_es5_47_main__ && $___46__46__47__46__46__47_lib_47_es5_47_main__.__esModule && $___46__46__47__46__46__47_lib_47_es5_47_main__ || {default: $___46__46__47__46__46__47_lib_47_es5_47_main__}),
    mapify = $__1.mapify,
    demapify = $__1.demapify;
describe("mapify", (function() {
  it("should return a non-object as is", (function() {
    mapify(2).should.equal(2);
    mapify('hi').should.equal('hi');
    (typeof mapify(undefined)).should.eql('undefined');
    mapify([1, 2, 3]).should.eql([1, 2, 3]);
    should.ok(mapify(null) === null);
  }));
  it("should convert an empty object", (function() {
    var m = mapify({});
    (typeof m.get('foo')).should.equal('undefined');
  }));
  it("should convert a basic object", (function() {
    var m = mapify({a: 'b'});
    m.get('a').should.equal('b');
  }));
  it("should convert an object with multiple non-object types", (function() {
    var m = mapify({
      a: 'b',
      'foo-bar': 3,
      c: [1, "x", Array]
    });
    m.get('a').should.equal('b');
    m.get('foo-bar').should.equal(3);
    var c = m.get('c');
    c.should.have.length(3);
    c[0].should.eql(1);
    c[1].should.eql("x");
    (typeof(new c[2]())).should.equal('object');
  }));
  it("should convert an array with an embedded object", (function() {
    var a = mapify([1, {a: 'b'}, 2]);
    a[0].should.equal(1);
    a[2].should.equal(2);
    var m = a[1];
    should.ok(a[1] instanceof Map);
    m.get('a').should.equal('b');
  }));
  it("should convert a nested object", (function() {
    var m = mapify({
      a: {
        b: [1, {c: 'd'}],
        e: 'f'
      },
      g: true
    });
    var a = m.get('a');
    m.get('g').should.equal(true);
    a.get('b')[1].get('c').should.equal('d');
    a.get('e').should.equal('f');
  }));
}));
describe("demapify", (function() {
  it("should return a non-object as is", (function() {
    demapify(2).should.equal(2);
    demapify('hi').should.equal('hi');
    (typeof demapify(undefined)).should.eql('undefined');
    demapify([1, 2, 3]).should.eql([1, 2, 3]);
  }));
  it("should convert an empty map", (function() {
    var m = demapify(new Map());
    m.should.eql({});
    (typeof m.foo).should.equal('undefined');
  }));
  it("should convert a basic map", (function() {
    var m = new Map();
    m.set('a', 'b');
    demapify(m).should.eql({a: 'b'});
  }));
  it("should convert a map multiple non-object types", (function() {
    var m = new Map();
    m.set('a', 'b');
    m.set('foo-bar', 3);
    m.set('c', [1, "x", Array]);
    var d = demapify(m);
    d.a.should.equal('b');
    d['foo-bar'].should.equal(3);
    d.c.should.have.length(3);
    d.c[0].should.eql(1);
    d.c[1].should.eql("x");
    (typeof(new d.c[2]())).should.equal('object');
  }));
  it("should convert an array with an embedded map", (function() {
    var m = new Map();
    m.set('a', 'b');
    var a = demapify([1, m, 2]);
    a[0].should.equal(1);
    a[1].should.eql({a: 'b'});
    a[2].should.equal(2);
  }));
  it("should convert a nested object", (function() {
    var m = new Map();
    var m2 = new Map();
    var m3 = new Map();
    m3.set('c', 'd');
    m2.set('b', [1, m3]);
    m2.set('e', 'f');
    m.set('a', m2);
    m.set('g', true);
    var d = demapify(m);
    d.should.eql({
      a: {
        b: [1, {c: 'd'}],
        e: 'f'
      },
      g: true
    });
  }));
}));
