'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

exports.patchLogger = patchLogger;
exports.getLogger = getLogger;

var _npmlog = require('npmlog');

var _npmlog2 = _interopRequireDefault(_npmlog);

var npmLevels = ['silly', 'verbose', 'debug', 'info', 'http', 'warn', 'error'];
var mockLog = {};
var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(npmLevels), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var l = _step.value;

    mockLog[l] = function () {};
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

function patchLogger(logger) {
  if (!logger.debug) {
    logger.addLevel('debug', 1000, { fg: 'blue', bg: 'black' }, 'dbug');
  }
}

function _getLogger() {
  var testingMode = parseInt(process.env._TESTING, 10) === 1;
  var forceLogMode = parseInt(process.env._FORCE_LOGS, 10) === 1;
  var usingGlobalLog = !!global._global_npmlog;
  var logger = testingMode && !forceLogMode ? mockLog : global._global_npmlog || _npmlog2['default'];
  patchLogger(logger);
  return [logger, usingGlobalLog];
}

function getLogger() {
  var prefix = arguments[0] === undefined ? null : arguments[0];

  var _getLogger2 = _getLogger();

  var _getLogger22 = _slicedToArray(_getLogger2, 2);

  var logger = _getLogger22[0];
  var usingGlobalLog = _getLogger22[1];

  var wrappedLogger = { unwrap: function unwrap() {
      return logger;
    } };
  _Object$defineProperty(wrappedLogger, 'level', {
    get: function get() {
      return logger.level;
    },
    set: function set(newValue) {
      logger.level = newValue;
    },
    enumerable: true,
    configurable: true
  });
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(npmLevels), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var k = _step2.value;

      wrappedLogger[k] = logger[k].bind(logger, prefix);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  wrappedLogger.errorAndThrow = function (err) {
    if (!(err instanceof Error)) {
      err = new Error(err);
    }
    this.error(err);
    throw err;
  };
  if (!usingGlobalLog) {
    // if we're not using a global log specified from some top-level package,
    // set the log level to a default of verbose. Otherwise, let the top-level
    // package set the log level
    wrappedLogger.level = 'verbose';
  }
  wrappedLogger.levels = npmLevels;
  return wrappedLogger;
}

var log = getLogger();

exports['default'] = log;
//# sourceMappingURL=data:application/json;base64,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QUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7QUFDakMsU0FBTyxhQUFhLENBQUM7Q0FDdEI7O0FBRUQsSUFBTSxHQUFHLEdBQUcsU0FBUyxFQUFFLENBQUM7O3FCQUVULEdBQUciLCJmaWxlIjoibGliL2xvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBucG1sb2cgZnJvbSAnbnBtbG9nJztcblxuY29uc3QgbnBtTGV2ZWxzID0gWydzaWxseScsICd2ZXJib3NlJywgJ2RlYnVnJywgJ2luZm8nLCAnaHR0cCcsICd3YXJuJywgJ2Vycm9yJ107XG5sZXQgbW9ja0xvZyA9IHt9O1xuZm9yIChsZXQgbCBvZiBucG1MZXZlbHMpIHtcbiAgbW9ja0xvZ1tsXSA9ICgpID0+IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGF0Y2hMb2dnZXIobG9nZ2VyKSB7XG4gIGlmICghbG9nZ2VyLmRlYnVnKSB7XG4gICAgbG9nZ2VyLmFkZExldmVsKCdkZWJ1ZycsIDEwMDAsIHsgZmc6ICdibHVlJywgYmc6ICdibGFjaycgfSwgJ2RidWcnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfZ2V0TG9nZ2VyICgpIHtcbiAgY29uc3QgdGVzdGluZ01vZGUgPSBwYXJzZUludChwcm9jZXNzLmVudi5fVEVTVElORywgMTApID09PSAxO1xuICBjb25zdCBmb3JjZUxvZ01vZGUgPSBwYXJzZUludChwcm9jZXNzLmVudi5fRk9SQ0VfTE9HUywgMTApID09PSAxO1xuICBjb25zdCB1c2luZ0dsb2JhbExvZyA9ICEhZ2xvYmFsLl9nbG9iYWxfbnBtbG9nO1xuICBsZXQgbG9nZ2VyID0gKHRlc3RpbmdNb2RlICYmICFmb3JjZUxvZ01vZGUpID8gbW9ja0xvZyA6XG4gICAgKGdsb2JhbC5fZ2xvYmFsX25wbWxvZyB8fCBucG1sb2cpO1xuICBwYXRjaExvZ2dlcihsb2dnZXIpO1xuICByZXR1cm4gW2xvZ2dlciwgdXNpbmdHbG9iYWxMb2ddO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nZ2VyKHByZWZpeCA9IG51bGwpIHtcbiAgbGV0IFtsb2dnZXIsIHVzaW5nR2xvYmFsTG9nXSA9IF9nZXRMb2dnZXIoKTtcbiAgbGV0IHdyYXBwZWRMb2dnZXIgPSB7dW53cmFwOiAoKSA9PiB7IHJldHVybiBsb2dnZXI7fSB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkod3JhcHBlZExvZ2dlciwgJ2xldmVsJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbG9nZ2VyLmxldmVsOyB9LFxuICAgIHNldDogZnVuY3Rpb24gKG5ld1ZhbHVlKSB7IGxvZ2dlci5sZXZlbCA9IG5ld1ZhbHVlOyB9LFxuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xuICBmb3IobGV0IGsgb2YgbnBtTGV2ZWxzKSB7XG4gICAgd3JhcHBlZExvZ2dlcltrXSA9IGxvZ2dlcltrXS5iaW5kKGxvZ2dlciwgcHJlZml4KTtcbiAgfVxuICB3cmFwcGVkTG9nZ2VyLmVycm9yQW5kVGhyb3cgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKCEoZXJyIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICBlcnIgPSBuZXcgRXJyb3IoZXJyKTtcbiAgICB9XG4gICAgdGhpcy5lcnJvcihlcnIpO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgaWYgKCF1c2luZ0dsb2JhbExvZykge1xuICAgIC8vIGlmIHdlJ3JlIG5vdCB1c2luZyBhIGdsb2JhbCBsb2cgc3BlY2lmaWVkIGZyb20gc29tZSB0b3AtbGV2ZWwgcGFja2FnZSxcbiAgICAvLyBzZXQgdGhlIGxvZyBsZXZlbCB0byBhIGRlZmF1bHQgb2YgdmVyYm9zZS4gT3RoZXJ3aXNlLCBsZXQgdGhlIHRvcC1sZXZlbFxuICAgIC8vIHBhY2thZ2Ugc2V0IHRoZSBsb2cgbGV2ZWxcbiAgICB3cmFwcGVkTG9nZ2VyLmxldmVsID0gJ3ZlcmJvc2UnO1xuICB9XG4gIHdyYXBwZWRMb2dnZXIubGV2ZWxzID0gbnBtTGV2ZWxzO1xuICByZXR1cm4gd3JhcHBlZExvZ2dlcjtcbn1cblxuY29uc3QgbG9nID0gZ2V0TG9nZ2VyKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGxvZztcbiJdfQ==