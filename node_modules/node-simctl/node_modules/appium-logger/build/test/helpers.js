'use strict';

var _Object$defineProperty = require('babel-runtime/core-js/object/define-property')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

_Object$defineProperty(exports, '__esModule', {
  value: true
});

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libLogger = require('../lib/logger');

_chai2['default'].should();

function setupWriters() {
  return { 'stdout': _sinon2['default'].spy(process.stdout, 'write'),
    'stderr': _sinon2['default'].spy(process.stderr, 'write') };
}

function getDynamicLogger(testingMode, forceLogs) {
  var prefix = arguments[2] === undefined ? null : arguments[2];

  process.env._TESTING = testingMode ? '1' : '0';
  process.env._FORCE_LOGS = forceLogs ? '1' : '0';
  return (0, _libLogger.getLogger)(prefix);
}

function restoreWriters(writers) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(_lodash2['default'].values(writers)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var w = _step.value;

      w.restore();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

function assertOutputContains(writers, output) {
  var someoneHadOutput = false;
  var matchOutput = _sinon2['default'].match(function (value) {
    return value && value.indexOf(output) >= 0;
  }, 'matchOutput');

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(_lodash2['default'].values(writers)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var w = _step2.value;

      if (w.calledWith) {
        someoneHadOutput = w.calledWithMatch(matchOutput);
        if (someoneHadOutput) break;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  if (!someoneHadOutput) {
    throw new Error('Expected someone to have been called with: \'' + output + '\'');
  }
}

function assertOutputDoesntContain(writers, output) {
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = _getIterator(_lodash2['default'].values(writers)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var w = _step3.value;

      _lodash2['default'].flatten(w.args).should.not.contain(output);
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3['return']) {
        _iterator3['return']();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
}

exports.setupWriters = setupWriters;
exports.restoreWriters = restoreWriters;
exports.assertOutputContains = assertOutputContains;
exports.assertOutputDoesntContain = assertOutputDoesntContain;
exports.getDynamicLogger = getDynamicLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7b0JBQWlCLE1BQU07Ozs7cUJBQ0wsT0FBTzs7OztzQkFDWCxRQUFROzs7O3lCQUNJLGVBQWU7O0FBQ3pDLGtCQUFLLE1BQU0sRUFBRSxDQUFDOztBQUVkLFNBQVMsWUFBWSxHQUFJO0FBQ3ZCLFNBQU8sRUFBQyxRQUFRLEVBQUUsbUJBQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDO0FBQzVDLFlBQVEsRUFBRSxtQkFBTSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBQyxDQUFDO0NBQ3ZEOztBQUVELFNBQVMsZ0JBQWdCLENBQUUsV0FBVyxFQUFFLFNBQVMsRUFBZTtNQUFiLE1BQU0sZ0NBQUMsSUFBSTs7QUFDNUQsU0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsV0FBVyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDL0MsU0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsU0FBUyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDaEQsU0FBTyxlQVhBLFNBQVMsRUFXQyxNQUFNLENBQUMsQ0FBQztDQUMxQjs7QUFFRCxTQUFTLGNBQWMsQ0FBRSxPQUFPLEVBQUU7Ozs7OztBQUNoQyxzQ0FBYyxvQkFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLDRHQUFFO1VBQXhCLENBQUM7O0FBQ1IsT0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ2I7Ozs7Ozs7Ozs7Ozs7OztDQUNGOztBQUVELFNBQVMsb0JBQW9CLENBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtBQUM5QyxNQUFJLGdCQUFnQixHQUFHLEtBQUssQ0FBQztBQUM3QixNQUFJLFdBQVcsR0FBRyxtQkFBTSxLQUFLLENBQUMsVUFBVSxLQUFLLEVBQUU7QUFDN0MsV0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7R0FDNUMsRUFBRSxhQUFhLENBQUMsQ0FBQzs7Ozs7OztBQUVsQix1Q0FBYyxvQkFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGlIQUFFO1VBQXhCLENBQUM7O0FBQ1IsVUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFO0FBQ2hCLHdCQUFnQixHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbEQsWUFBSSxnQkFBZ0IsRUFBRSxNQUFNO09BQzdCO0tBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDRCxNQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDckIsVUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBOEMsR0FBRyxNQUFNLEdBQUcsSUFBRyxDQUFDLENBQUM7R0FDaEY7Q0FDRjs7QUFFRCxTQUFTLHlCQUF5QixDQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUU7Ozs7OztBQUNuRCx1Q0FBYyxvQkFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLGlIQUFFO1VBQXhCLENBQUM7O0FBQ1IsMEJBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM5Qzs7Ozs7Ozs7Ozs7Ozs7O0NBQ0Y7O1FBRVEsWUFBWSxHQUFaLFlBQVk7UUFBRSxjQUFjLEdBQWQsY0FBYztRQUFFLG9CQUFvQixHQUFwQixvQkFBb0I7UUFDbEQseUJBQXlCLEdBQXpCLHlCQUF5QjtRQUFFLGdCQUFnQixHQUFoQixnQkFBZ0IiLCJmaWxlIjoidGVzdC9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJy4uL2xpYi9sb2dnZXInO1xuY2hhaS5zaG91bGQoKTtcblxuZnVuY3Rpb24gc2V0dXBXcml0ZXJzICgpIHtcbiAgcmV0dXJuIHsnc3Rkb3V0Jzogc2lub24uc3B5KHByb2Nlc3Muc3Rkb3V0LCAnd3JpdGUnKSxcbiAgICAgICAgICAnc3RkZXJyJzogc2lub24uc3B5KHByb2Nlc3Muc3RkZXJyLCAnd3JpdGUnKX07XG59XG5cbmZ1bmN0aW9uIGdldER5bmFtaWNMb2dnZXIgKHRlc3RpbmdNb2RlLCBmb3JjZUxvZ3MsIHByZWZpeD1udWxsKSB7XG4gIHByb2Nlc3MuZW52Ll9URVNUSU5HID0gdGVzdGluZ01vZGUgPyAnMScgOiAnMCc7XG4gIHByb2Nlc3MuZW52Ll9GT1JDRV9MT0dTID0gZm9yY2VMb2dzID8gJzEnIDogJzAnO1xuICByZXR1cm4gZ2V0TG9nZ2VyKHByZWZpeCk7XG59XG5cbmZ1bmN0aW9uIHJlc3RvcmVXcml0ZXJzICh3cml0ZXJzKSB7XG4gIGZvciAobGV0IHcgb2YgXy52YWx1ZXMod3JpdGVycykpIHtcbiAgICB3LnJlc3RvcmUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPdXRwdXRDb250YWlucyAod3JpdGVycywgb3V0cHV0KSB7XG4gIGxldCBzb21lb25lSGFkT3V0cHV0ID0gZmFsc2U7XG4gIGxldCBtYXRjaE91dHB1dCA9IHNpbm9uLm1hdGNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5pbmRleE9mKG91dHB1dCkgPj0gMDtcbiAgfSwgXCJtYXRjaE91dHB1dFwiKTtcblxuICBmb3IgKGxldCB3IG9mIF8udmFsdWVzKHdyaXRlcnMpKSB7XG4gICAgaWYgKHcuY2FsbGVkV2l0aCkge1xuICAgICAgc29tZW9uZUhhZE91dHB1dCA9IHcuY2FsbGVkV2l0aE1hdGNoKG1hdGNoT3V0cHV0KTtcbiAgICAgIGlmIChzb21lb25lSGFkT3V0cHV0KSBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKCFzb21lb25lSGFkT3V0cHV0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgc29tZW9uZSB0byBoYXZlIGJlZW4gY2FsbGVkIHdpdGg6ICdcIiArIG91dHB1dCArIFwiJ1wiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRPdXRwdXREb2VzbnRDb250YWluICh3cml0ZXJzLCBvdXRwdXQpIHtcbiAgZm9yIChsZXQgdyBvZiBfLnZhbHVlcyh3cml0ZXJzKSkge1xuICAgIF8uZmxhdHRlbih3LmFyZ3MpLnNob3VsZC5ub3QuY29udGFpbihvdXRwdXQpO1xuICB9XG59XG5cbmV4cG9ydCB7IHNldHVwV3JpdGVycywgcmVzdG9yZVdyaXRlcnMsIGFzc2VydE91dHB1dENvbnRhaW5zLFxuICAgICAgICAgYXNzZXJ0T3V0cHV0RG9lc250Q29udGFpbiwgZ2V0RHluYW1pY0xvZ2dlciB9O1xuIl19