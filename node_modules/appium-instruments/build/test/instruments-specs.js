require('source-map-support').install();

'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this2 = this;

var _ = require('..');

var _teen_process = require('teen_process');

var tp = _interopRequireWildcard(_teen_process);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

_chai2['default'].should();

var P = _Promise;
var XCODE_VERSION = {
  versionString: '7.1.1',
  versionFloat: 7.1,
  major: 7,
  minor: 1,
  patch: 1
};

describe('instruments', function () {
  describe('quickInstrument', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          it('should create instruments', function callee$2$0() {
            var opts, instruments;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  opts = {
                    app: '/a/b/c/my.app'
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap(_.Instruments.quickInstruments(opts));

                case 3:
                  instruments = context$3$0.sent;

                  instruments.app.should.equal(opts.app);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  describe('constructor', function () {
    it('should create instruments', function () {
      var opts = {
        app: '/a/b/c/my.app'
      };
      var instruments = new _.Instruments(opts);
      instruments.app.should.equal(opts.app);
    });
  });
  describe('configure', (0, _appiumTestSupport.withMocks)({ xcode: _appiumXcode2['default'], utils: _.utils }, function (mocks) {
    it('should work', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = new _.Instruments({});

            mocks.xcode.expects('getVersion').once().returns(P.resolve(XCODE_VERSION));
            mocks.xcode.expects('getAutomationTraceTemplatePath').once().returns(P.resolve('/a/b/c/d/tracetemplate'));
            mocks.utils.expects('getInstrumentsPath').once().returns(P.resolve('/a/b/c/instrumentspath'));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(instruments.configure());

          case 6:
            instruments.xcodeVersion.versionString.should.equal(XCODE_VERSION.versionString);
            instruments.template.should.equal('/a/b/c/d/tracetemplate');
            instruments.instrumentsPath.should.equal('/a/b/c/instrumentspath');
            (0, _appiumTestSupport.verify)(mocks);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  }));
  describe('spawnInstruments', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs, tp: tp, utils: _.utils }, function (mocks) {
    it('should work', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = new _.Instruments({});

            instruments.xcodeVersion = XCODE_VERSION;
            instruments.template = '/a/b/c/d/tracetemplate';
            instruments.instrumentsPath = '/a/b/c/instrumentspath';
            mocks.fs.expects('exists').once().returns(P.resolve(false));
            mocks.tp.expects('spawn').once().returns({});
            mocks.utils.expects('getIwdPath').once().returns(_Promise.resolve('/a/b/c/iwd'));
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 9:
            (0, _appiumTestSupport.verify)(mocks);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaW5zdHJ1bWVudHMtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Z0JBRTRCLElBQUk7OzRCQUVaLGNBQWM7O0lBQXRCLEVBQUU7O29CQUNHLE1BQU07Ozs7MkJBQ0wsY0FBYzs7OztpQ0FDRSxxQkFBcUI7OzZCQUNwQyxnQkFBZ0I7O0FBQ25DLGtCQUFLLE1BQU0sRUFBRSxDQUFDOztBQUVkLElBQUksQ0FBQyxXQUFVLENBQUM7QUFDaEIsSUFBTSxhQUFhLEdBQUc7QUFDcEIsZUFBYSxFQUFFLE9BQU87QUFDdEIsY0FBWSxFQUFFLEdBQUc7QUFDakIsT0FBSyxFQUFFLENBQUM7QUFDUixPQUFLLEVBQUUsQ0FBQztBQUNSLE9BQUssRUFBRSxDQUFDO0NBQ1QsQ0FBQzs7QUFFRixRQUFRLENBQUMsYUFBYSxFQUFFLFlBQU07QUFDNUIsVUFBUSxDQUFDLGlCQUFpQixFQUFFOzs7Ozs7QUFDMUIsWUFBRSxDQUFDLDJCQUEyQixFQUFFO2dCQUMxQixJQUFJLEVBR0osV0FBVzs7OztBQUhYLHNCQUFJLEdBQUc7QUFDVCx1QkFBRyxFQUFFLGVBQWU7bUJBQ3JCOzttREFDdUIsY0FBWSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7OztBQUF0RCw2QkFBVzs7QUFDZiw2QkFBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Ozs7OztXQUN4QyxDQUFDLENBQUM7Ozs7Ozs7R0FDSixDQUFDLENBQUM7QUFDSCxVQUFRLENBQUMsYUFBYSxFQUFFLFlBQU07QUFDNUIsTUFBRSxDQUFDLDJCQUEyQixFQUFFLFlBQU07QUFDcEMsVUFBSSxJQUFJLEdBQUc7QUFDVCxXQUFHLEVBQUUsZUFBZTtPQUNyQixDQUFDO0FBQ0YsVUFBSSxXQUFXLEdBQUcsa0JBQWdCLElBQUksQ0FBQyxDQUFDO0FBQ3hDLGlCQUFXLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3hDLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQztBQUNILFVBQVEsQ0FBQyxXQUFXLEVBQUUsa0NBQVUsRUFBQyxLQUFLLDBCQUFBLEVBQUUsS0FBSyxTQUFBLEVBQUMsRUFBRSxVQUFDLEtBQUssRUFBSztBQUN6RCxNQUFFLENBQUMsYUFBYSxFQUFFO1VBQ1osV0FBVzs7OztBQUFYLHVCQUFXLEdBQUcsa0JBQWdCLEVBQUUsQ0FBQzs7QUFDckMsaUJBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDM0UsaUJBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQzVFLHdCQUF3QixDQUFDLENBQUMsQ0FBQztBQUM3QixpQkFBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDaEUsd0JBQXdCLENBQUMsQ0FBQyxDQUFDOzs2Q0FDdkIsV0FBVyxDQUFDLFNBQVMsRUFBRTs7O0FBQzdCLHVCQUFXLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqRix1QkFBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDNUQsdUJBQVcsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQ25FLDJDQUFPLEtBQUssQ0FBQyxDQUFDOzs7Ozs7O0tBQ2YsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDLENBQUM7QUFDSixVQUFRLENBQUMsa0JBQWtCLEVBQUUsa0NBQVUsRUFBQyxFQUFFLG1CQUFBLEVBQUUsRUFBRSxFQUFGLEVBQUUsRUFBRSxLQUFLLFNBQUEsRUFBQyxFQUFFLFVBQUMsS0FBSyxFQUFLO0FBQ2pFLE1BQUUsQ0FBQyxhQUFhLEVBQUU7VUFDWixXQUFXOzs7O0FBQVgsdUJBQVcsR0FBRyxrQkFBZ0IsRUFBRSxDQUFDOztBQUNyQyx1QkFBVyxDQUFDLFlBQVksR0FBRyxhQUFhLENBQUM7QUFDekMsdUJBQVcsQ0FBQyxRQUFRLEdBQUcsd0JBQXdCLENBQUM7QUFDaEQsdUJBQVcsQ0FBQyxlQUFlLEdBQUcsd0JBQXdCLENBQUM7QUFDdkQsaUJBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDNUQsaUJBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxpQkFBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVEsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7OzZDQUMxRSxXQUFXLENBQUMsZ0JBQWdCLEVBQUU7OztBQUNwQywyQ0FBTyxLQUFLLENBQUMsQ0FBQzs7Ozs7OztLQUNmLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQyxDQUFDO0NBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvaW5zdHJ1bWVudHMtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IHsgSW5zdHJ1bWVudHMgfSBmcm9tICcuLic7XG5pbXBvcnQgeyB1dGlscyB9IGZyb20gJy4uJztcbmltcG9ydCAqIGFzIHRwIGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCB4Y29kZSBmcm9tICdhcHBpdW0teGNvZGUnO1xuaW1wb3J0IHsgd2l0aE1vY2tzLCB2ZXJpZnkgfSBmcm9tICdhcHBpdW0tdGVzdC1zdXBwb3J0JztcbmltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuY2hhaS5zaG91bGQoKTtcblxubGV0IFAgPSBQcm9taXNlO1xuY29uc3QgWENPREVfVkVSU0lPTiA9IHtcbiAgdmVyc2lvblN0cmluZzogJzcuMS4xJyxcbiAgdmVyc2lvbkZsb2F0OiA3LjEsXG4gIG1ham9yOiA3LFxuICBtaW5vcjogMSxcbiAgcGF0Y2g6IDFcbn07XG5cbmRlc2NyaWJlKCdpbnN0cnVtZW50cycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ3F1aWNrSW5zdHJ1bWVudCcsIGFzeW5jICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBpbnN0cnVtZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBvcHRzID0ge1xuICAgICAgICBhcHA6ICcvYS9iL2MvbXkuYXBwJyxcbiAgICAgIH07XG4gICAgICBsZXQgaW5zdHJ1bWVudHMgPSBhd2FpdCBJbnN0cnVtZW50cy5xdWlja0luc3RydW1lbnRzKG9wdHMpO1xuICAgICAgaW5zdHJ1bWVudHMuYXBwLnNob3VsZC5lcXVhbChvcHRzLmFwcCk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnY29uc3RydWN0b3InLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgaW5zdHJ1bWVudHMnLCAoKSA9PiB7XG4gICAgICBsZXQgb3B0cyA9IHtcbiAgICAgICAgYXBwOiAnL2EvYi9jL215LmFwcCcsXG4gICAgICB9O1xuICAgICAgbGV0IGluc3RydW1lbnRzID0gbmV3IEluc3RydW1lbnRzKG9wdHMpO1xuICAgICAgaW5zdHJ1bWVudHMuYXBwLnNob3VsZC5lcXVhbChvcHRzLmFwcCk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnY29uZmlndXJlJywgd2l0aE1vY2tzKHt4Y29kZSwgdXRpbHN9LCAobW9ja3MpID0+IHtcbiAgICBpdCgnc2hvdWxkIHdvcmsnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgaW5zdHJ1bWVudHMgPSBuZXcgSW5zdHJ1bWVudHMoe30pO1xuICAgICAgbW9ja3MueGNvZGUuZXhwZWN0cygnZ2V0VmVyc2lvbicpLm9uY2UoKS5yZXR1cm5zKFAucmVzb2x2ZShYQ09ERV9WRVJTSU9OKSk7XG4gICAgICBtb2Nrcy54Y29kZS5leHBlY3RzKCdnZXRBdXRvbWF0aW9uVHJhY2VUZW1wbGF0ZVBhdGgnKS5vbmNlKCkucmV0dXJucyhQLnJlc29sdmUoXG4gICAgICAgICcvYS9iL2MvZC90cmFjZXRlbXBsYXRlJykpO1xuICAgICAgbW9ja3MudXRpbHMuZXhwZWN0cygnZ2V0SW5zdHJ1bWVudHNQYXRoJykub25jZSgpLnJldHVybnMoUC5yZXNvbHZlKFxuICAgICAgICAnL2EvYi9jL2luc3RydW1lbnRzcGF0aCcpKTtcbiAgICAgIGF3YWl0IGluc3RydW1lbnRzLmNvbmZpZ3VyZSgpO1xuICAgICAgaW5zdHJ1bWVudHMueGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmcuc2hvdWxkLmVxdWFsKFhDT0RFX1ZFUlNJT04udmVyc2lvblN0cmluZyk7XG4gICAgICBpbnN0cnVtZW50cy50ZW1wbGF0ZS5zaG91bGQuZXF1YWwoJy9hL2IvYy9kL3RyYWNldGVtcGxhdGUnKTtcbiAgICAgIGluc3RydW1lbnRzLmluc3RydW1lbnRzUGF0aC5zaG91bGQuZXF1YWwoJy9hL2IvYy9pbnN0cnVtZW50c3BhdGgnKTtcbiAgICAgIHZlcmlmeShtb2Nrcyk7XG4gICAgfSk7XG4gIH0pKTtcbiAgZGVzY3JpYmUoJ3NwYXduSW5zdHJ1bWVudHMnLCB3aXRoTW9ja3Moe2ZzLCB0cCwgdXRpbHN9LCAobW9ja3MpID0+IHtcbiAgICBpdCgnc2hvdWxkIHdvcmsnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgaW5zdHJ1bWVudHMgPSBuZXcgSW5zdHJ1bWVudHMoe30pO1xuICAgICAgaW5zdHJ1bWVudHMueGNvZGVWZXJzaW9uID0gWENPREVfVkVSU0lPTjtcbiAgICAgIGluc3RydW1lbnRzLnRlbXBsYXRlID0gJy9hL2IvYy9kL3RyYWNldGVtcGxhdGUnO1xuICAgICAgaW5zdHJ1bWVudHMuaW5zdHJ1bWVudHNQYXRoID0gJy9hL2IvYy9pbnN0cnVtZW50c3BhdGgnO1xuICAgICAgbW9ja3MuZnMuZXhwZWN0cygnZXhpc3RzJykub25jZSgpLnJldHVybnMoUC5yZXNvbHZlKGZhbHNlKSk7XG4gICAgICBtb2Nrcy50cC5leHBlY3RzKCdzcGF3bicpLm9uY2UoKS5yZXR1cm5zKHt9KTtcbiAgICAgIG1vY2tzLnV0aWxzLmV4cGVjdHMoJ2dldEl3ZFBhdGgnKS5vbmNlKCkucmV0dXJucyhQcm9taXNlLnJlc29sdmUoJy9hL2IvYy9pd2QnKSk7XG4gICAgICBhd2FpdCBpbnN0cnVtZW50cy5zcGF3bkluc3RydW1lbnRzKCk7XG4gICAgICB2ZXJpZnkobW9ja3MpO1xuICAgIH0pO1xuICB9KSk7XG59KTtcbiJdfQ==