require('source-map-support').install();

'use strict';

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('..');

var _teen_process = require('teen_process');

var tp = _interopRequireWildcard(_teen_process);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

_chai2['default'].should();

var P = _Promise;

describe('utils', function () {
  describe('getInstrumentsPath', (0, _appiumTestSupport.withMocks)({ tp: tp }, function (mocks) {
    it('should retrieve path', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.tp.expects('exec').once().returns(P.resolve({ stdout: '/a/b/c/d\n', stderr: '' }));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_.utils.getInstrumentsPath());

          case 3:
            context$3$0.sent.should.equal('/a/b/c/d');

            (0, _appiumTestSupport.verify)(mocks);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getAvailableDevices', (0, _appiumTestSupport.withMocks)({ tp: tp }, function (mocks) {
    it('should work', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.tp.expects('exec').once().returns(P.resolve({ stdout: '/a/b/c/d\n', stderr: '' }));
            mocks.tp.expects('exec').once().returns(P.resolve({ stdout: 'iphone1\niphone2\niphone3', stderr: '' }));
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_.utils.getAvailableDevices());

          case 4:
            context$3$0.t0 = ['iphone1', 'iphone2', 'iphone3'];
            context$3$0.sent.should.deep.equal(context$3$0.t0);

            (0, _appiumTestSupport.verify)(mocks);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('killAllInstruments', (0, _appiumTestSupport.withMocks)({ tp: tp }, function (mocks) {
    it('should work', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.tp.expects('exec').once().returns(P.resolve({ stdout: '', stderr: '' }));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_.utils.killAllInstruments());

          case 3:
            (0, _appiumTestSupport.verify)(mocks);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('cleanAllTraces', (0, _appiumTestSupport.withMocks)({ tp: tp }, function (mocks) {
    (0, _appiumTestSupport.stubEnv)();
    it('should work', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            process.env.CLEAN_TRACES = 1;
            mocks.tp.expects('exec').once().returns(P.resolve({ stdout: '', stderr: '' }));
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(_.utils.cleanAllTraces());

          case 4:
            (0, _appiumTestSupport.verify)(mocks);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('parseLaunchTimeout', function () {
    (0, _appiumTestSupport.stubEnv)();
    it('should work', function () {
      _.utils.parseLaunchTimeout(90000).should.deep.equal({
        global: 90000 });
      _.utils.parseLaunchTimeout('90000').should.deep.equal({
        global: 90000 });
      _.utils.parseLaunchTimeout({ global: 90000, afterLaunch: 30000 }).should.deep.equal({
        global: 90000, afterLaunch: 30000 });
      _.utils.parseLaunchTimeout('{"global": 90000, "afterLaunch": 30000}').should.deep.equal({
        global: 90000, afterLaunch: 30000 });
    });
  });
  describe('getIwdPath', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs }, function (mocks) {
    it('should work when path is found', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects('exists').once().returns(P.resolve(true));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_.utils.getIwdPath('10'));

          case 3:
            context$3$0.sent.should.match(/.*thirdparty\/iwd10/);

            (0, _appiumTestSupport.verify)(mocks);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should work when path is not found', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects('exists').once().returns(P.resolve(false));
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(_.utils.getIwdPath('10'));

          case 3:
            context$3$0.sent.should.match(/.*thirdparty\/iwd/);

            (0, _appiumTestSupport.verify)(mocks);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;base64,