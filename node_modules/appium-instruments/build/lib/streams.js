'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _through = require('through');

var _through2 = _interopRequireDefault(_through);

function clearBufferChars(output) {
  // Instruments output is buffered, so for each log output we also output
  // a stream of very many ****. This function strips those out so all we
  // get is the log output we care about
  var re = /(\n|^)\*+\n?/g;
  output = output.toString();
  output = output.replace(re, "");
  return output;
}

function outputStream() {
  return (0, _through2['default'])(function outputStreamHandler(output) {
    output = clearBufferChars(output);

    // if we have multiple log lines, indent non-first ones
    if (output !== '') {
      output = output.replace(/\n$/m, '');
      output = output.replace(/\n/m, '\n       ');
      output = '[INST] ' + output;
      output = output.green;
      _logger2['default'].debug(output);
    }
    this.queue(output);
  });
}

function errorStream() {
  return (0, _through2['default'])(function (output) {
    output = output.replace(/\n$/m, '');
    this.queue(output);

    output = '[INST STDERR] ' + output;
    output = output.yellow;
    _logger2['default'].debug(output);
  });
}

function webSocketAlertStream(webSocket) {
  return (0, _through2['default'])(function (output) {
    if (webSocket) {
      var re = /Call to onAlert returned 'YES'/;
      var match = re.test(output);
      if (match) {
        _logger2['default'].debug('Emiting alert message...');
        webSocket.sockets.emit('alert', { message: output });
      }
    }
    this.queue(output);
  });
}

function dumpStream() {
  return (0, _through2['default'])(function () {});
}

exports.outputStream = outputStream;
exports.errorStream = errorStream;
exports.webSocketAlertStream = webSocketAlertStream;
exports.dumpStream = dumpStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zdHJlYW1zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O3NCQUFnQixVQUFVOzs7O3VCQUNOLFNBQVM7Ozs7QUFHN0IsU0FBUyxnQkFBZ0IsQ0FBRSxNQUFNLEVBQUU7Ozs7QUFJakMsTUFBSSxFQUFFLEdBQUcsZUFBZSxDQUFDO0FBQ3pCLFFBQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDM0IsUUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O0FBRUQsU0FBUyxZQUFZLEdBQUk7QUFDdkIsU0FBTywwQkFBUSxTQUFTLG1CQUFtQixDQUFFLE1BQU0sRUFBRTtBQUNuRCxVQUFNLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7OztBQUdsQyxRQUFJLE1BQU0sS0FBSyxFQUFFLEVBQUU7QUFDakIsWUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3BDLFlBQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQztBQUM1QyxZQUFNLGVBQWEsTUFBTSxBQUFFLENBQUM7QUFDNUIsWUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDdEIsMEJBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ25CO0FBQ0QsUUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUNwQixDQUFDLENBQUM7Q0FDSjs7QUFFRCxTQUFTLFdBQVcsR0FBSTtBQUN0QixTQUFPLDBCQUFRLFVBQVUsTUFBTSxFQUFFO0FBQy9CLFVBQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNwQyxRQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUVuQixVQUFNLHNCQUFxQixNQUFNLEFBQUcsQ0FBQztBQUNyQyxVQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUN2Qix3QkFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDbkIsQ0FBQyxDQUFDO0NBQ0o7O0FBRUQsU0FBUyxvQkFBb0IsQ0FBRSxTQUFTLEVBQUU7QUFDeEMsU0FBTywwQkFBUSxVQUFVLE1BQU0sRUFBRTtBQUMvQixRQUFJLFNBQVMsRUFBRTtBQUNiLFVBQUksRUFBRSxHQUFHLGdDQUFnQyxDQUFDO0FBQzFDLFVBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDNUIsVUFBSSxLQUFLLEVBQUU7QUFDVCw0QkFBSSxLQUFLLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUN0QyxpQkFBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7T0FDcEQ7S0FDRjtBQUNELFFBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7R0FDcEIsQ0FBQyxDQUFDO0NBQ0o7O0FBRUQsU0FBUyxVQUFVLEdBQUk7QUFDckIsU0FBTywwQkFBUSxZQUFZLEVBQUUsQ0FBQyxDQUFDO0NBQ2hDOztRQUVRLFlBQVksR0FBWixZQUFZO1FBQUUsV0FBVyxHQUFYLFdBQVc7UUFBRSxvQkFBb0IsR0FBcEIsb0JBQW9CO1FBQUUsVUFBVSxHQUFWLFVBQVUiLCJmaWxlIjoibGliL3N0cmVhbXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB0aHJvdWdoIGZyb20gJ3Rocm91Z2gnO1xuXG5cbmZ1bmN0aW9uIGNsZWFyQnVmZmVyQ2hhcnMgKG91dHB1dCkge1xuICAvLyBJbnN0cnVtZW50cyBvdXRwdXQgaXMgYnVmZmVyZWQsIHNvIGZvciBlYWNoIGxvZyBvdXRwdXQgd2UgYWxzbyBvdXRwdXRcbiAgLy8gYSBzdHJlYW0gb2YgdmVyeSBtYW55ICoqKiouIFRoaXMgZnVuY3Rpb24gc3RyaXBzIHRob3NlIG91dCBzbyBhbGwgd2VcbiAgLy8gZ2V0IGlzIHRoZSBsb2cgb3V0cHV0IHdlIGNhcmUgYWJvdXRcbiAgbGV0IHJlID0gLyhcXG58XilcXCorXFxuPy9nO1xuICBvdXRwdXQgPSBvdXRwdXQudG9TdHJpbmcoKTtcbiAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UocmUsIFwiXCIpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBvdXRwdXRTdHJlYW0gKCkge1xuICByZXR1cm4gdGhyb3VnaChmdW5jdGlvbiBvdXRwdXRTdHJlYW1IYW5kbGVyIChvdXRwdXQpIHtcbiAgICBvdXRwdXQgPSBjbGVhckJ1ZmZlckNoYXJzKG91dHB1dCk7XG5cbiAgICAvLyBpZiB3ZSBoYXZlIG11bHRpcGxlIGxvZyBsaW5lcywgaW5kZW50IG5vbi1maXJzdCBvbmVzXG4gICAgaWYgKG91dHB1dCAhPT0gJycpIHtcbiAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKC9cXG4kL20sICcnKTtcbiAgICAgIG91dHB1dCA9IG91dHB1dC5yZXBsYWNlKC9cXG4vbSwgJ1xcbiAgICAgICAnKTtcbiAgICAgIG91dHB1dCA9IGBbSU5TVF0gJHtvdXRwdXR9YDtcbiAgICAgIG91dHB1dCA9IG91dHB1dC5ncmVlbjtcbiAgICAgIGxvZy5kZWJ1ZyhvdXRwdXQpO1xuICAgIH1cbiAgICB0aGlzLnF1ZXVlKG91dHB1dCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlcnJvclN0cmVhbSAoKSB7XG4gIHJldHVybiB0aHJvdWdoKGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvXFxuJC9tLCAnJyk7XG4gICAgdGhpcy5xdWV1ZShvdXRwdXQpO1xuXG4gICAgb3V0cHV0ID0gKGBbSU5TVCBTVERFUlJdICR7b3V0cHV0fWApO1xuICAgIG91dHB1dCA9IG91dHB1dC55ZWxsb3c7XG4gICAgbG9nLmRlYnVnKG91dHB1dCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB3ZWJTb2NrZXRBbGVydFN0cmVhbSAod2ViU29ja2V0KSB7XG4gIHJldHVybiB0aHJvdWdoKGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICBpZiAod2ViU29ja2V0KSB7XG4gICAgICBsZXQgcmUgPSAvQ2FsbCB0byBvbkFsZXJ0IHJldHVybmVkICdZRVMnLztcbiAgICAgIGxldCBtYXRjaCA9IHJlLnRlc3Qob3V0cHV0KTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBsb2cuZGVidWcoJ0VtaXRpbmcgYWxlcnQgbWVzc2FnZS4uLicpO1xuICAgICAgICB3ZWJTb2NrZXQuc29ja2V0cy5lbWl0KCdhbGVydCcsIHttZXNzYWdlOiBvdXRwdXR9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5xdWV1ZShvdXRwdXQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZHVtcFN0cmVhbSAoKSB7XG4gIHJldHVybiB0aHJvdWdoKGZ1bmN0aW9uICgpIHt9KTtcbn1cblxuZXhwb3J0IHsgb3V0cHV0U3RyZWFtLCBlcnJvclN0cmVhbSwgd2ViU29ja2V0QWxlcnRTdHJlYW0sIGR1bXBTdHJlYW0gfTtcbiJdfQ==