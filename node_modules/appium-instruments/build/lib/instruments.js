// Wrapper around Apple's Instruments app

'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _through = require('through');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumIosSimulator = require('appium-ios-simulator');

var _utils = require('./utils');

var _streams = require('./streams');

require('colors');

var ERR_NEVER_CHECKED_IN = 'Instruments never checked in';
var ERR_CRASHED_ON_STARTUP = 'Instruments crashed on startup';

var Instruments = (function () {
  _createClass(Instruments, null, [{
    key: 'quickInstruments',

    // simple factory with sane defaults
    value: function quickInstruments(opts) {
      var xcodeTraceTemplatePath;
      return _regeneratorRuntime.async(function quickInstruments$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            opts = _lodash2['default'].clone(opts);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumXcode2['default'].getAutomationTraceTemplatePath());

          case 3:
            xcodeTraceTemplatePath = context$2$0.sent;

            _lodash2['default'].defaults(opts, {
              launchTimeout: 60000,
              template: xcodeTraceTemplatePath,
              withoutDelay: true,
              xcodeVersion: '8.1',
              webSocket: null,
              flakeyRetries: 2
            });
            return context$2$0.abrupt('return', new Instruments(opts));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    /*
     * opts:
     *   - app
     *   - termTimeout - defaults to 3000
     *   - flakeyRetries - defaults to 0
     *   - udid
     *   - bootstrap
     *   - template
     *   - withoutDelay
     *   - processArguments
     *   - simulatorSdkAndDevice
     *   - tmpDir - defaults to `/tmp/appium-instruments`
     *   - traceDir
     *   - launchTimeout - defaults to 90000
     *   - webSocket
     *   - instrumentsPath
     */
  }]);

  function Instruments(opts) {
    var _this = this;

    _classCallCheck(this, Instruments);

    opts = _lodash2['default'].cloneDeep(opts);
    _lodash2['default'].defaults(opts, {
      termTimeout: 3000,
      tmpDir: '/tmp/appium-instruments',
      launchTimeout: 90000,
      flakeyRetries: 0
    });

    // config
    var _arr = ['app', 'termTimeout', 'flakeyRetries', 'udid', 'bootstrap', 'template', 'withoutDelay', 'processArguments', 'simulatorSdkAndDevice', 'tmpDir', 'traceDir'];
    for (var _i = 0; _i < _arr.length; _i++) {
      var f = _arr[_i];
      this[f] = opts[f];
    }
    this.traceDir = this.traceDir || this.tmpDir;
    this.launchTimeout = (0, _utils.parseLaunchTimeout)(opts.launchTimeout);

    // state
    this.proc = null;
    this.webSocket = opts.webSocket;
    this.instrumentsPath = opts.instrumentsPath;
    this.launchTries = 0;
    this.socketConnectDelays = [];
    this.gotFBSOpenApplicationError = false;
    this.onShutdown = new _bluebird2['default'](function (resolve, reject) {
      _this.onShutdownDeferred = { resolve: resolve, reject: reject };
    });
    // avoids UnhandledException
    this.onShutdown['catch'](function () {}).done();
  }

  _createClass(Instruments, [{
    key: 'configure',
    value: function configure() {
      return _regeneratorRuntime.async(function configure$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.xcodeVersion) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumXcode2['default'].getVersion(true));

          case 3:
            this.xcodeVersion = context$2$0.sent;

          case 4:
            if (this.xcodeVersion.versionFloat === 6.0 && this.withoutDelay) {
              _logger2['default'].info('In xcode 6.0, instruments-without-delay does not work. ' + 'If using Appium, you can disable instruments-without-delay ' + 'with the --native-instruments-lib server flag');
            }

            if (!(this.xcodeVersion.versionString === '5.0.1')) {
              context$2$0.next = 7;
              break;
            }

            throw new Error('Xcode 5.0.1 ships with a broken version of ' + 'Instruments. please upgrade to 5.0.2');

          case 7:
            if (this.template) {
              context$2$0.next = 11;
              break;
            }

            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_appiumXcode2['default'].getAutomationTraceTemplatePath());

          case 10:
            this.template = context$2$0.sent;

          case 11:
            if (this.instrumentsPath) {
              context$2$0.next = 15;
              break;
            }

            context$2$0.next = 14;
            return _regeneratorRuntime.awrap((0, _utils.getInstrumentsPath)());

          case 14:
            this.instrumentsPath = context$2$0.sent;

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'launchOnce',
    value: function launchOnce() {
      var launchResultPromise, actOnStderr;
      return _regeneratorRuntime.async(function launchOnce$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Launching instruments');
            // prepare temp dir
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(this.tmpDir));

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(this.tmpDir));

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(this.traceDir));

          case 7:

            this.exitListener = null;
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.spawnInstruments());

          case 10:
            this.proc = context$2$0.sent;

            this.proc.on('exit', function (code) {
              _logger2['default'].debug('Instruments exited with code ' + code);
            });

            launchResultPromise = new _bluebird2['default'](function (resolve, reject) {
              _this2.launchResultDeferred = { resolve: resolve, reject: reject };
            });

            // There was a special case for ignoreStartupExit
            // but it is not needed anymore, you may just listen for exit.
            this.setExitListener(function () {
              _this2.proc = null;
              _this2.launchResultDeferred.reject(new Error(ERR_CRASHED_ON_STARTUP));
            });

            this.proc.on('error', function (err) {
              _logger2['default'].debug('Error with instruments proc: ' + err.message);
              if (err.message.indexOf('ENOENT') !== -1) {
                _this2.proc = null; // otherwise we'll try to send sigkill
                _logger2['default'].error('Unable to spawn instruments: ' + err.message);
                _this2.launchResultDeferred.reject(err);
              }
            });

            this.proc.stdout.setEncoding('utf8');
            this.proc.stdout.pipe((0, _streams.outputStream)()).pipe((0, _streams.dumpStream)());

            this.proc.stderr.setEncoding('utf8');

            actOnStderr = function actOnStderr(output) {
              if (_this2.launchTimeout.afterSimLaunch && output && output.match(/CLTilesManagerClient: initialize/)) {
                _this2.addSocketConnectTimer(_this2.launchTimeout.afterSimLaunch, 'afterLaunch', function callee$3$0() {
                  return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                    while (1) switch (context$4$0.prev = context$4$0.next) {
                      case 0:
                        context$4$0.next = 2;
                        return _regeneratorRuntime.awrap((0, _utils.killAllInstruments)());

                      case 2:
                      case 'end':
                        return context$4$0.stop();
                    }
                  }, null, _this2);
                });
              }

              var fbsErrStr = '(FBSOpenApplicationErrorDomain error 8.)';
              if (output.indexOf(fbsErrStr) !== -1) {
                _this2.gotFBSOpenApplicationError = true;
              }
            };

            this.proc.stderr.pipe((0, _through.through)(function (output) {
              actOnStderr(output);
              this.queue(output);
            })).pipe((0, _streams.errorStream)()).pipe((0, _streams.webSocketAlertStream)(this.webSocket)).pipe((0, _streams.dumpStream)());

            // start waiting for instruments to launch successfully
            this.addSocketConnectTimer(this.launchTimeout.global, 'global', function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap((0, _utils.killAllInstruments)());

                  case 2:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            });

            context$2$0.prev = 21;
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(launchResultPromise);

          case 24:
            context$2$0.prev = 24;

            this.clearSocketConnectTimers();
            return context$2$0.finish(24);

          case 27:
            this.setExitListener(function (code) {
              _this2.proc = null;
              _this2.onShutdownDeferred.reject(new Error('Abnormal exit with code: ' + code));
            });

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[21,, 24, 27]]);
    }
  }, {
    key: 'launch',
    value: function launch() {
      var launchTries, errIsCatchable;
      return _regeneratorRuntime.async(function launch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.configure());

          case 2:
            launchTries = 0;

          case 3:
            if (launchTries > 0) {
              _logger2['default'].debug('Attempting to retry launching instruments, this is ' + ('retry #' + launchTries));
            }
            context$2$0.prev = 4;

            launchTries++;
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.launchOnce());

          case 8:
            return context$2$0.abrupt('break', 35);

          case 11:
            context$2$0.prev = 11;
            context$2$0.t0 = context$2$0['catch'](4);

            _logger2['default'].debug(context$2$0.t0.message);
            errIsCatchable = context$2$0.t0.message === ERR_NEVER_CHECKED_IN || context$2$0.t0.message === ERR_CRASHED_ON_STARTUP;

            if (!errIsCatchable) {
              context$2$0.next = 33;
              break;
            }

            if (!(launchTries < this.flakeyRetries + 1)) {
              context$2$0.next = 30;
              break;
            }

            if (!this.gotFBSOpenApplicationError) {
              context$2$0.next = 24;
              break;
            }

            _logger2['default'].debug('Got the FBSOpenApplicationError, not killing the ' + 'sim but leaving it open so the app will launch');
            this.gotFBSOpenApplicationError = false; // clear out for next launch
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 22:
            context$2$0.next = 28;
            break;

          case 24:
            context$2$0.next = 26;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.killAllSimulators)());

          case 26:
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(5000));

          case 28:
            context$2$0.next = 31;
            break;

          case 30:
            _logger2['default'].errorAndThrow('We exceeded the number of retries allowed for ' + 'instruments to successfully start; failing launch');

          case 31:
            context$2$0.next = 34;
            break;

          case 33:
            throw context$2$0.t0;

          case 34:
            if (true) {
              context$2$0.next = 3;
              break;
            }

          case 35:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[4, 11]]);
    }
  }, {
    key: 'registerLaunch',
    value: function registerLaunch() {
      this.launchResultDeferred.resolve();
    }
  }, {
    key: 'spawnInstruments',
    value: function spawnInstruments() {
      var traceDir, i, args, env, iwdPath, instrumentsExecArgs;
      return _regeneratorRuntime.async(function spawnInstruments$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            traceDir = undefined;
            i = 0;

          case 2:
            // loop while there are tracedirs to delete
            traceDir = _path2['default'].resolve(this.traceDir, 'instrumentscli' + i + '.trace');
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(traceDir));

          case 5:
            if (context$2$0.sent) {
              context$2$0.next = 7;
              break;
            }

            return context$2$0.abrupt('break', 10);

          case 7:
            i++;
            context$2$0.next = 2;
            break;

          case 10:
            args = ['-t', this.template, '-D', traceDir];

            if (this.udid) {
              args = args.concat(['-w', this.udid]);
              _logger2['default'].debug('Attempting to run app on real device with UDID ' + this.udid);
            }
            if (!this.udid && this.simulatorSdkAndDevice) {
              args = args.concat(['-w', this.simulatorSdkAndDevice]);
              _logger2['default'].debug('Attempting to run app on ' + this.simulatorSdkAndDevice);
            }
            args = args.concat([this.app]);
            if (this.processArguments) {
              args = args.concat(this.processArguments);
              _logger2['default'].debug('Attempting to run app with process arguments: ' + JSON.stringify(this.processArguments));
            }
            args = args.concat(['-e', 'UIASCRIPT', this.bootstrap]);
            args = args.concat(['-e', 'UIARESULTSPATH', this.tmpDir]);
            env = _lodash2['default'].clone(process.env);
            context$2$0.next = 20;
            return _regeneratorRuntime.awrap((0, _utils.getIwdPath)(this.xcodeVersion.major));

          case 20:
            iwdPath = context$2$0.sent;

            env.CA_DEBUG_TRANSACTIONS = 1;
            if (this.withoutDelay && !this.udid) {
              env.DYLD_INSERT_LIBRARIES = _path2['default'].resolve(iwdPath, 'InstrumentsShim.dylib');
              env.LIB_PATH = iwdPath;
            }
            instrumentsExecArgs = [this.instrumentsPath].concat(_toConsumableArray(_lodash2['default'].clone(args)));

            instrumentsExecArgs = _lodash2['default'].map(instrumentsExecArgs, function (arg) {
              if (arg === null) {
                throw new Error('A null value was passed as an arg to execute ' + 'instruments on the command line. A letiable is ' + 'probably not getting set. Array of command args: ' + JSON.stringify(instrumentsExecArgs));
              }
              if (_lodash2['default'].isString(arg) && arg.indexOf(' ') !== -1) {
                return '"' + arg + '"';
              }
              return arg;
            });
            _logger2['default'].debug('Spawning instruments with command: ' + instrumentsExecArgs.join(' '));
            _logger2['default'].debug('And extra without-delay env: ' + JSON.stringify({
              DYLD_INSERT_LIBRARIES: env.DYLD_INSERT_LIBRARIES,
              LIB_PATH: env.LIB_PATH
            }));
            _logger2['default'].debug('And launch timeouts (in ms): ' + JSON.stringify(this.launchTimeout));
            context$2$0.next = 30;
            return _regeneratorRuntime.awrap((0, _teen_process.spawn)(this.instrumentsPath, args, { env: env }));

          case 30:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 31:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'addSocketConnectTimer',
    value: function addSocketConnectTimer(delay, type, doAction) {
      var _this3 = this;

      var socketConnectDelay = (0, _appiumSupport.cancellableDelay)(delay);
      socketConnectDelay.then(function () {
        _logger2['default'].warn('Instruments socket client never checked in; timing out (' + type + ')');
        _this3.setExitListener(function () {
          _this3.proc = null;
          _this3.launchResultDeferred.reject(new Error(ERR_NEVER_CHECKED_IN));
        });
        return doAction();
      })['catch'](_bluebird2['default'].CancellationError, function () {}).done();
      this.socketConnectDelays.push(socketConnectDelay);
    }
  }, {
    key: 'clearSocketConnectTimers',
    value: function clearSocketConnectTimers() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(this.socketConnectDelays), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var delay = _step.value;

          delay.cancel();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.socketConnectDelays = [];
    }
  }, {
    key: 'setExitListener',
    value: function setExitListener(exitListener) {
      if (!this.proc) return;
      if (this.exitListener) {
        this.proc.removeListener('exit', this.exitListener);
      }
      this.exitListener = exitListener;
      this.proc.on('exit', exitListener);
    }

    /* PROCESS MANAGEMENT */
  }, {
    key: 'shutdown',
    value: function shutdown() {
      return _regeneratorRuntime.async(function shutdown$(context$2$0) {
        var _this5 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.proc) {
              context$2$0.next = 3;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((function callee$2$0() {
              var wasTerminated, termDelay, termPromise;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this4 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    _logger2['default'].debug('Starting shutdown.');
                    wasTerminated = false;
                    termDelay = (0, _appiumSupport.cancellableDelay)(this.termTimeout);
                    termPromise = termDelay['catch'](_bluebird2['default'].CancellationError, function () {});

                    this.setExitListener(function () {
                      _this4.proc = null;
                      wasTerminated = true;
                      termDelay.cancel();
                      _this4.onShutdownDeferred.resolve();
                    });
                    _logger2['default'].debug('Sending sigterm to instruments');
                    this.proc.kill('SIGTERM');
                    context$3$0.next = 9;
                    return _regeneratorRuntime.awrap(termPromise);

                  case 9:
                    if (wasTerminated) {
                      context$3$0.next = 11;
                      break;
                    }

                    throw new Error('Instruments did not terminate after ' + this.termTimeout / 1000 + ' seconds!');

                  case 11:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this5);
            })());

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return Instruments;
})();

exports['default'] = Instruments;
module.exports = exports['default'];

// monitoring process termination
//# sourceMappingURL=data:application/json;base64,